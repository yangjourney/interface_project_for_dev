2017-01-15 15:16:37,266 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 15:16:37,267 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 15:16:37,280 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 15:16:37,283 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 15:16:37,333 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 15:16:37,333 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 15:16:37,335 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 15:16:37,335 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 15:16:37,338 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 15:16:37,339 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 15:16:37,339 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 15:16:37,491 global_function.py[line: 19] INFO: 获取测试用例信息 [{'author_id': '1', 'author_first_name': 'Testlink', 'testsuite_id': '147', 'id': '149', 'tc_external_id': '1', 'estimated_exec_duration': '', 'summary': '', 'updater_id': '1', 'layout': '1', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'active': '1', 'id': '183', 'step_number': '1', 'execution_type': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'active': '1', 'id': '182', 'step_number': '2', 'execution_type': '1'}, {'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '150', 'step_number': '3', 'execution_type': '1'}], 'is_open': '1', 'active': '1', 'testcase_id': '148', 'execution_type': '1', 'updater_login': 'admin', 'updater_last_name': 'Administrator', 'author_last_name': 'Administrator', 'preconditions': '<p>\n\t初始化用例</p>\n', 'version': '1', 'node_order': '1000', 'updater_first_name': 'Testlink', 'name': 'test-n-登陆掌贝pos机', 'modification_ts': '2016-11-30 15:41:36', 'importance': '2', 'status': '1', 'full_tc_external_id': 'pj_pos-1', 'author_login': 'admin', 'creation_ts': '2016-07-27 18:32:10'}]
2017-01-15 15:16:37,628 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 15:16:38,356 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 15:16:38,357 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115151637', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 15:16:38,358 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 15:16:38,358 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 15:16:38,358 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 15:16:38,359 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 15:16:38,359 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115151637', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 15:16:38,360 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 15:16:38,360 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 15:16:38,360 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 15:16:38,363 casestep.py[line: 201] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 15:16:38,363 casestep.py[line: 203] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 15:16:38,363 casestep.py[line: 238] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 15:16:38,363 testcase.py[line: 158] INFO: 正在更新步骤执行结果
2017-01-15 15:16:38,363 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 15:16:38",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115151637 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 15:16:38,365 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 15:16:38,365 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 15:16:38,365 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 15:16:38,365 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115151637', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 15:16:38,366 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 15:16:38,366 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 15:16:38,366 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 15:16:38,366 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 15:16:38,412 casestep.py[line: 201] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 15:16:38,412 casestep.py[line: 203] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 15:16:38,412 casestep.py[line: 238] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 15:16:38,412 testcase.py[line: 158] INFO: 正在更新步骤执行结果
2017-01-15 15:16:38,413 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 15:16:38",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'serial_no': 2, 'device_no': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115151637 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 15:16:38,417 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 15:16:38,418 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 15:16:38,418 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 15:16:38,419 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115151637', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 15:16:38,423 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 15:16:38,423 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 15:16:38,424 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 15:16:38,424 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 15:16:38,425 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 15:16:38,425 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 15:16:38,426 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 15:16:38,426 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 15:16:38,426 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 15:16:38,427 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 15:16:38,428 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 15:16:38,428 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 15:16:38,428 httpprotocol.py[line: 76] INFO: 请求头为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 15:16:38,991 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 15:16:38,991 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 15:16:38,991 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 07:16:36 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 15:16:38,991 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 15:16:38,992 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 15:16:38,992 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 15:16:38,994 testcase.py[line: 129] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 15:16:38,994 testcase.py[line: 136] INFO: 正在更新步骤执行结果
2017-01-15 15:16:38,994 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 15:16:38",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'DeviceId': '[CaseStep.device_no]', 'SerialNo': '[CaseStep.serial_no]', 'Content-Type': 'application/json;charset=utf-8', 'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'输出': {'Token': {'token': 'value'}, 'OperatorId': {'operator': {'id': 'value'}}}, '检查': 'body', '匹配规则': '键值相等', '条件': [{'消息': '登录失败,success不为true', '模式': {'success': True}}, {'消息': 'message不为成功', '模式': {'message': '成功'}}, {'消息': 'code不为4001', '模式': {'code': '4001'}}]}" WHERE executed_history_id = 20170115151637 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 15:16:38,997 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 15:16:38,997 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 15:16:38" WHERE executed_history_id = 20170115151637 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 15:16:38,999 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 15:16:38,999 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '')
2017-01-15 15:16:38,999 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 15:16:38,999 main.py[line: 115] INFO: 运行指定项目
2017-01-15 15:16:39,169 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 15:16:39,169 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 15:16:39,171 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 15:16:39,171 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 15:16:39,304 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 15:16:39,420 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 15:16:39,420 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 15:16:39,556 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['120', '114', '126', '80', '88', '76', '102', '110', '106', '93', '98'])
2017-01-15 15:16:39,708 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_id': '1', 'author_first_name': 'Testlink', 'testsuite_id': '109', 'id': '121', 'tc_external_id': '11', 'estimated_exec_duration': '', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n<p>\n\tulr中的40758966216286146560取自base_info.serial字段</p>\n', 'updater_id': '1', 'layout': '1', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CMOrder&quot;,<br />\n\t&quot;function&quot;:&quot;test_create_mall_order&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;params&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:2,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;success&quot;:1,&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'active': '1', 'id': '122', 'step_number': '1', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;Pay5&quot;,<br />\n\t&quot;function&quot;:&quot;test_pay5&quot;,<br />\n\t&quot;method&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;button_name&quot;:&quot;确认支付&quot;, &quot;page_title&quot;:&quot;储值卡&quot;}</p>\n', 'active': '1', 'id': '123', 'step_number': '2', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;GetInCoupon&quot;,<br />\n\t&quot;function&quot;:&quot;test_get_in_coupon&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;params&quot;:&quot;&quot;<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;getByWeixin&quot;: 0, &quot;codeType&quot;: 2, &quot;title&quot;: &quot;动态校验&quot;, &quot;subTitle&quot;: &quot;动态校验&quot;, &quot;notice&quot;: &quot;动态校验&quot;, &quot;description&quot;: &quot;动态校验&quot;,&quot;useLimit&quot;:&quot;动态校验&quot;,&nbsp; &quot;dateInfoType&quot;: &quot;动态校验&quot;, &quot;cardType&quot;: 1,&quot;listing&quot;: 1, &quot;fitAll&quot;: 1,&quot;detailTxt&quot;: &quot;动态校验&quot;,&quot;servicePhone&quot;:&quot;动态校验&quot;,&quot;cashLeastCost&quot;: &quot;动态校验&quot;,&quot;cashReduceCost&quot;: &quot;动态校验&quot;,&quot;discount&quot;: 0,&quot;channel&quot;: -1,&quot;branchId&quot;: -1,&quot;success&quot;: 1, &quot;skuQuantity&quot;:&quot;动态校验&quot;,&quot;output_arg1&quot;:&quot;GetInCoupon.card_code&quot;</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '124', 'step_number': '3', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_with_cash_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:&quot;[GetInCoupon.card_code]&quot;,&quot;yhCardType&quot;:&quot;CASH&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;,&quot;coupon_weixin_verification_record&quot;:1}</p>\n', 'active': '1', 'id': '129', 'step_number': '4', 'execution_type': '1'}], 'is_open': '1', 'active': '0', 'testcase_id': '120', 'execution_type': '1', 'updater_login': 'admin', 'updater_last_name': 'Administrator', 'author_last_name': 'Administrator', 'preconditions': '', 'version': '1', 'node_order': '3', 'updater_first_name': 'Testlink', 'name': 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', 'modification_ts': '2016-07-29 18:31:36', 'importance': '2', 'status': '1', 'full_tc_external_id': 'wecharno-11', 'author_login': 'admin', 'creation_ts': '2016-07-26 12:12:10'}]
2017-01-15 15:16:39,863 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 15:16:39,863 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115151637', 120, 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 15:16:39,864 testplan.py[line: 72] INFO: 开始执行测试用例[id=120，name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]
2017-01-15 15:16:39,865 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 15:16:39,865 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 15:16:39,865 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 15:16:39" WHERE executed_history_id = 20170115151637 AND testcase_id = 120 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 15:16:40,005 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=120]的执行结果
2017-01-15 15:16:40,136 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_id': '1', 'author_first_name': 'Testlink', 'testsuite_id': '113', 'id': '115', 'tc_external_id': '10', 'estimated_exec_duration': '', 'summary': '', 'updater_id': '1', 'layout': '1', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'expected_results': '', 'active': '1', 'id': '116', 'step_number': '1', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '117', 'step_number': '2', 'execution_type': '1'}], 'is_open': '1', 'active': '1', 'testcase_id': '114', 'execution_type': '1', 'updater_login': 'admin', 'updater_last_name': 'Administrator', 'author_last_name': 'Administrator', 'preconditions': '', 'version': '1', 'node_order': '1000', 'updater_first_name': 'Testlink', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'modification_ts': '2016-11-29 17:52:17', 'importance': '2', 'status': '1', 'full_tc_external_id': 'wecharno-10', 'author_login': 'admin', 'creation_ts': '2016-07-25 15:02:41'}]
2017-01-15 15:16:40,248 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 15:16:40,248 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115151637', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 15:16:40,250 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 15:16:40,250 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 15:16:40,250 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 15:16:40,251 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 15:16:40,251 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115151637', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 15:16:40,252 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 15:16:40,385 global_function.py[line: 19] INFO: 获取测试用例信息 [{'author_id': '1', 'author_first_name': 'Testlink', 'testsuite_id': '105', 'id': '107', 'tc_external_id': '8', 'estimated_exec_duration': '', 'summary': '', 'updater_id': '1', 'layout': '1', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'active': '1', 'id': '108', 'step_number': '1', 'execution_type': '1'}], 'is_open': '1', 'active': '1', 'testcase_id': '106', 'execution_type': '1', 'updater_login': 'admin', 'updater_last_name': 'Administrator', 'author_last_name': 'Administrator', 'preconditions': '', 'version': '1', 'node_order': '1000', 'updater_first_name': 'Testlink', 'name': 'test-n-创建储值卡支付订单', 'modification_ts': '2016-11-29 17:33:09', 'importance': '2', 'status': '1', 'full_tc_external_id': 'wecharno-8', 'author_login': 'admin', 'creation_ts': '2016-07-21 11:26:32'}]
2017-01-15 15:16:40,505 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 15:16:40,773 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 15:16:40,773 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115151637', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 15:16:40,775 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 15:16:40,775 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 15:16:40,775 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 15:16:40,775 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 15:16:40,776 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115151637', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 15:16:40,777 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 15:16:40,777 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 15:16:40,777 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 15:16:40,778 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 15:16:40,778 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 15:16:40,778 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 15:16:40,778 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 15:16:40,778 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 15:16:40,779 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 15:16:40,779 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 15:16:40,779 httpprotocol.py[line: 76] INFO: 请求头为：OrderedDict([('Content-Type', 'application/x-www-form-urlencoded'), ('charset', 'utf-8'), ('Cookie', '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 15:16:40,930 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 15:16:40,930 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 15:16:40,930 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 07:16:38 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 15:16:40,930 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 15:16:40,930 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 15:16:40,931 testcase.py[line: 129] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 15:16:40,931 testcase.py[line: 136] INFO: 正在更新步骤执行结果
2017-01-15 15:16:40,931 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 15:16:40",step_action="{'\u8bf7\u6c42\u5934': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body', '匹配规则': '包含字符串', '条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}]}" WHERE executed_history_id = 20170115151637 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 15:16:40,933 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 15:16:40,933 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 15:16:40" WHERE executed_history_id = 20170115151637 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 15:16:40,934 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 16:35:05,214 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 16:35:05,214 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 16:35:05,272 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 16:35:05,280 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 16:35:05,383 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 16:35:05,383 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 16:35:05,386 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 16:35:05,386 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 16:35:05,389 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 16:35:05,391 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 16:35:05,391 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 16:35:05,817 global_function.py[line: 19] INFO: 获取测试用例信息 [{'version': '1', 'layout': '1', 'name': 'test-n-登陆掌贝pos机', 'steps': [{'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'id': '183', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'active': '1', 'execution_type': '1'}, {'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'id': '182', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'active': '1', 'execution_type': '1'}, {'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'id': '150', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'active': '1', 'execution_type': '1'}], 'is_open': '1', 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-30 15:41:36', 'full_tc_external_id': 'pj_pos-1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'testcase_id': '148', 'id': '149', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'author_last_name': 'Administrator', 'importance': '2', 'testsuite_id': '147', 'status': '1', 'author_first_name': 'Testlink', 'author_id': '1', 'summary': '', 'updater_id': '1', 'tc_external_id': '1', 'estimated_exec_duration': '', 'active': '1', 'creation_ts': '2016-07-27 18:32:10', 'node_order': '1000', 'updater_login': 'admin'}]
2017-01-15 16:35:06,029 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 16:35:06,791 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:35:06,791 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115163505', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:35:06,793 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 16:35:06,793 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 16:35:06,794 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 16:35:06,794 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:35:06,794 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115163505', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:35:06,796 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:35:06,797 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:35:06,797 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 16:35:06,800 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 16:35:06,801 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:35:06,801 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 16:35:06,801 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 16:35:06,801 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:35:06",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115163505 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:35:06,804 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 16:35:06,804 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 16:35:06,804 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:35:06,804 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115163505', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:35:06,806 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:35:06,806 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 16:35:06,806 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 16:35:06,806 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 16:35:06,810 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 16:35:06,810 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:35:06,810 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 16:35:06,811 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 16:35:06,811 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:35:06",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'device_no': 1, 'serial_no': 2}, '检查': 'body'}" WHERE executed_history_id = 20170115163505 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:35:06,813 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 16:35:06,813 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 16:35:06,813 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:35:06,813 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115163505', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:35:06,815 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:35:06,815 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 16:35:06,815 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:35:06,815 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:35:06,816 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 16:35:06,816 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 16:35:06,816 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 16:35:06,816 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 16:35:06,816 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 16:35:06,816 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 16:35:06,816 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 16:35:06,817 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 16:35:06,817 httpprotocol.py[line: 76] INFO: 请求头为：{'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8', 'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0'}
2017-01-15 16:35:07,199 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 16:35:07,200 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 16:35:07,200 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:35:04 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:35:07,200 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:35:07,200 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:35:07,200 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:35:07,201 testcase.py[line: 130] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 16:35:07,201 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 16:35:07,201 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 16:35:06",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8', 'ProductVersion': '[global_product_version]', 'SerialNo': '[CaseStep.serial_no]', 'ProtocolVersion': '4.0'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'输出': {'Token': {'token': 'value'}, 'OperatorId': {'operator': {'id': 'value'}}}, '检查': 'body', '条件': [{'消息': '登录失败,success不为true', '模式': {'success': True}}, {'消息': 'message不为成功', '模式': {'message': '成功'}}, {'消息': 'code不为4001', '模式': {'code': '4001'}}], '匹配规则': '键值相等'}" WHERE executed_history_id = 20170115163505 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:35:07,203 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 16:35:07,203 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 16:35:06" WHERE executed_history_id = 20170115163505 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:35:07,204 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 16:35:07,204 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '')
2017-01-15 16:35:07,204 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 16:35:07,204 main.py[line: 115] INFO: 运行指定项目
2017-01-15 16:35:07,349 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 16:35:07,349 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 16:35:07,351 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 16:35:07,351 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 16:35:07,497 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 16:35:07,649 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 16:35:07,649 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 16:35:07,830 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['98', '93', '110', '88', '76', '102', '126', '114', '106', '120', '80'])
2017-01-15 16:35:08,000 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'layout': '1', 'name': 'test-n-查看购物车商品列表', 'steps': [{'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;code&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;200&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '101', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'active': '1', 'execution_type': '1'}], 'is_open': '1', 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 18:13:45', 'full_tc_external_id': 'wecharno-6', 'preconditions': '', 'testcase_id': '98', 'id': '99', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'author_last_name': 'Administrator', 'importance': '2', 'testsuite_id': '97', 'status': '1', 'author_first_name': 'Testlink', 'author_id': '1', 'summary': '', 'updater_id': '1', 'tc_external_id': '6', 'estimated_exec_duration': '', 'active': '1', 'creation_ts': '2016-07-20 15:50:42', 'node_order': '1000', 'updater_login': 'admin'}]
2017-01-15 16:35:08,120 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:35:08,120 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115163505', 98, 'test-n-查看购物车商品列表', '微商城-查看购物车商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:35:08,121 testplan.py[line: 72] INFO: 开始执行测试用例[id=98，name=test-n-查看购物车商品列表]
2017-01-15 16:35:08,121 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2017-01-15 16:35:08,121 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}
2017-01-15 16:35:08,121 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:35:08,121 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115163505', 98, 'test-n-查看购物车商品列表', 'plan1_of_wechatno', 'pj_wechatno', 101, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:35:08,123 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:35:08,124 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:35:08,124 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:35:08,124 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:35:08,124 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 16:35:08,124 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:35:08,125 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 16:35:08,125 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2017-01-15 16:35:08,125 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:35:08,145 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:35:08,146 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"code":"4000","message":"Server Error"}
2017-01-15 16:35:08,146 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:35:06 GMT'), ('Content-Type', 'application/json;charset=ISO-8859-1'), ('Content-Length', '56'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:35:08,146 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:35:08,146 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：200
2017-01-15 16:35:08,146 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 16:35:08,146 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 16:35:08,146 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 16:35:08",step_action="{'\u65b9\u6cd5': 'get', 'url': '/cartlist?', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'检查': 'code', '条件': [{'消息': '把商品移出购物车中失败', '模式': '200'}], '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115163505 AND testcase_id = 98 AND step_id = 101 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:35:08,148 testcase.py[line: 162] INFO: 测试用例[id=98, name=test-n-查看购物车商品列表]执行成功
2017-01-15 16:35:08,148 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 16:35:08,148 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 16:35:08" WHERE executed_history_id = 20170115163505 AND testcase_id = 98 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:35:08,262 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=98]的执行结果
2017-01-15 16:35:08,506 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'layout': '1', 'name': 'test-n-把商品移出购物车', 'steps': [{'step_number': '1', 'expected_results': '', 'id': '95', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,</p>\n<p>\n\t&quot;用例id&quot;:88,</p>\n<p>\n\t&quot;用例名称&quot;:&quot;test-n-把商品加入购物车&quot;<br />\n\t}</p>\n<p>\n\t&nbsp;</p>\n', 'active': '1', 'execution_type': '1'}, {'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品移出购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '96', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cart/delfromcart?&quot;,<br />\n\t&quot;参数&quot;:{&quot;strIds&quot;:&quot;[CaseStep.strIds]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'active': '1', 'execution_type': '1'}, {'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;[]&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '178', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'active': '1', 'execution_type': '1'}], 'is_open': '1', 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 18:05:21', 'full_tc_external_id': 'wecharno-5', 'preconditions': '', 'testcase_id': '93', 'id': '94', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'author_last_name': 'Administrator', 'importance': '2', 'testsuite_id': '91', 'status': '1', 'author_first_name': 'Testlink', 'author_id': '1', 'summary': '', 'updater_id': '1', 'tc_external_id': '5', 'estimated_exec_duration': '', 'active': '1', 'creation_ts': '2016-07-20 12:25:46', 'node_order': '1000', 'updater_login': 'admin'}]
2017-01-15 16:35:08,620 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:35:08,620 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115163505', 93, 'test-n-把商品移出购物车', '微商城-把商品移出购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:35:08,621 testplan.py[line: 72] INFO: 开始执行测试用例[id=93，name=test-n-把商品移出购物车]
2017-01-15 16:35:08,621 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} 
2017-01-15 16:35:08,621 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:35:08,621 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:35:08,621 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115163505', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 95, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} ', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:35:08,622 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:35:08,774 global_function.py[line: 19] INFO: 获取测试用例信息 [{'version': '1', 'layout': '1', 'name': 'test-n-把商品加入购物车', 'steps': [{'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'id': '175', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'active': '1', 'execution_type': '1'}, {'step_number': '2', 'expected_results': '', 'id': '174', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'active': '1', 'execution_type': '1'}, {'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '90', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'active': '1', 'execution_type': '1'}, {'step_number': '4', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'id': '176', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'active': '1', 'execution_type': '1'}, {'step_number': '5', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '177', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'active': '1', 'execution_type': '1'}], 'is_open': '1', 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 17:58:09', 'full_tc_external_id': 'wecharno-4', 'preconditions': '', 'testcase_id': '88', 'id': '89', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'author_last_name': 'Administrator', 'importance': '2', 'testsuite_id': '87', 'status': '1', 'author_first_name': 'Testlink', 'author_id': '1', 'summary': '', 'updater_id': '1', 'tc_external_id': '4', 'estimated_exec_duration': '', 'active': '1', 'creation_ts': '2016-07-20 12:07:40', 'node_order': '1000', 'updater_login': 'admin'}]
2017-01-15 16:35:08,957 global_function.py[line: 39] INFO: 正在读取套件[id=87]的协议，host，端口配置...
2017-01-15 16:35:09,276 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:35:09,276 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115163505', 88, 'test-n-把商品加入购物车', '把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:35:09,277 global_function.py[line: 71] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 16:35:09,277 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 16:35:09,277 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 16:35:09,278 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:35:09,278 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115163505', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:35:09,279 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:35:09,279 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:35:09,279 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 16:35:09,280 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 16:35:09,283 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2017-01-15 16:35:09,283 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:35:09,284 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}]
2017-01-15 16:35:09,284 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 16:35:09,284 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:35:09",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115163505 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:35:09,286 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2017-01-15 16:35:09,286 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:35:09,286 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:35:09,287 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115163505', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:35:09,289 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:35:09,290 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2017-01-15 16:35:09,290 casestep.py[line: 149] INFO: 转换后的参数体为：(167020,)
2017-01-15 16:35:09,290 mydb.py[line: 72] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2017-01-15 16:35:09,699 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 16:35:09,699 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:35:09",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '\u53c2\u6570': [167020]}", expected_results="" WHERE executed_history_id = 20170115163505 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:35:09,703 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2017-01-15 16:35:09,704 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2017-01-15 16:35:09,704 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:35:09,704 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115163505', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', '80', '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:35:09,706 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:35:09,706 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:35:09,706 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:35:09,706 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:35:09,706 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', 26838), ('standardId', 'undefined'), ('amount', 1), ('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 16:35:09,706 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:35:09,707 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 16:35:09,707 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2017-01-15 16:35:09,707 httpprotocol.py[line: 75] INFO: 参数为：b'mallGoodsId=26838&standardId=undefined&amount=1&serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2017-01-15 16:35:09,707 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:35:10,279 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:35:10,279 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"加入购物车失败","attach":null}
2017-01-15 16:35:10,279 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:35:08 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:35:10,279 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:35:10,279 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:35:10,279 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:35:10,280 testcase.py[line: 130] INFO: 步骤[3]执行失败,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 16:35:10,280 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 16:35:10,280 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 把商品加如购物车失败,success不为true", protocol_method="post", runtime="2017-01-15 16:35:09",step_action="{'\u65b9\u6cd5': 'post', 'url': '/addtocart', '\u53c2\u6570': {'mallGoodsId': 26838, 'standardId': 'undefined', 'amount': 1, 'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'检查': 'body', '条件': [{'消息': '把商品加如购物车失败,success不为true', '模式': {'success': True}}], '匹配规则': '键值相等'}" WHERE executed_history_id = 20170115163505 AND testcase_id = 88 AND step_id = 90 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:35:10,281 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 16:35:10,282 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 16:35:09" WHERE executed_history_id = 20170115163505 and testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:35:10,282 global_function.py[line: 82] INFO: 指定用例[88]已执行完
2017-01-15 16:41:12,330 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 16:41:12,332 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 16:41:12,349 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 16:41:12,352 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 16:41:12,430 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 16:41:12,430 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 16:41:12,432 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 16:41:12,433 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 16:41:12,435 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 16:41:12,438 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 16:41:12,439 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 16:41:12,638 global_function.py[line: 19] INFO: 获取测试用例信息 [{'node_order': '1000', 'tc_external_id': '1', 'updater_login': 'admin', 'updater_id': '1', 'creation_ts': '2016-07-27 18:32:10', 'author_last_name': 'Administrator', 'summary': '', 'name': 'test-n-登陆掌贝pos机', 'updater_first_name': 'Testlink', 'testcase_id': '148', 'layout': '1', 'version': '1', 'testsuite_id': '147', 'author_first_name': 'Testlink', 'preconditions': '<p>\n\t初始化用例</p>\n', 'execution_type': '1', 'is_open': '1', 'estimated_exec_duration': '', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '183', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'step_number': '1', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '182', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'step_number': '2', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'id': '150', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'execution_type': '1', 'active': '1'}], 'status': '1', 'updater_last_name': 'Administrator', 'full_tc_external_id': 'pj_pos-1', 'author_id': '1', 'active': '1', 'author_login': 'admin', 'id': '149', 'modification_ts': '2016-11-30 15:41:36', 'importance': '2'}]
2017-01-15 16:41:12,880 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 16:41:13,722 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:41:13,722 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164112', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:41:13,724 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 16:41:13,724 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 16:41:13,725 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 16:41:13,725 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:41:13,725 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164112', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:41:13,726 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:41:13,727 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:41:13,727 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 16:41:13,731 casestep.py[line: 204] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 16:41:13,732 casestep.py[line: 206] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:41:13,732 casestep.py[line: 241] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 16:41:13,732 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 16:41:13,732 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:41:13",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'检查': 'body', '输出': {'branch_id': 1}}" WHERE executed_history_id = 20170115164112 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:41:13,735 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 16:41:13,735 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 16:41:13,735 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:41:13,735 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164112', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:41:13,737 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:41:13,737 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 16:41:13,737 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 16:41:13,737 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 16:41:13,741 casestep.py[line: 204] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 16:41:13,741 casestep.py[line: 206] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:41:13,741 casestep.py[line: 241] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 16:41:13,741 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 16:41:13,742 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:41:13",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'检查': 'body', '输出': {'serial_no': 2, 'device_no': 1}}" WHERE executed_history_id = 20170115164112 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:41:13,743 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 16:41:13,744 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 16:41:13,744 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:41:13,744 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164112', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:41:13,745 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:41:13,745 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 16:41:13,746 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:41:13,746 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:41:13,746 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 16:41:13,746 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 16:41:13,746 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 16:41:13,746 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 16:41:13,746 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 16:41:13,747 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 16:41:13,747 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 16:41:13,747 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 16:41:13,747 httpprotocol.py[line: 76] INFO: 请求头为：{'ProtocolVersion': '4.0', 'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8'}
2017-01-15 16:41:14,143 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 16:41:14,143 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 16:41:14,143 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:41:11 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:41:14,143 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:41:14,143 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:41:14,143 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:41:14,145 testcase.py[line: 130] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 16:41:14,145 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 16:41:14,146 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 16:41:13",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'ProtocolVersion': '4.0', 'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'匹配规则': '键值相等', '条件': [{'模式': {'success': True}, '消息': '登录失败,success不为true'}, {'模式': {'message': '成功'}, '消息': 'message不为成功'}, {'模式': {'code': '4001'}, '消息': 'code不为4001'}], '检查': 'body', '输出': {'OperatorId': {'operator': {'id': 'value'}}, 'Token': {'token': 'value'}}}" WHERE executed_history_id = 20170115164112 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:41:14,147 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 16:41:14,147 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 16:41:13" WHERE executed_history_id = 20170115164112 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:41:14,149 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 16:41:14,149 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '')
2017-01-15 16:41:14,149 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 16:41:14,149 main.py[line: 115] INFO: 运行指定项目
2017-01-15 16:41:14,281 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 16:41:14,281 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 16:41:14,282 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 16:41:14,282 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 16:41:14,422 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 16:41:14,547 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 16:41:14,547 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 16:41:14,679 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['80', '114', '106', '93', '110', '102', '88', '126', '76', '98', '120'])
2017-01-15 16:41:14,836 testplan.py[line: 45] INFO: 获取测试用例信息 [{'node_order': '1000', 'tc_external_id': '2', 'updater_login': 'admin', 'updater_id': '1', 'creation_ts': '2016-07-20 11:05:03', 'author_last_name': 'Administrator', 'summary': '', 'name': 'test-n-点击商品', 'updater_first_name': 'Testlink', 'testcase_id': '80', 'layout': '1', 'version': '1', 'testsuite_id': '79', 'author_first_name': 'Testlink', 'preconditions': '', 'execution_type': '1', 'is_open': '1', 'estimated_exec_duration': '', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '82', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'execution_type': '1', 'active': '1'}], 'status': '1', 'updater_last_name': 'Administrator', 'full_tc_external_id': 'wecharno-2', 'author_id': '1', 'active': '1', 'author_login': 'admin', 'id': '81', 'modification_ts': '2016-11-29 18:16:14', 'importance': '2'}]
2017-01-15 16:41:14,982 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:41:14,982 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164112', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:41:14,983 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2017-01-15 16:41:14,983 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2017-01-15 16:41:14,983 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2017-01-15 16:41:14,984 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:41:14,984 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164112', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:41:14,986 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:41:14,986 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:41:14,986 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:41:14,987 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('id', 26838), ('serial', '10549840601068216320')])
2017-01-15 16:41:14,987 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:41:14,987 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 16:41:14,987 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2017-01-15 16:41:14,987 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:41:15,037 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:41:15,037 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/css/malls/detail.css?v=5.0.0-faae2">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/mall/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320",
			mallConfigSerial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script src="/common/js/request.js?v=5.0.0-faae2"></script>
	<script src="/common/js/extend-number.js?v=5.0.0-faae2"></script>
	<script src="/component/iscroll/js/iscroll.js?v=5.0.0-faae2"></script>
	<script src="/component/swiper/js/swiper.min.js?v=5.0.0-faae2"></script>
	<script src="/js/malls/detail.js?v=5.0.0-faae2"></script>
</body>
</html>
2017-01-15 16:41:15,037 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:41:12 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3983'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=B44C18C5F9B818FFF95A36B6AC64DBDE; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 16:41:15,037 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:41:15,038 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2017-01-15 16:41:15,038 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 16:41:15,039 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 16:41:15,039 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 16:41:14",step_action="{'\u65b9\u6cd5': 'get', 'url': '/goods/item?', '\u53c2\u6570': {'id': 26838, 'serial': '10549840601068216320'}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': '立即购买', '消息': '点击商品时无法打开购买页面'}], '检查': 'body'}" WHERE executed_history_id = 20170115164112 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:41:15,040 testcase.py[line: 162] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2017-01-15 16:41:15,040 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 16:41:15,040 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 16:41:14" WHERE executed_history_id = 20170115164112 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:41:15,159 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2017-01-15 16:41:15,457 testplan.py[line: 45] INFO: 获取测试用例信息 [{'node_order': '1000', 'tc_external_id': '10', 'updater_login': 'admin', 'updater_id': '1', 'creation_ts': '2016-07-25 15:02:41', 'author_last_name': 'Administrator', 'summary': '', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'updater_first_name': 'Testlink', 'testcase_id': '114', 'layout': '1', 'version': '1', 'testsuite_id': '113', 'author_first_name': 'Testlink', 'preconditions': '', 'execution_type': '1', 'is_open': '1', 'estimated_exec_duration': '', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'id': '116', 'expected_results': '', 'step_number': '1', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '117', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'execution_type': '1', 'active': '1'}], 'status': '1', 'updater_last_name': 'Administrator', 'full_tc_external_id': 'wecharno-10', 'author_id': '1', 'active': '1', 'author_login': 'admin', 'id': '115', 'modification_ts': '2016-11-29 17:52:17', 'importance': '2'}]
2017-01-15 16:41:15,569 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:41:15,570 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164112', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:41:15,571 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 16:41:15,571 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 16:41:15,571 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:41:15,571 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:41:15,571 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164112', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:41:15,572 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:41:15,693 global_function.py[line: 19] INFO: 获取测试用例信息 [{'node_order': '1000', 'tc_external_id': '8', 'updater_login': 'admin', 'updater_id': '1', 'creation_ts': '2016-07-21 11:26:32', 'author_last_name': 'Administrator', 'summary': '', 'name': 'test-n-创建储值卡支付订单', 'updater_first_name': 'Testlink', 'testcase_id': '106', 'layout': '1', 'version': '1', 'testsuite_id': '105', 'author_first_name': 'Testlink', 'preconditions': '', 'execution_type': '1', 'is_open': '1', 'estimated_exec_duration': '', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'id': '108', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'execution_type': '1', 'active': '1'}], 'status': '1', 'updater_last_name': 'Administrator', 'full_tc_external_id': 'wecharno-8', 'author_id': '1', 'active': '1', 'author_login': 'admin', 'id': '107', 'modification_ts': '2016-11-29 17:33:09', 'importance': '2'}]
2017-01-15 16:41:15,831 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 16:41:16,104 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:41:16,104 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164112', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:41:16,105 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 16:41:16,105 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 16:41:16,105 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 16:41:16,105 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:41:16,105 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164112', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:41:16,106 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:41:16,106 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:41:16,107 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:41:16,107 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:41:16,107 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 16:41:16,107 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:41:16,107 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:41:16,107 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 16:41:16,108 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 16:41:16,108 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 16:41:16,108 httpprotocol.py[line: 76] INFO: 请求头为：{'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 16:41:16,160 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:41:16,161 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 16:41:16,161 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:41:14 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:41:16,162 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:41:16,162 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 16:41:16,164 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 16:41:16,165 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 16:41:16,165 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 16:41:16",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}], '检查': 'body', '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}}" WHERE executed_history_id = 20170115164112 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:41:16,172 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 16:41:16,172 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 16:41:16" WHERE executed_history_id = 20170115164112 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:41:16,177 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 16:43:28,579 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 16:43:28,579 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 16:43:28,593 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 16:43:28,598 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 16:44:41,599 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 16:44:41,600 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 16:44:41,617 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 16:44:41,621 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 16:44:41,706 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 16:44:41,706 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 16:44:41,707 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 16:44:41,707 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 16:44:41,708 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 16:44:41,710 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 16:44:41,710 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 16:44:41,946 global_function.py[line: 19] INFO: 获取测试用例信息 [{'updater_last_name': 'Administrator', 'updater_first_name': 'Testlink', 'name': 'test-n-登陆掌贝pos机', 'author_login': 'admin', 'is_open': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'execution_type': '1', 'steps': [{'execution_type': '1', 'id': '183', 'active': '1', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n'}, {'execution_type': '1', 'id': '182', 'active': '1', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n'}, {'execution_type': '1', 'id': '150', 'active': '1', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n'}], 'node_order': '1000', 'importance': '2', 'version': '1', 'tc_external_id': '1', 'id': '149', 'active': '1', 'estimated_exec_duration': '', 'testcase_id': '148', 'status': '1', 'author_first_name': 'Testlink', 'author_last_name': 'Administrator', 'summary': '', 'testsuite_id': '147', 'author_id': '1', 'updater_id': '1', 'updater_login': 'admin', 'modification_ts': '2016-11-30 15:41:36', 'creation_ts': '2016-07-27 18:32:10', 'full_tc_external_id': 'pj_pos-1', 'layout': '1'}]
2017-01-15 16:44:42,068 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 16:44:42,890 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:44:42,891 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164441', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:44:42,893 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 16:44:42,893 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 16:44:42,893 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 16:44:42,894 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:44:42,894 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164441', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:44:42,896 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:44:42,897 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:44:42,897 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 16:44:42,900 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 16:44:42,901 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:44:42,901 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 16:44:42,901 global_function.py[line: 89] ERROR: 运行用例出错 not all arguments converted during string formatting
2017-01-15 16:44:42,901 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '执行用例出错 148')
2017-01-15 16:44:42,901 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 16:44:42,901 main.py[line: 115] INFO: 运行指定项目
2017-01-15 16:44:43,072 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 16:44:43,072 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 16:44:43,073 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 16:44:43,073 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 16:44:43,216 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 16:44:43,346 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 16:44:43,346 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 16:44:43,482 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['88', '76', '126', '93', '102', '114', '80', '110', '106', '98', '120'])
2017-01-15 16:44:43,612 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_last_name': 'Administrator', 'updater_first_name': 'Testlink', 'name': 'test-n-把商品加入购物车', 'author_login': 'admin', 'is_open': '1', 'preconditions': '', 'execution_type': '1', 'steps': [{'execution_type': '1', 'id': '175', 'active': '1', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n'}, {'execution_type': '1', 'id': '174', 'active': '1', 'step_number': '2', 'expected_results': '', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n'}, {'execution_type': '1', 'id': '90', 'active': '1', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n'}, {'execution_type': '1', 'id': '176', 'active': '1', 'step_number': '4', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n'}, {'execution_type': '1', 'id': '177', 'active': '1', 'step_number': '5', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n'}], 'node_order': '1000', 'importance': '2', 'version': '1', 'tc_external_id': '4', 'id': '89', 'active': '1', 'estimated_exec_duration': '', 'testcase_id': '88', 'status': '1', 'author_first_name': 'Testlink', 'author_last_name': 'Administrator', 'summary': '', 'testsuite_id': '87', 'author_id': '1', 'updater_id': '1', 'updater_login': 'admin', 'modification_ts': '2016-11-29 17:58:09', 'creation_ts': '2016-07-20 12:07:40', 'full_tc_external_id': 'wecharno-4', 'layout': '1'}]
2017-01-15 16:44:43,764 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:44:43,764 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164441', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:44:43,769 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 16:44:43,769 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 16:44:43,769 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 16:44:43,769 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:44:43,769 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164441', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:44:43,771 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:44:43,771 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:44:43,771 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 16:44:43,771 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 16:44:43,774 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2017-01-15 16:44:43,774 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:44:43,775 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'customer_id': 167020}]
2017-01-15 16:45:20,362 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 16:45:20,362 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 16:45:20,383 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 16:45:20,387 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 16:45:20,479 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 16:45:20,480 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 16:45:20,481 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 16:45:20,481 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 16:45:20,483 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 16:45:20,485 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 16:45:20,485 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 16:45:20,655 global_function.py[line: 19] INFO: 获取测试用例信息 [{'estimated_exec_duration': '', 'testcase_id': '148', 'author_login': 'admin', 'status': '1', 'id': '149', 'node_order': '1000', 'importance': '2', 'author_id': '1', 'updater_first_name': 'Testlink', 'steps': [{'execution_type': '1', 'active': '1', 'id': '183', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n'}, {'execution_type': '1', 'active': '1', 'id': '182', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n'}, {'execution_type': '1', 'active': '1', 'id': '150', 'step_number': '3', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n'}], 'name': 'test-n-登陆掌贝pos机', 'updater_id': '1', 'active': '1', 'updater_last_name': 'Administrator', 'version': '1', 'updater_login': 'admin', 'creation_ts': '2016-07-27 18:32:10', 'full_tc_external_id': 'pj_pos-1', 'tc_external_id': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'modification_ts': '2016-11-30 15:41:36', 'summary': '', 'execution_type': '1', 'testsuite_id': '147', 'author_first_name': 'Testlink', 'layout': '1', 'author_last_name': 'Administrator', 'is_open': '1'}]
2017-01-15 16:45:20,769 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 16:45:21,644 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:45:21,644 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164520', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:45:21,646 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 16:45:21,647 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 16:45:21,647 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 16:45:21,647 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:45:21,647 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164520', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:45:21,650 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:45:21,650 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:45:21,651 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 16:45:21,655 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 16:45:21,655 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:45:21,655 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 16:45:21,655 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:45:21,656 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:45:21",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115164520 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:45:21,659 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 16:45:21,660 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 16:45:21,660 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:45:21,660 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164520', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:45:21,662 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:45:21,663 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 16:45:21,663 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 16:45:21,663 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 16:45:21,667 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 16:45:21,667 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:45:21,667 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 16:45:21,667 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:45:21,667 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:45:21",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'serial_no': 2, 'device_no': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115164520 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:45:21,669 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 16:45:21,669 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 16:45:21,669 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:45:21,669 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164520', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:45:21,673 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:45:21,673 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 16:45:21,674 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:45:21,674 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:45:21,674 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 16:45:21,674 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 16:45:21,674 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 16:45:21,674 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 16:45:21,674 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 16:45:21,675 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 16:45:21,675 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 16:45:21,675 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 16:45:21,675 httpprotocol.py[line: 76] INFO: 请求头为：{'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'Content-Type': 'application/json;charset=utf-8', 'ProtocolVersion': '4.0', 'DeviceId': '[CaseStep.device_no]'}
2017-01-15 16:45:22,057 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 16:45:22,057 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 16:45:22,057 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:45:19 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:45:22,058 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:45:22,058 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:45:22,058 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:45:22,059 global_function.py[line: 89] ERROR: 运行用例出错 'InterfaceUnittestTestCase' object has no attribute 'replace'
2017-01-15 16:45:22,059 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '执行用例出错 148')
2017-01-15 16:45:22,059 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 16:45:22,059 main.py[line: 115] INFO: 运行指定项目
2017-01-15 16:45:22,176 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 16:45:22,176 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 16:45:22,178 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 16:45:22,178 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 16:45:22,328 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 16:45:22,471 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 16:45:22,471 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 16:45:22,589 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['120', '80', '110', '76', '106', '114', '126', '98', '88', '93', '102'])
2017-01-15 16:45:22,709 testplan.py[line: 45] INFO: 获取测试用例信息 [{'estimated_exec_duration': '', 'testcase_id': '120', 'author_login': 'admin', 'status': '1', 'id': '121', 'node_order': '3', 'importance': '2', 'author_id': '1', 'updater_first_name': 'Testlink', 'steps': [{'execution_type': '1', 'active': '1', 'id': '122', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CMOrder&quot;,<br />\n\t&quot;function&quot;:&quot;test_create_mall_order&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;params&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:2,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;success&quot;:1,&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n'}, {'execution_type': '1', 'active': '1', 'id': '123', 'step_number': '2', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;Pay5&quot;,<br />\n\t&quot;function&quot;:&quot;test_pay5&quot;,<br />\n\t&quot;method&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;button_name&quot;:&quot;确认支付&quot;, &quot;page_title&quot;:&quot;储值卡&quot;}</p>\n'}, {'execution_type': '1', 'active': '1', 'id': '124', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;GetInCoupon&quot;,<br />\n\t&quot;function&quot;:&quot;test_get_in_coupon&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;params&quot;:&quot;&quot;<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;getByWeixin&quot;: 0, &quot;codeType&quot;: 2, &quot;title&quot;: &quot;动态校验&quot;, &quot;subTitle&quot;: &quot;动态校验&quot;, &quot;notice&quot;: &quot;动态校验&quot;, &quot;description&quot;: &quot;动态校验&quot;,&quot;useLimit&quot;:&quot;动态校验&quot;,&nbsp; &quot;dateInfoType&quot;: &quot;动态校验&quot;, &quot;cardType&quot;: 1,&quot;listing&quot;: 1, &quot;fitAll&quot;: 1,&quot;detailTxt&quot;: &quot;动态校验&quot;,&quot;servicePhone&quot;:&quot;动态校验&quot;,&quot;cashLeastCost&quot;: &quot;动态校验&quot;,&quot;cashReduceCost&quot;: &quot;动态校验&quot;,&quot;discount&quot;: 0,&quot;channel&quot;: -1,&quot;branchId&quot;: -1,&quot;success&quot;: 1, &quot;skuQuantity&quot;:&quot;动态校验&quot;,&quot;output_arg1&quot;:&quot;GetInCoupon.card_code&quot;</p>\n<p>\n\t}</p>\n'}, {'execution_type': '1', 'active': '1', 'id': '129', 'step_number': '4', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_with_cash_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:&quot;[GetInCoupon.card_code]&quot;,&quot;yhCardType&quot;:&quot;CASH&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;,&quot;coupon_weixin_verification_record&quot;:1}</p>\n'}], 'name': 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', 'updater_id': '1', 'active': '0', 'updater_last_name': 'Administrator', 'version': '1', 'updater_login': 'admin', 'creation_ts': '2016-07-26 12:12:10', 'full_tc_external_id': 'wecharno-11', 'tc_external_id': '11', 'preconditions': '', 'modification_ts': '2016-07-29 18:31:36', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n<p>\n\tulr中的40758966216286146560取自base_info.serial字段</p>\n', 'execution_type': '1', 'testsuite_id': '109', 'author_first_name': 'Testlink', 'layout': '1', 'author_last_name': 'Administrator', 'is_open': '1'}]
2017-01-15 16:45:22,824 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:45:22,824 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164520', 120, 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:45:22,826 testplan.py[line: 72] INFO: 开始执行测试用例[id=120，name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]
2017-01-15 16:45:22,826 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 16:45:22,826 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 16:45:22,826 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 16:45:22" WHERE executed_history_id = 20170115164520 AND testcase_id = 120 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:45:22,945 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=120]的执行结果
2017-01-15 16:45:23,083 testplan.py[line: 45] INFO: 获取测试用例信息 [{'estimated_exec_duration': '', 'testcase_id': '80', 'author_login': 'admin', 'status': '1', 'id': '81', 'node_order': '1000', 'importance': '2', 'author_id': '1', 'updater_first_name': 'Testlink', 'steps': [{'execution_type': '1', 'active': '1', 'id': '82', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n'}], 'name': 'test-n-点击商品', 'updater_id': '1', 'active': '1', 'updater_last_name': 'Administrator', 'version': '1', 'updater_login': 'admin', 'creation_ts': '2016-07-20 11:05:03', 'full_tc_external_id': 'wecharno-2', 'tc_external_id': '2', 'preconditions': '', 'modification_ts': '2016-11-29 18:16:14', 'summary': '', 'execution_type': '1', 'testsuite_id': '79', 'author_first_name': 'Testlink', 'layout': '1', 'author_last_name': 'Administrator', 'is_open': '1'}]
2017-01-15 16:45:23,218 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:45:23,219 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164520', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:45:23,221 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2017-01-15 16:45:23,221 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2017-01-15 16:45:23,221 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2017-01-15 16:45:23,222 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:45:23,222 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164520', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:45:23,224 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:45:23,225 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:45:23,225 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:45:23,226 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('id', 26838), ('serial', '10549840601068216320')])
2017-01-15 16:45:23,226 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:45:23,227 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 16:45:23,227 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2017-01-15 16:45:23,227 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:45:23,284 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:45:23,284 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/css/malls/detail.css?v=5.0.0-faae2">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/mall/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320",
			mallConfigSerial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script src="/common/js/request.js?v=5.0.0-faae2"></script>
	<script src="/common/js/extend-number.js?v=5.0.0-faae2"></script>
	<script src="/component/iscroll/js/iscroll.js?v=5.0.0-faae2"></script>
	<script src="/component/swiper/js/swiper.min.js?v=5.0.0-faae2"></script>
	<script src="/js/malls/detail.js?v=5.0.0-faae2"></script>
</body>
</html>
2017-01-15 16:45:23,290 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:45:21 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3983'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=D178D7285ACA6900A4B5CD1DAD71F8EF; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 16:45:23,290 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:45:23,290 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2017-01-15 16:45:23,290 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 16:45:23,291 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:45:23,291 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 16:45:23",step_action="{'\u65b9\u6cd5': 'get', 'url': '/goods/item?', '\u53c2\u6570': {'id': 26838, 'serial': '10549840601068216320'}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'消息': '点击商品时无法打开购买页面', '模式': '立即购买'}], '检查': 'body'}" WHERE executed_history_id = 20170115164520 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:45:23,295 testcase.py[line: 164] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2017-01-15 16:45:23,296 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 16:45:23,296 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 16:45:23" WHERE executed_history_id = 20170115164520 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:45:23,459 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2017-01-15 16:45:23,731 testplan.py[line: 45] INFO: 获取测试用例信息 [{'estimated_exec_duration': '', 'testcase_id': '110', 'author_login': 'admin', 'status': '1', 'id': '111', 'node_order': '2', 'importance': '2', 'author_id': '1', 'updater_first_name': 'Testlink', 'steps': [{'execution_type': '1', 'active': '1', 'id': '112', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;style&quot;:&quot;testcase&quot;,<br />\n\t<br />\n\t&quot;testcase_id&quot;:114,<br />\n\t<br />\n\t&quot;testcase_name&quot;:&quot;test-n-提交储值卡支付订单-pay5重定向&quot;<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n'}, {'execution_type': '1', 'active': '1', 'id': '119', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_without_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:-1,&quot;yhCardType&quot;:-1}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;}</p>\n'}], 'name': 'test-n-储值卡支付-不使用优惠，会员账户支付', 'updater_id': '1', 'active': '0', 'updater_last_name': 'Administrator', 'version': '1', 'updater_login': 'admin', 'creation_ts': '2016-07-22 14:48:17', 'full_tc_external_id': 'wecharno-9', 'tc_external_id': '9', 'preconditions': '', 'modification_ts': '2016-07-29 17:13:06', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n', 'execution_type': '1', 'testsuite_id': '109', 'author_first_name': 'Testlink', 'layout': '1', 'author_last_name': 'Administrator', 'is_open': '1'}]
2017-01-15 16:45:23,844 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:45:23,844 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164520', 110, 'test-n-储值卡支付-不使用优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:45:23,845 testplan.py[line: 72] INFO: 开始执行测试用例[id=110，name=test-n-储值卡支付-不使用优惠，会员账户支付]
2017-01-15 16:45:23,845 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-不使用优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 16:45:23,845 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 16:45:23,845 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 16:45:23" WHERE executed_history_id = 20170115164520 AND testcase_id = 110 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:45:23,962 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=110]的执行结果
2017-01-15 16:45:24,103 testplan.py[line: 45] INFO: 获取测试用例信息 [{'estimated_exec_duration': '', 'testcase_id': '76', 'author_login': 'admin', 'status': '1', 'id': '77', 'node_order': '1000', 'importance': '2', 'author_id': '1', 'updater_first_name': 'Testlink', 'steps': [{'execution_type': '2', 'active': '1', 'id': '78', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/plist&quot;,<br />\n\t&quot;参数&quot;:{&quot;page_size&quot;:&quot;10&quot;,&quot;page_no&quot;:&quot;1&quot;,&quot;cateIds&quot;:&quot;&quot;,&quot;orderBy&quot;:&quot;&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;name&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t｛&ldquo;检查&rdquo;:&ldquo;BODY&rdquo;，</p>\n<p>\n\t&ldquo;匹配规则&rdquo;：&ldquo;包含字符串&rdquo;，</p>\n<p>\n\t&ldquo;条件&rdquo;：【｛&ldquo;模式&rdquo;：&ldquo;\\&quot;currentPage\\&quot;:1&rdquo;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝，｛&ldquo;模式&rdquo;：&ldquo;\\&quot;pageStartRow\\&quot;:0&quot;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝】</p>\n<p>\n\t｝</p>\n'}], 'name': 'test-n-显示默认页面', 'updater_id': '1', 'active': '1', 'updater_last_name': 'Administrator', 'version': '1', 'updater_login': 'admin', 'creation_ts': '2016-07-18 15:52:00', 'full_tc_external_id': 'wecharno-1', 'tc_external_id': '1', 'preconditions': '', 'modification_ts': '2016-11-29 18:17:12', 'summary': '', 'execution_type': '2', 'testsuite_id': '75', 'author_first_name': 'Testlink', 'layout': '1', 'author_last_name': 'Administrator', 'is_open': '1'}]
2017-01-15 16:45:24,236 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:45:24,236 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164520', 76, 'test-n-显示默认页面', '微商城-显示商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:45:24,240 testplan.py[line: 72] INFO: 开始执行测试用例[id=76，name=test-n-显示默认页面]
2017-01-15 16:45:24,241 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}
2017-01-15 16:45:24,241 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\"currentPage\":1","消息":"接口返回错误"},{"模式":"\"pageStartRow\":0","消息":"接口返回错误"}]}
2017-01-15 16:45:24,241 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:45:24,241 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164520', 76, 'test-n-显示默认页面', 'plan1_of_wechatno', 'pj_wechatno', 78, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}', '{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\\"currentPage\\":1","消息":"接口返回错误"},{"模式":"\\"pageStartRow\\":0","消息":"接口返回错误"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:45:24,243 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:45:24,243 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:45:24,243 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:45:24,243 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('page_size', '10'), ('page_no', '1'), ('cateIds', ''), ('orderBy', ''), ('serial', '10549840601068216320'), ('name', '')])
2017-01-15 16:45:24,244 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:45:24,244 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 16:45:24,244 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/plist
2017-01-15 16:45:24,244 httpprotocol.py[line: 75] INFO: 参数为：b'page_size=10&page_no=1&cateIds=&orderBy=&serial=10549840601068216320&name='
2017-01-15 16:45:24,244 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:45:27,037 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:45:27,038 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"dataList":[{"id":27105,"name":"微信支付测试-二级","privateSerial":null,"price":0,"oriPrice":0,"description":"微信支付测试-二级","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/30/b9e21dc4-6cf2-4923-9ec7-4259ecea09c1.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":39,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27090,"name":"测试1222-3","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ea123913-89df-4384-929e-158617f67cbe.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":60,"standardLowPrice":980.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27072,"name":"二级规格1129-2","privateSerial":null,"price":0,"oriPrice":0,"description":"二级规格1129-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/29/9ecf031d-e9bd-427e-b147-cb4a1f8fe5d3.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":25,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27087,"name":"1221-1","privateSerial":null,"price":0,"oriPrice":0,"description":"1221-1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/21/1e844fc5-ee37-4393-97af-2a220971ef1f.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":48,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27040,"name":"一级变三级（改bug前）","privateSerial":null,"price":0,"oriPrice":0,"description":"一级规格1109-2一级规格1109-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/09/23b306d5-384d-4b3b-a4f7-a757d9fc0635.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":135,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27088,"name":"测试1222","privateSerial":null,"price":8,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ca612435-f6e1-4f0d-bc18-61e558e8f720.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":2341,"istop":0,"soldCount":4,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":7,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27089,"name":"测试1222-2","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/37bc7e08-1a2f-4c88-9542-ec5613686d7e.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":26,"standardLowPrice":2100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26955,"name":"乐视超级电视","privateSerial":null,"price":0,"oriPrice":0,"description":"乐视超级电视","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/10/31/3d3ca77e-d010-42f3-804f-bc8a563ec753.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":88,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26971,"name":"多级规格测试010","privateSerial":null,"price":0,"oriPrice":0,"description":"多级规格测试010","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/01/fface01c-5d06-400e-bf7b-2ae2fd64c858.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":15,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27057,"name":"裙子","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/13dbced7-faae-4e13-aebe-6f69d72dc7e0.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":101,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false}],"pageInfo":{"pageSize":10,"currentPage":1,"totalPages":5,"totalRows":47,"pageStartRow":0,"pageEndRow":10,"pagination":true,"hasNextPage":true,"hasPreviousPage":false,"params":null,"needCount":true}}
2017-01-15 16:45:27,041 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:45:24 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:45:27,041 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:45:27,041 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2017-01-15 16:45:27,041 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2017-01-15 16:45:27,041 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 16:45:27,041 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:45:27,041 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2017-01-15 16:45:24",step_action="{'\u65b9\u6cd5': 'post', 'url': '/goods/plist', '\u53c2\u6570': {'page_size': '10', 'page_no': '1', 'cateIds': '', 'orderBy': '', 'serial': '10549840601068216320', 'name': ''}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'消息': '接口返回错误', '模式': ''currentPage':1'}, {'消息': '接口返回错误', '模式': ''pageStartRow':0'}], '检查': 'BODY'}" WHERE executed_history_id = 20170115164520 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:45:27,043 testcase.py[line: 164] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2017-01-15 16:45:27,043 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 16:45:27,043 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 16:45:24" WHERE executed_history_id = 20170115164520 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:45:27,166 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2017-01-15 16:45:27,572 testplan.py[line: 45] INFO: 获取测试用例信息 [{'estimated_exec_duration': '', 'testcase_id': '106', 'author_login': 'admin', 'status': '1', 'id': '107', 'node_order': '1000', 'importance': '2', 'author_id': '1', 'updater_first_name': 'Testlink', 'steps': [{'execution_type': '1', 'active': '1', 'id': '108', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n'}], 'name': 'test-n-创建储值卡支付订单', 'updater_id': '1', 'active': '1', 'updater_last_name': 'Administrator', 'version': '1', 'updater_login': 'admin', 'creation_ts': '2016-07-21 11:26:32', 'full_tc_external_id': 'wecharno-8', 'tc_external_id': '8', 'preconditions': '', 'modification_ts': '2016-11-29 17:33:09', 'summary': '', 'execution_type': '1', 'testsuite_id': '105', 'author_first_name': 'Testlink', 'layout': '1', 'author_last_name': 'Administrator', 'is_open': '1'}]
2017-01-15 16:45:27,743 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:45:27,744 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164520', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:45:27,745 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 16:45:27,745 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 16:45:27,745 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 16:45:27,745 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:45:27,745 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115164520', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:45:27,746 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:45:27,747 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:45:27,747 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:45:27,747 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:45:27,747 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 16:45:27,747 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:45:27,747 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:45:27,747 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 16:45:27,748 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 16:45:27,748 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 16:45:27,748 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 16:45:27,794 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:45:27,794 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 16:45:27,794 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:45:25 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:45:27,795 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:45:27,795 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 16:52:29,837 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 16:52:29,837 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 16:52:29,851 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 16:52:29,854 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 16:52:29,905 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 16:52:29,905 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 16:52:29,906 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 16:52:29,907 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 16:52:29,908 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 16:52:29,911 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 16:52:29,911 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 16:52:30,139 global_function.py[line: 19] INFO: 获取测试用例信息 [{'creation_ts': '2016-07-27 18:32:10', 'testcase_id': '148', 'updater_id': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'author_first_name': 'Testlink', 'steps': [{'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'active': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '183'}, {'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'active': '1', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '182'}, {'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'active': '1', 'step_number': '3', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'id': '150'}], 'id': '149', 'version': '1', 'importance': '2', 'full_tc_external_id': 'pj_pos-1', 'layout': '1', 'author_id': '1', 'name': 'test-n-登陆掌贝pos机', 'updater_login': 'admin', 'status': '1', 'node_order': '1000', 'updater_first_name': 'Testlink', 'is_open': '1', 'author_login': 'admin', 'estimated_exec_duration': '', 'modification_ts': '2016-11-30 15:41:36', 'updater_last_name': 'Administrator', 'author_last_name': 'Administrator', 'tc_external_id': '1', 'active': '1', 'summary': '', 'testsuite_id': '147', 'execution_type': '1'}]
2017-01-15 16:52:30,310 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 16:52:31,075 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:52:31,075 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:52:31,076 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 16:52:31,076 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 16:52:31,076 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 16:52:31,077 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:52:31,077 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:52:31,078 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:52:31,078 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:52:31,078 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 16:52:31,082 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 16:52:31,082 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:52:31,083 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 16:52:31,083 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 16:52:31,083 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:52:31",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115165229 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:52:31,085 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 16:52:31,085 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 16:52:31,085 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:52:31,085 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:52:31,087 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:52:31,087 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 16:52:31,087 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 16:52:31,087 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 16:52:31,091 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 16:52:31,092 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:52:31,092 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 16:52:31,092 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 16:52:31,092 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:52:31",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'serial_no': 2, 'device_no': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115165229 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:52:31,094 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 16:52:31,095 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 16:52:31,095 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:52:31,095 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:52:31,097 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:52:31,098 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 16:52:31,098 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:52:31,098 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:52:31,099 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 16:52:31,099 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 16:52:31,100 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 16:52:31,100 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 16:52:31,100 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 16:52:31,101 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 16:52:31,101 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 16:52:31,101 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 16:52:31,101 httpprotocol.py[line: 76] INFO: 请求头为：{'DeviceId': '[CaseStep.device_no]', 'SerialNo': '[CaseStep.serial_no]', 'ProtocolVersion': '4.0', 'Content-Type': 'application/json;charset=utf-8', 'ProductVersion': '[global_product_version]'}
2017-01-15 16:52:31,502 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 16:52:31,503 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 16:52:31,503 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:52:29 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:52:31,503 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:52:31,503 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:52:31,503 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:52:31,504 testcase.py[line: 131] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 16:52:31,504 testcase.py[line: 138] INFO: 正在更新步骤执行结果
2017-01-15 16:52:31,504 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 16:52:31",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'ProtocolVersion': '4.0', 'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'输出': {'Token': {'token': 'value'}, 'OperatorId': {'operator': {'id': 'value'}}}, '条件': [{'模式': {'success': True}, '消息': '登录失败,success不为true'}, {'模式': {'message': '成功'}, '消息': 'message不为成功'}, {'模式': {'code': '4001'}, '消息': 'code不为4001'}], '检查': 'body', '匹配规则': '键值相等'}" WHERE executed_history_id = 20170115165229 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:52:31,506 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 16:52:31,506 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 16:52:31" WHERE executed_history_id = 20170115165229 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:52:31,507 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 16:52:31,508 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '')
2017-01-15 16:52:31,508 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 16:52:31,508 main.py[line: 115] INFO: 运行指定项目
2017-01-15 16:52:31,643 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 16:52:31,643 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 16:52:31,644 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 16:52:31,645 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 16:52:31,776 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 16:52:31,919 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 16:52:31,919 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 16:52:32,060 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['88', '93', '102', '76', '98', '106', '110', '80', '120', '114', '126'])
2017-01-15 16:52:32,229 testplan.py[line: 45] INFO: 获取测试用例信息 [{'creation_ts': '2016-07-20 12:07:40', 'testcase_id': '88', 'updater_id': '1', 'preconditions': '', 'author_first_name': 'Testlink', 'steps': [{'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'active': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '175'}, {'execution_type': '1', 'expected_results': '', 'active': '1', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '174'}, {'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'id': '90'}, {'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'active': '1', 'step_number': '4', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'id': '176'}, {'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'step_number': '5', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '177'}], 'id': '89', 'version': '1', 'importance': '2', 'full_tc_external_id': 'wecharno-4', 'layout': '1', 'author_id': '1', 'name': 'test-n-把商品加入购物车', 'updater_login': 'admin', 'status': '1', 'node_order': '1000', 'updater_first_name': 'Testlink', 'is_open': '1', 'author_login': 'admin', 'estimated_exec_duration': '', 'modification_ts': '2016-11-29 17:58:09', 'updater_last_name': 'Administrator', 'author_last_name': 'Administrator', 'tc_external_id': '4', 'active': '1', 'summary': '', 'testsuite_id': '87', 'execution_type': '1'}]
2017-01-15 16:52:32,378 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:52:32,378 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:52:32,379 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 16:52:32,379 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 16:52:32,380 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 16:52:32,380 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:52:32,380 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:52:32,381 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:52:32,382 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:52:32,382 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 16:52:32,382 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 16:52:32,385 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2017-01-15 16:52:32,385 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:52:32,385 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}]
2017-01-15 16:52:32,385 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 16:52:32,385 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:52:32",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115165229 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:52:32,387 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2017-01-15 16:52:32,387 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:52:32,387 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:52:32,388 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:52:32,388 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:52:32,389 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2017-01-15 16:52:32,389 casestep.py[line: 149] INFO: 转换后的参数体为：(167020,)
2017-01-15 16:52:32,389 mydb.py[line: 72] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2017-01-15 16:52:33,256 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 16:52:33,256 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:52:32",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '\u53c2\u6570': [167020]}", expected_results="" WHERE executed_history_id = 20170115165229 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:52:33,261 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2017-01-15 16:52:33,261 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2017-01-15 16:52:33,261 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:52:33,261 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:52:33,266 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:52:33,266 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:52:33,267 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:52:33,267 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:52:33,267 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', 26838), ('standardId', 'undefined'), ('amount', 1), ('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 16:52:33,268 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:52:33,268 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 16:52:33,269 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2017-01-15 16:52:33,269 httpprotocol.py[line: 75] INFO: 参数为：b'mallGoodsId=26838&standardId=undefined&amount=1&serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2017-01-15 16:52:33,269 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:52:33,766 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:52:33,766 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"加入购物车失败","attach":null}
2017-01-15 16:52:33,766 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:52:31 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:52:33,766 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:52:33,766 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:52:33,766 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:52:33,767 testcase.py[line: 131] INFO: 步骤[3]执行失败,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 16:52:33,767 testcase.py[line: 138] INFO: 正在更新步骤执行结果
2017-01-15 16:52:33,767 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 把商品加如购物车失败,success不为true", protocol_method="post", runtime="2017-01-15 16:52:33",step_action="{'\u65b9\u6cd5': 'post', 'url': '/addtocart', '\u53c2\u6570': {'mallGoodsId': 26838, 'standardId': 'undefined', 'amount': 1, 'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'条件': [{'模式': {'success': True}, '消息': '把商品加如购物车失败,success不为true'}], '检查': 'body', '匹配规则': '键值相等'}" WHERE executed_history_id = 20170115165229 AND testcase_id = 88 AND step_id = 90 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:52:33,769 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 16:52:33,769 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 16:52:32" WHERE executed_history_id = 20170115165229 AND testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:52:33,902 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=88]的执行结果
2017-01-15 16:52:34,190 testplan.py[line: 45] INFO: 获取测试用例信息 [{'creation_ts': '2016-07-20 12:25:46', 'testcase_id': '93', 'updater_id': '1', 'preconditions': '', 'author_first_name': 'Testlink', 'steps': [{'execution_type': '1', 'expected_results': '', 'active': '1', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,</p>\n<p>\n\t&quot;用例id&quot;:88,</p>\n<p>\n\t&quot;用例名称&quot;:&quot;test-n-把商品加入购物车&quot;<br />\n\t}</p>\n<p>\n\t&nbsp;</p>\n', 'id': '95'}, {'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品移出购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'step_number': '2', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cart/delfromcart?&quot;,<br />\n\t&quot;参数&quot;:{&quot;strIds&quot;:&quot;[CaseStep.strIds]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '96'}, {'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;[]&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '178'}], 'id': '94', 'version': '1', 'importance': '2', 'full_tc_external_id': 'wecharno-5', 'layout': '1', 'author_id': '1', 'name': 'test-n-把商品移出购物车', 'updater_login': 'admin', 'status': '1', 'node_order': '1000', 'updater_first_name': 'Testlink', 'is_open': '1', 'author_login': 'admin', 'estimated_exec_duration': '', 'modification_ts': '2016-11-29 18:05:21', 'updater_last_name': 'Administrator', 'author_last_name': 'Administrator', 'tc_external_id': '5', 'active': '1', 'summary': '', 'testsuite_id': '91', 'execution_type': '1'}]
2017-01-15 16:52:34,375 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:52:34,375 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 93, 'test-n-把商品移出购物车', '微商城-把商品移出购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:52:34,378 testplan.py[line: 72] INFO: 开始执行测试用例[id=93，name=test-n-把商品移出购物车]
2017-01-15 16:52:34,378 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} 
2017-01-15 16:52:34,378 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:52:34,379 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:52:34,379 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 95, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} ', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:52:34,381 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:52:34,529 global_function.py[line: 19] INFO: 获取测试用例信息 [{'creation_ts': '2016-07-20 12:07:40', 'testcase_id': '88', 'updater_id': '1', 'preconditions': '', 'author_first_name': 'Testlink', 'steps': [{'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'active': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '175'}, {'execution_type': '1', 'expected_results': '', 'active': '1', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '174'}, {'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'id': '90'}, {'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'active': '1', 'step_number': '4', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'id': '176'}, {'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'step_number': '5', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '177'}], 'id': '89', 'version': '1', 'importance': '2', 'full_tc_external_id': 'wecharno-4', 'layout': '1', 'author_id': '1', 'name': 'test-n-把商品加入购物车', 'updater_login': 'admin', 'status': '1', 'node_order': '1000', 'updater_first_name': 'Testlink', 'is_open': '1', 'author_login': 'admin', 'estimated_exec_duration': '', 'modification_ts': '2016-11-29 17:58:09', 'updater_last_name': 'Administrator', 'author_last_name': 'Administrator', 'tc_external_id': '4', 'active': '1', 'summary': '', 'testsuite_id': '87', 'execution_type': '1'}]
2017-01-15 16:52:34,645 global_function.py[line: 39] INFO: 正在读取套件[id=87]的协议，host，端口配置...
2017-01-15 16:52:34,902 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:52:34,902 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 88, 'test-n-把商品加入购物车', '把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:52:34,903 global_function.py[line: 71] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 16:52:34,904 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 16:52:34,904 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 16:52:34,904 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:52:34,904 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:52:34,905 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:52:34,905 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:52:34,905 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 16:52:34,905 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 16:52:34,908 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2017-01-15 16:52:34,908 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:52:34,908 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}]
2017-01-15 16:52:34,908 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 16:52:34,908 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:52:34",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115165229 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:52:34,910 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2017-01-15 16:52:34,910 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:52:34,910 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:52:34,910 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:52:34,911 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:52:34,911 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2017-01-15 16:52:34,911 casestep.py[line: 149] INFO: 转换后的参数体为：(167020,)
2017-01-15 16:52:34,911 mydb.py[line: 72] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2017-01-15 16:52:35,333 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 16:52:35,333 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:52:34",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '\u53c2\u6570': [167020]}", expected_results="" WHERE executed_history_id = 20170115165229 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:52:35,335 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2017-01-15 16:52:35,335 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2017-01-15 16:52:35,335 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:52:35,335 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165229', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', '80', '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:52:35,336 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:52:35,336 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:52:35,337 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:52:35,337 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:52:35,337 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', 26838), ('standardId', 'undefined'), ('amount', 1), ('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 16:52:35,337 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:52:35,337 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 16:52:35,337 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2017-01-15 16:52:35,337 httpprotocol.py[line: 75] INFO: 参数为：b'mallGoodsId=26838&standardId=undefined&amount=1&serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2017-01-15 16:52:35,337 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:52:35,864 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:52:35,864 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"加入购物车失败","attach":null}
2017-01-15 16:52:35,865 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:52:33 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:52:35,865 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:52:35,865 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:52:35,866 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:52:35,867 testcase.py[line: 131] INFO: 步骤[3]执行失败,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 16:52:35,867 testcase.py[line: 138] INFO: 正在更新步骤执行结果
2017-01-15 16:52:35,868 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 把商品加如购物车失败,success不为true", protocol_method="post", runtime="2017-01-15 16:52:35",step_action="{'\u65b9\u6cd5': 'post', 'url': '/addtocart', '\u53c2\u6570': {'mallGoodsId': 26838, 'standardId': 'undefined', 'amount': 1, 'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'条件': [{'模式': {'success': True}, '消息': '把商品加如购物车失败,success不为true'}], '检查': 'body', '匹配规则': '键值相等'}" WHERE executed_history_id = 20170115165229 AND testcase_id = 88 AND step_id = 90 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:52:35,873 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 16:52:35,874 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 16:52:34" WHERE executed_history_id = 20170115165229 and testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:52:35,878 global_function.py[line: 82] INFO: 指定用例[88]已执行完
2017-01-15 16:53:02,926 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 16:53:02,926 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 16:53:02,947 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 16:53:02,951 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 16:53:03,047 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 16:53:03,048 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 16:53:03,051 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 16:53:03,051 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 16:53:03,054 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 16:53:03,057 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 16:53:03,057 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 16:53:03,253 global_function.py[line: 19] INFO: 获取测试用例信息 [{'steps': [{'id': '183', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'active': '1', 'execution_type': '1'}, {'id': '182', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'active': '1', 'execution_type': '1'}, {'id': '150', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'active': '1', 'execution_type': '1'}], 'updater_last_name': 'Administrator', 'author_login': 'admin', 'importance': '2', 'preconditions': '<p>\n\t初始化用例</p>\n', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-30 15:41:36', 'active': '1', 'updater_login': 'admin', 'id': '149', 'name': 'test-n-登陆掌贝pos机', 'updater_id': '1', 'updater_first_name': 'Testlink', 'status': '1', 'version': '1', 'tc_external_id': '1', 'creation_ts': '2016-07-27 18:32:10', 'author_first_name': 'Testlink', 'layout': '1', 'testcase_id': '148', 'node_order': '1000', 'summary': '', 'author_id': '1', 'testsuite_id': '147', 'full_tc_external_id': 'pj_pos-1', 'estimated_exec_duration': '', 'is_open': '1', 'execution_type': '1'}]
2017-01-15 16:53:03,375 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 16:53:04,278 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:53:04,278 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165302', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:53:04,279 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 16:53:04,279 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 16:53:04,280 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 16:53:04,280 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:04,280 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165302', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:04,281 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:53:04,281 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:53:04,281 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 16:53:04,285 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 16:53:04,285 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:53:04,285 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 16:53:04,285 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 16:53:04,285 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:53:04",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115165302 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:53:04,286 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 16:53:04,286 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 16:53:04,286 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:04,286 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165302', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:04,287 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:53:04,288 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 16:53:04,288 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 16:53:04,288 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 16:53:04,291 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 16:53:04,291 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:53:04,292 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 16:53:04,292 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 16:53:04,292 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:53:04",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'device_no': 1, 'serial_no': 2}, '检查': 'body'}" WHERE executed_history_id = 20170115165302 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:53:04,294 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 16:53:04,294 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 16:53:04,294 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:04,294 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165302', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:04,296 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:53:04,296 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 16:53:04,297 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:53:04,297 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:53:04,297 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 16:53:04,297 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 16:53:04,297 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 16:53:04,297 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 16:53:04,297 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 16:53:04,298 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 16:53:04,298 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 16:53:04,298 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 16:53:04,298 httpprotocol.py[line: 76] INFO: 请求头为：{'SerialNo': '[CaseStep.serial_no]', 'ProtocolVersion': '4.0', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'ProductVersion': '[global_product_version]'}
2017-01-15 16:53:04,708 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 16:53:04,709 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 16:53:04,709 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:53:02 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:53:04,709 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:53:04,709 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:53:04,709 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:53:04,710 global_function.py[line: 89] ERROR: 运行用例出错 'InterfaceUnittestTestCase' object has no attribute 'replace'
2017-01-15 16:53:04,710 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '执行用例出错 148')
2017-01-15 16:53:04,710 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 16:53:04,710 main.py[line: 115] INFO: 运行指定项目
2017-01-15 16:53:04,864 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 16:53:04,864 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 16:53:04,866 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 16:53:04,867 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 16:53:05,017 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 16:53:05,138 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 16:53:05,139 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 16:53:05,274 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['88', '126', '120', '93', '114', '106', '110', '80', '102', '98', '76'])
2017-01-15 16:53:05,415 testplan.py[line: 45] INFO: 获取测试用例信息 [{'steps': [{'id': '175', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'active': '1', 'execution_type': '1'}, {'id': '174', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'expected_results': '', 'active': '1', 'execution_type': '1'}, {'id': '90', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'execution_type': '1'}, {'id': '176', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '4', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'active': '1', 'execution_type': '1'}, {'id': '177', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '5', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'execution_type': '1'}], 'updater_last_name': 'Administrator', 'author_login': 'admin', 'importance': '2', 'preconditions': '', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:58:09', 'active': '1', 'updater_login': 'admin', 'id': '89', 'name': 'test-n-把商品加入购物车', 'updater_id': '1', 'updater_first_name': 'Testlink', 'status': '1', 'version': '1', 'tc_external_id': '4', 'creation_ts': '2016-07-20 12:07:40', 'author_first_name': 'Testlink', 'layout': '1', 'testcase_id': '88', 'node_order': '1000', 'summary': '', 'author_id': '1', 'testsuite_id': '87', 'full_tc_external_id': 'wecharno-4', 'estimated_exec_duration': '', 'is_open': '1', 'execution_type': '1'}]
2017-01-15 16:53:05,548 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:53:05,548 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165302', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:53:05,549 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 16:53:05,550 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 16:53:05,550 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 16:53:05,550 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:05,550 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165302', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:05,551 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:53:05,551 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:53:05,551 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 16:53:05,551 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 16:53:05,554 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2017-01-15 16:53:05,554 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:53:05,554 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}]
2017-01-15 16:53:05,554 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 16:53:05,555 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:53:05",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115165302 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:53:05,557 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2017-01-15 16:53:05,557 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:53:05,557 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:05,557 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165302', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:05,559 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:53:05,559 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2017-01-15 16:53:05,559 casestep.py[line: 149] INFO: 转换后的参数体为：(167020,)
2017-01-15 16:53:05,559 mydb.py[line: 72] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2017-01-15 16:53:06,057 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 16:53:06,058 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:53:05",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '\u53c2\u6570': [167020]}", expected_results="" WHERE executed_history_id = 20170115165302 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:53:06,059 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2017-01-15 16:53:06,059 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2017-01-15 16:53:06,059 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:06,059 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165302', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:06,061 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:53:06,061 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:53:06,061 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:53:06,061 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:53:06,061 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', 26838), ('standardId', 'undefined'), ('amount', 1), ('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 16:53:06,061 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:53:06,062 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 16:53:06,062 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2017-01-15 16:53:06,062 httpprotocol.py[line: 75] INFO: 参数为：b'mallGoodsId=26838&standardId=undefined&amount=1&serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2017-01-15 16:53:06,062 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:53:07,597 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:53:07,597 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"加入购物车失败","attach":null}
2017-01-15 16:53:07,597 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:53:05 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:53:07,597 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:53:07,598 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:53:07,598 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:53:42,149 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 16:53:42,149 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 16:53:42,166 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 16:53:42,168 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 16:53:42,235 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 16:53:42,235 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 16:53:42,237 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 16:53:42,237 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 16:53:42,238 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 16:53:42,240 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 16:53:42,241 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 16:53:42,426 global_function.py[line: 19] INFO: 获取测试用例信息 [{'layout': '1', 'version': '1', 'execution_type': '1', 'full_tc_external_id': 'pj_pos-1', 'name': 'test-n-登陆掌贝pos机', 'summary': '', 'steps': [{'active': '1', 'execution_type': '1', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'id': '183', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'id': '182', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'id': '150', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n'}], 'updater_login': 'admin', 'is_open': '1', 'author_last_name': 'Administrator', 'author_login': 'admin', 'active': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-30 15:41:36', 'status': '1', 'creation_ts': '2016-07-27 18:32:10', 'id': '149', 'author_first_name': 'Testlink', 'importance': '2', 'author_id': '1', 'testcase_id': '148', 'updater_last_name': 'Administrator', 'updater_id': '1', 'testsuite_id': '147', 'node_order': '1000', 'estimated_exec_duration': '', 'tc_external_id': '1'}]
2017-01-15 16:53:42,549 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 16:53:43,323 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:53:43,323 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:53:43,325 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 16:53:43,326 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 16:53:43,326 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 16:53:43,326 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:43,326 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:43,329 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:53:43,330 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:53:43,330 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 16:53:43,333 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 16:53:43,333 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:53:43,333 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 16:53:43,333 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:53:43,333 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:53:43",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115165342 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:53:43,335 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 16:53:43,335 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 16:53:43,335 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:43,335 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:43,337 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:53:43,337 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 16:53:43,337 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 16:53:43,337 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 16:53:43,341 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 16:53:43,341 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:53:43,341 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 16:53:43,341 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:53:43,341 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:53:43",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'device_no': 1, 'serial_no': 2}, '检查': 'body'}" WHERE executed_history_id = 20170115165342 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:53:43,343 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 16:53:43,344 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 16:53:43,344 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:43,344 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:43,345 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:53:43,345 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 16:53:43,345 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:53:43,346 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:53:43,346 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 16:53:43,346 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 16:53:43,346 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 16:53:43,346 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 16:53:43,346 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 16:53:43,347 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 16:53:43,347 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 16:53:43,347 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 16:53:43,347 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'ProductVersion': '[global_product_version]', 'SerialNo': '[CaseStep.serial_no]', 'ProtocolVersion': '4.0'}
2017-01-15 16:53:43,732 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 16:53:43,732 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 16:53:43,732 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:53:41 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:53:43,732 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:53:43,733 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:53:43,733 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:53:43,734 global_function.py[line: 89] ERROR: 运行用例出错 'InterfaceUnittestTestCase' object has no attribute 'replace'
2017-01-15 16:53:43,734 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '执行用例出错 148')
2017-01-15 16:53:43,734 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 16:53:43,734 main.py[line: 115] INFO: 运行指定项目
2017-01-15 16:53:43,867 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 16:53:43,867 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 16:53:43,868 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 16:53:43,868 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 16:53:44,023 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 16:53:44,234 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 16:53:44,234 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 16:53:44,458 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['120', '76', '126', '88', '98', '102', '110', '93', '106', '114', '80'])
2017-01-15 16:53:44,629 testplan.py[line: 45] INFO: 获取测试用例信息 [{'layout': '1', 'version': '1', 'execution_type': '1', 'full_tc_external_id': 'wecharno-11', 'name': 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n<p>\n\tulr中的40758966216286146560取自base_info.serial字段</p>\n', 'steps': [{'active': '1', 'execution_type': '1', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;success&quot;:1,&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'id': '122', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CMOrder&quot;,<br />\n\t&quot;function&quot;:&quot;test_create_mall_order&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;params&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:2,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;button_name&quot;:&quot;确认支付&quot;, &quot;page_title&quot;:&quot;储值卡&quot;}</p>\n', 'id': '123', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;Pay5&quot;,<br />\n\t&quot;function&quot;:&quot;test_pay5&quot;,<br />\n\t&quot;method&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'step_number': '3', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;getByWeixin&quot;: 0, &quot;codeType&quot;: 2, &quot;title&quot;: &quot;动态校验&quot;, &quot;subTitle&quot;: &quot;动态校验&quot;, &quot;notice&quot;: &quot;动态校验&quot;, &quot;description&quot;: &quot;动态校验&quot;,&quot;useLimit&quot;:&quot;动态校验&quot;,&nbsp; &quot;dateInfoType&quot;: &quot;动态校验&quot;, &quot;cardType&quot;: 1,&quot;listing&quot;: 1, &quot;fitAll&quot;: 1,&quot;detailTxt&quot;: &quot;动态校验&quot;,&quot;servicePhone&quot;:&quot;动态校验&quot;,&quot;cashLeastCost&quot;: &quot;动态校验&quot;,&quot;cashReduceCost&quot;: &quot;动态校验&quot;,&quot;discount&quot;: 0,&quot;channel&quot;: -1,&quot;branchId&quot;: -1,&quot;success&quot;: 1, &quot;skuQuantity&quot;:&quot;动态校验&quot;,&quot;output_arg1&quot;:&quot;GetInCoupon.card_code&quot;</p>\n<p>\n\t}</p>\n', 'id': '124', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;GetInCoupon&quot;,<br />\n\t&quot;function&quot;:&quot;test_get_in_coupon&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;params&quot;:&quot;&quot;<br />\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'step_number': '4', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;,&quot;coupon_weixin_verification_record&quot;:1}</p>\n', 'id': '129', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_with_cash_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:&quot;[GetInCoupon.card_code]&quot;,&quot;yhCardType&quot;:&quot;CASH&quot;}<br />\n\t}</p>\n'}], 'updater_login': 'admin', 'is_open': '1', 'author_last_name': 'Administrator', 'author_login': 'admin', 'active': '0', 'preconditions': '', 'updater_first_name': 'Testlink', 'modification_ts': '2016-07-29 18:31:36', 'status': '1', 'creation_ts': '2016-07-26 12:12:10', 'id': '121', 'author_first_name': 'Testlink', 'importance': '2', 'author_id': '1', 'testcase_id': '120', 'updater_last_name': 'Administrator', 'updater_id': '1', 'testsuite_id': '109', 'node_order': '3', 'estimated_exec_duration': '', 'tc_external_id': '11'}]
2017-01-15 16:53:44,756 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:53:44,756 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 120, 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:53:44,757 testplan.py[line: 72] INFO: 开始执行测试用例[id=120，name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]
2017-01-15 16:53:44,757 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 16:53:44,758 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 16:53:44,758 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 16:53:44" WHERE executed_history_id = 20170115165342 AND testcase_id = 120 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:53:44,877 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=120]的执行结果
2017-01-15 16:53:45,010 testplan.py[line: 45] INFO: 获取测试用例信息 [{'layout': '1', 'version': '1', 'execution_type': '2', 'full_tc_external_id': 'wecharno-1', 'name': 'test-n-显示默认页面', 'summary': '', 'steps': [{'active': '1', 'execution_type': '2', 'step_number': '1', 'expected_results': '<p>\n\t｛&ldquo;检查&rdquo;:&ldquo;BODY&rdquo;，</p>\n<p>\n\t&ldquo;匹配规则&rdquo;：&ldquo;包含字符串&rdquo;，</p>\n<p>\n\t&ldquo;条件&rdquo;：【｛&ldquo;模式&rdquo;：&ldquo;\\&quot;currentPage\\&quot;:1&rdquo;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝，｛&ldquo;模式&rdquo;：&ldquo;\\&quot;pageStartRow\\&quot;:0&quot;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝】</p>\n<p>\n\t｝</p>\n', 'id': '78', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/plist&quot;,<br />\n\t&quot;参数&quot;:{&quot;page_size&quot;:&quot;10&quot;,&quot;page_no&quot;:&quot;1&quot;,&quot;cateIds&quot;:&quot;&quot;,&quot;orderBy&quot;:&quot;&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;name&quot;:&quot;&quot;}<br />\n\t}</p>\n'}], 'updater_login': 'admin', 'is_open': '1', 'author_last_name': 'Administrator', 'author_login': 'admin', 'active': '1', 'preconditions': '', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 18:17:12', 'status': '1', 'creation_ts': '2016-07-18 15:52:00', 'id': '77', 'author_first_name': 'Testlink', 'importance': '2', 'author_id': '1', 'testcase_id': '76', 'updater_last_name': 'Administrator', 'updater_id': '1', 'testsuite_id': '75', 'node_order': '1000', 'estimated_exec_duration': '', 'tc_external_id': '1'}]
2017-01-15 16:53:45,140 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:53:45,141 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 76, 'test-n-显示默认页面', '微商城-显示商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:53:45,142 testplan.py[line: 72] INFO: 开始执行测试用例[id=76，name=test-n-显示默认页面]
2017-01-15 16:53:45,142 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}
2017-01-15 16:53:45,142 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\"currentPage\":1","消息":"接口返回错误"},{"模式":"\"pageStartRow\":0","消息":"接口返回错误"}]}
2017-01-15 16:53:45,142 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:45,143 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 76, 'test-n-显示默认页面', 'plan1_of_wechatno', 'pj_wechatno', 78, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}', '{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\\"currentPage\\":1","消息":"接口返回错误"},{"模式":"\\"pageStartRow\\":0","消息":"接口返回错误"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:45,144 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:53:45,144 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:53:45,145 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:53:45,145 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('page_size', '10'), ('page_no', '1'), ('cateIds', ''), ('orderBy', ''), ('serial', '10549840601068216320'), ('name', '')])
2017-01-15 16:53:45,145 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:53:45,145 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 16:53:45,146 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/plist
2017-01-15 16:53:45,146 httpprotocol.py[line: 75] INFO: 参数为：b'page_size=10&page_no=1&cateIds=&orderBy=&serial=10549840601068216320&name='
2017-01-15 16:53:45,146 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:53:45,495 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:53:45,495 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"dataList":[{"id":27105,"name":"微信支付测试-二级","privateSerial":null,"price":0,"oriPrice":0,"description":"微信支付测试-二级","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/30/b9e21dc4-6cf2-4923-9ec7-4259ecea09c1.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":39,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27090,"name":"测试1222-3","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ea123913-89df-4384-929e-158617f67cbe.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":60,"standardLowPrice":980.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27072,"name":"二级规格1129-2","privateSerial":null,"price":0,"oriPrice":0,"description":"二级规格1129-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/29/9ecf031d-e9bd-427e-b147-cb4a1f8fe5d3.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":25,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27087,"name":"1221-1","privateSerial":null,"price":0,"oriPrice":0,"description":"1221-1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/21/1e844fc5-ee37-4393-97af-2a220971ef1f.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":48,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27040,"name":"一级变三级（改bug前）","privateSerial":null,"price":0,"oriPrice":0,"description":"一级规格1109-2一级规格1109-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/09/23b306d5-384d-4b3b-a4f7-a757d9fc0635.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":135,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27088,"name":"测试1222","privateSerial":null,"price":8,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ca612435-f6e1-4f0d-bc18-61e558e8f720.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":2341,"istop":0,"soldCount":4,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":7,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27089,"name":"测试1222-2","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/37bc7e08-1a2f-4c88-9542-ec5613686d7e.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":26,"standardLowPrice":2100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26955,"name":"乐视超级电视","privateSerial":null,"price":0,"oriPrice":0,"description":"乐视超级电视","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/10/31/3d3ca77e-d010-42f3-804f-bc8a563ec753.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":88,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26971,"name":"多级规格测试010","privateSerial":null,"price":0,"oriPrice":0,"description":"多级规格测试010","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/01/fface01c-5d06-400e-bf7b-2ae2fd64c858.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":15,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27057,"name":"裙子","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/13dbced7-faae-4e13-aebe-6f69d72dc7e0.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":101,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false}],"pageInfo":{"pageSize":10,"currentPage":1,"totalPages":5,"totalRows":47,"pageStartRow":0,"pageEndRow":10,"pagination":true,"hasNextPage":true,"hasPreviousPage":false,"params":null,"needCount":true}}
2017-01-15 16:53:45,499 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:53:43 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:53:45,499 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:53:45,500 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2017-01-15 16:53:45,500 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2017-01-15 16:53:45,500 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 16:53:45,500 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:53:45,500 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2017-01-15 16:53:45",step_action="{'\u65b9\u6cd5': 'post', 'url': '/goods/plist', '\u53c2\u6570': {'page_size': '10', 'page_no': '1', 'cateIds': '', 'orderBy': '', 'serial': '10549840601068216320', 'name': ''}}", expected_results="{'条件': [{'消息': '接口返回错误', '模式': ''currentPage':1'}, {'消息': '接口返回错误', '模式': ''pageStartRow':0'}], '检查': 'BODY', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115165342 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:53:45,502 testcase.py[line: 164] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2017-01-15 16:53:45,503 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 16:53:45,503 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 16:53:45" WHERE executed_history_id = 20170115165342 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:53:45,616 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2017-01-15 16:53:45,920 testplan.py[line: 45] INFO: 获取测试用例信息 [{'layout': '1', 'version': '1', 'execution_type': '1', 'full_tc_external_id': 'wecharno-12', 'name': 'test-n-免费领取优惠券', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'steps': [{'active': '1', 'execution_type': '1', 'step_number': '1', 'expected_results': '', 'id': '181', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'step_number': '2', 'expected_results': '', 'id': '180', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'step_number': '3', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n', 'id': '128', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n'}], 'updater_login': 'admin', 'is_open': '1', 'author_last_name': 'Administrator', 'author_login': 'admin', 'active': '1', 'preconditions': '', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 19:43:22', 'status': '1', 'creation_ts': '2016-07-26 15:06:38', 'id': '127', 'author_first_name': 'Testlink', 'importance': '2', 'author_id': '1', 'testcase_id': '126', 'updater_last_name': 'Administrator', 'updater_id': '1', 'testsuite_id': '125', 'node_order': '1000', 'estimated_exec_duration': '', 'tc_external_id': '12'}]
2017-01-15 16:53:46,029 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:53:46,029 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:53:46,030 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 16:53:46,030 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 16:53:46,030 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:53:46,030 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:53:46,030 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:53:46,031 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 16:53:46,088 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:53:46,088 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:53:46",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115165342 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:53:46,093 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 16:53:46,093 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:53:46,093 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:46,093 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:46,095 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:53:46,095 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:53:46,096 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 16:53:46,102 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:53:46,102 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:53:46",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115165342 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:53:46,105 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 16:53:46,105 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 16:53:46,105 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:46,106 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:46,107 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 16:53:46,108 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 16:53:46,108 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 16:53:46" WHERE executed_history_id = 20170115165342 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:53:46,280 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 16:53:46,545 testplan.py[line: 45] INFO: 获取测试用例信息 [{'layout': '1', 'version': '1', 'execution_type': '1', 'full_tc_external_id': 'wecharno-4', 'name': 'test-n-把商品加入购物车', 'summary': '', 'steps': [{'active': '1', 'execution_type': '1', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'id': '175', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'step_number': '2', 'expected_results': '', 'id': '174', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '90', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'step_number': '4', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'id': '176', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'step_number': '5', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '177', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n'}], 'updater_login': 'admin', 'is_open': '1', 'author_last_name': 'Administrator', 'author_login': 'admin', 'active': '1', 'preconditions': '', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 17:58:09', 'status': '1', 'creation_ts': '2016-07-20 12:07:40', 'id': '89', 'author_first_name': 'Testlink', 'importance': '2', 'author_id': '1', 'testcase_id': '88', 'updater_last_name': 'Administrator', 'updater_id': '1', 'testsuite_id': '87', 'node_order': '1000', 'estimated_exec_duration': '', 'tc_external_id': '4'}]
2017-01-15 16:53:46,656 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:53:46,656 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:53:46,658 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 16:53:46,658 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 16:53:46,658 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 16:53:46,658 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:46,658 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:46,659 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:53:46,660 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:53:46,660 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 16:53:46,660 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 16:53:46,662 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2017-01-15 16:53:46,663 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:53:46,663 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}]
2017-01-15 16:53:46,663 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:53:46,663 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:53:46",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115165342 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:53:46,664 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2017-01-15 16:53:46,664 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:53:46,664 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:46,664 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:46,665 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:53:46,665 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2017-01-15 16:53:46,665 casestep.py[line: 149] INFO: 转换后的参数体为：(167020,)
2017-01-15 16:53:46,666 mydb.py[line: 72] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2017-01-15 16:53:47,169 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:53:47,169 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:53:46",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '\u53c2\u6570': [167020]}", expected_results="" WHERE executed_history_id = 20170115165342 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:53:47,172 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2017-01-15 16:53:47,172 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2017-01-15 16:53:47,172 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:53:47,172 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165342', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:53:47,174 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:53:47,174 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:53:47,174 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:53:47,174 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:53:47,174 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', 26838), ('standardId', 'undefined'), ('amount', 1), ('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 16:53:47,174 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:53:47,174 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 16:53:47,175 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2017-01-15 16:53:47,175 httpprotocol.py[line: 75] INFO: 参数为：b'mallGoodsId=26838&standardId=undefined&amount=1&serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2017-01-15 16:53:47,175 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:53:47,584 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:53:47,585 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"加入购物车失败","attach":null}
2017-01-15 16:53:47,585 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:53:45 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:53:47,585 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:53:47,585 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:53:47,585 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:54:35,858 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 16:54:35,858 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 16:54:35,873 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 16:54:35,876 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 16:54:35,942 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 16:54:35,942 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 16:54:35,944 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 16:54:35,944 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 16:54:35,945 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 16:54:35,947 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 16:54:35,947 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 16:54:36,133 global_function.py[line: 19] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'tc_external_id': '1', 'layout': '1', 'updater_first_name': 'Testlink', 'node_order': '1000', 'importance': '2', 'updater_last_name': 'Administrator', 'author_id': '1', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-27 18:32:10', 'testcase_id': '148', 'status': '1', 'name': 'test-n-登陆掌贝pos机', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '183', 'active': '1', 'step_number': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '182', 'active': '1', 'step_number': '2'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'id': '150', 'active': '1', 'step_number': '3'}], 'version': '1', 'execution_type': '1', 'id': '149', 'estimated_exec_duration': '', 'modification_ts': '2016-11-30 15:41:36', 'author_login': 'admin', 'testsuite_id': '147', 'full_tc_external_id': 'pj_pos-1', 'updater_id': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'summary': '', 'is_open': '1', 'active': '1'}]
2017-01-15 16:54:36,267 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 16:54:37,012 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:54:37,012 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165435', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:54:37,015 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 16:54:37,015 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 16:54:37,015 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 16:54:37,016 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:54:37,016 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165435', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:54:37,019 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:54:37,019 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:54:37,020 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 16:54:37,024 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 16:54:37,025 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:54:37,025 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 16:54:37,025 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:54:37,025 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:54:37",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'检查': 'body', '输出': {'branch_id': 1}}" WHERE executed_history_id = 20170115165435 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:54:37,028 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 16:54:37,028 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 16:54:37,029 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:54:37,029 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165435', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:54:37,030 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:54:37,031 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 16:54:37,031 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 16:54:37,031 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 16:54:37,035 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 16:54:37,035 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:54:37,035 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 16:54:37,035 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:54:37,035 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:54:37",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'检查': 'body', '输出': {'device_no': 1, 'serial_no': 2}}" WHERE executed_history_id = 20170115165435 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:54:37,037 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 16:54:37,038 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 16:54:37,038 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:54:37,038 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165435', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:54:37,039 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:54:37,040 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 16:54:37,040 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:54:37,040 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:54:37,040 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 16:54:37,041 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 16:54:37,041 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 16:54:37,041 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 16:54:37,041 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 16:54:37,041 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 16:54:37,042 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 16:54:37,042 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 16:54:37,042 httpprotocol.py[line: 76] INFO: 请求头为：{'ProtocolVersion': '4.0', 'Content-Type': 'application/json;charset=utf-8', 'ProductVersion': '[global_product_version]', 'DeviceId': '[CaseStep.device_no]', 'SerialNo': '[CaseStep.serial_no]'}
2017-01-15 16:54:37,435 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 16:54:37,435 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 16:54:37,435 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:54:35 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:54:37,435 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:54:37,435 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:54:37,435 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:54:37,436 global_function.py[line: 89] ERROR: 运行用例出错 'InterfaceUnittestTestCase' object has no attribute 'replace'
2017-01-15 16:54:37,437 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '执行用例出错 148')
2017-01-15 16:54:37,437 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 16:54:37,437 main.py[line: 115] INFO: 运行指定项目
2017-01-15 16:54:37,559 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 16:54:37,559 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 16:54:37,560 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 16:54:37,560 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 16:54:37,687 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 16:54:37,803 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 16:54:37,803 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 16:54:37,938 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['114', '106', '110', '88', '102', '98', '126', '93', '76', '80', '120'])
2017-01-15 16:54:38,079 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'tc_external_id': '10', 'layout': '1', 'updater_first_name': 'Testlink', 'node_order': '1000', 'importance': '2', 'updater_last_name': 'Administrator', 'author_id': '1', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-25 15:02:41', 'testcase_id': '114', 'status': '1', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'steps': [{'expected_results': '', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'id': '116', 'active': '1', 'step_number': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '117', 'active': '1', 'step_number': '2'}], 'version': '1', 'execution_type': '1', 'id': '115', 'estimated_exec_duration': '', 'modification_ts': '2016-11-29 17:52:17', 'author_login': 'admin', 'testsuite_id': '113', 'full_tc_external_id': 'wecharno-10', 'updater_id': '1', 'preconditions': '', 'summary': '', 'is_open': '1', 'active': '1'}]
2017-01-15 16:54:38,218 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:54:38,218 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165435', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:54:38,220 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 16:54:38,220 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 16:54:38,220 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:54:38,220 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:54:38,220 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165435', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:54:38,221 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:54:38,341 global_function.py[line: 19] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'tc_external_id': '8', 'layout': '1', 'updater_first_name': 'Testlink', 'node_order': '1000', 'importance': '2', 'updater_last_name': 'Administrator', 'author_id': '1', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-21 11:26:32', 'testcase_id': '106', 'status': '1', 'name': 'test-n-创建储值卡支付订单', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'id': '108', 'active': '1', 'step_number': '1'}], 'version': '1', 'execution_type': '1', 'id': '107', 'estimated_exec_duration': '', 'modification_ts': '2016-11-29 17:33:09', 'author_login': 'admin', 'testsuite_id': '105', 'full_tc_external_id': 'wecharno-8', 'updater_id': '1', 'preconditions': '', 'summary': '', 'is_open': '1', 'active': '1'}]
2017-01-15 16:54:38,466 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 16:54:38,702 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:54:38,702 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165435', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:54:38,704 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 16:54:38,704 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 16:54:38,704 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 16:54:38,704 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:54:38,704 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165435', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:54:38,706 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:54:38,706 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:54:38,706 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:54:38,707 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:54:38,707 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 16:54:38,707 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:54:38,707 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:54:38,707 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 16:54:38,707 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 16:54:38,707 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 16:54:38,708 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:54:38,754 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:54:38,754 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 16:54:38,755 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:54:36 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:54:38,755 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:54:38,755 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 16:54:38,756 global_function.py[line: 89] ERROR: 运行用例出错 'InterfaceUnittestTestCase' object has no attribute 'replace'
2017-01-15 16:57:57,067 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 16:57:57,067 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 16:57:57,081 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 16:57:57,087 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 16:57:57,145 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 16:57:57,145 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 16:57:57,147 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 16:57:57,147 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 16:57:57,149 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 16:57:57,153 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 16:57:57,154 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 16:57:57,328 global_function.py[line: 19] INFO: 获取测试用例信息 [{'author_first_name': 'Testlink', 'testsuite_id': '147', 'execution_type': '1', 'summary': '', 'modification_ts': '2016-11-30 15:41:36', 'updater_first_name': 'Testlink', 'author_last_name': 'Administrator', 'tc_external_id': '1', 'full_tc_external_id': 'pj_pos-1', 'layout': '1', 'creation_ts': '2016-07-27 18:32:10', 'updater_last_name': 'Administrator', 'is_open': '1', 'active': '1', 'name': 'test-n-登陆掌贝pos机', 'steps': [{'step_number': '1', 'id': '183', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n'}, {'step_number': '2', 'id': '182', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n'}, {'step_number': '3', 'id': '150', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n'}], 'updater_login': 'admin', 'version': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'node_order': '1000', 'id': '149', 'status': '1', 'author_login': 'admin', 'testcase_id': '148', 'estimated_exec_duration': '', 'updater_id': '1', 'author_id': '1', 'importance': '2'}]
2017-01-15 16:57:57,458 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 16:57:58,212 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:57:58,212 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165757', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:57:58,213 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 16:57:58,213 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 16:57:58,213 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 16:57:58,213 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:57:58,214 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165757', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:57:58,215 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:57:58,215 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:57:58,216 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 16:57:58,219 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 16:57:58,219 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:57:58,219 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 16:57:58,220 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:57:58,220 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:57:58",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'检查': 'body', '输出': {'branch_id': 1}}" WHERE executed_history_id = 20170115165757 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:57:58,223 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 16:57:58,223 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 16:57:58,223 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:57:58,223 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165757', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:57:58,225 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:57:58,225 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 16:57:58,225 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 16:57:58,225 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 16:57:58,228 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 16:57:58,228 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:57:58,229 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 16:57:58,229 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:57:58,229 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:57:58",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'检查': 'body', '输出': {'device_no': 1, 'serial_no': 2}}" WHERE executed_history_id = 20170115165757 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:57:58,230 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 16:57:58,231 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 16:57:58,231 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:57:58,231 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165757', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:57:58,233 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:57:58,233 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 16:57:58,233 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:57:58,233 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:57:58,233 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 16:57:58,233 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 16:57:58,233 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 16:57:58,234 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 16:57:58,234 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 16:57:58,234 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 16:57:58,235 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 16:57:58,235 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 16:57:58,235 httpprotocol.py[line: 76] INFO: 请求头为：{'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8', 'ProtocolVersion': '4.0', 'ProductVersion': '[global_product_version]', 'SerialNo': '[CaseStep.serial_no]'}
2017-01-15 16:57:58,618 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 16:57:58,619 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 16:57:58,619 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:57:56 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:57:58,619 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:57:58,619 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:57:58,619 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:57:58,620 global_function.py[line: 89] ERROR: 运行用例出错 'InterfaceUnittestTestCase' object has no attribute 'replace'
2017-01-15 16:57:58,621 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '执行用例出错 148')
2017-01-15 16:57:58,621 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 16:57:58,621 main.py[line: 115] INFO: 运行指定项目
2017-01-15 16:57:58,772 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 16:57:58,772 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 16:57:58,774 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 16:57:58,774 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 16:57:58,943 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 16:57:59,074 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 16:57:59,074 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 16:57:59,210 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['102', '106', '76', '110', '93', '120', '114', '126', '88', '98', '80'])
2017-01-15 16:57:59,350 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_first_name': 'Testlink', 'testsuite_id': '79', 'execution_type': '1', 'summary': '', 'modification_ts': '2016-11-29 18:14:53', 'updater_first_name': 'Testlink', 'author_last_name': 'Administrator', 'tc_external_id': '7', 'full_tc_external_id': 'wecharno-7', 'layout': '1', 'creation_ts': '2016-07-20 16:48:26', 'updater_last_name': 'Administrator', 'is_open': '1', 'active': '1', 'name': 'test-n-点击立即购买按钮', 'steps': [{'step_number': '1', 'id': '104', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;到店支付&quot;,&quot;消息&quot;:&quot;无法打开商品详情&quot;}]</p>\n<p>\n\t}</p>\n', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/mall/tobuy/1?&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:&quot;26838&quot;,&quot;amount&quot;:1,&quot;type&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n'}], 'updater_login': 'admin', 'version': '1', 'preconditions': '', 'node_order': '1001', 'id': '103', 'status': '1', 'author_login': 'admin', 'testcase_id': '102', 'estimated_exec_duration': '', 'updater_id': '1', 'author_id': '1', 'importance': '2'}]
2017-01-15 16:57:59,473 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:57:59,473 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165757', 102, 'test-n-点击立即购买按钮', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:57:59,475 testplan.py[line: 72] INFO: 开始执行测试用例[id=102，name=test-n-点击立即购买按钮]
2017-01-15 16:57:59,475 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}
2017-01-15 16:57:59,475 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}
2017-01-15 16:57:59,475 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:57:59,475 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165757', 102, 'test-n-点击立即购买按钮', 'plan1_of_wechatno', 'pj_wechatno', 104, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:57:59,478 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:57:59,478 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:57:59,478 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:57:59,478 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', '26838'), ('amount', 1), ('type', 1), ('serial', '10549840601068216320')])
2017-01-15 16:57:59,478 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:57:59,478 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 16:57:59,479 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/mall/tobuy/1?mallGoodsId=26838&amount=1&type=1&serial=10549840601068216320
2017-01-15 16:57:59,479 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:58:01,015 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:58:01,015 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 
	 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta http-equiv="Expires" CONTENT="0">
<meta http-equiv="Cache-Control" CONTENT="no-cache">
<meta http-equiv="Pragma" CONTENT="no-cache">
<title>微商城</title>
<link rel="stylesheet" href="/css/mall/pure.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/grids-core.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/zepto.alert.css?v=5.0.0-faae2">

<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.ios7.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.animation.css?v=5.0.0-faae2">
</head>
<style type="text/css">
* {
	margin: 0;
	padding: 0;
}

html {
	color: #626262;
	overflow-y: auto;
	overflow-x: hidden;
}

body {
	margin-bottom: 20px;
	overflow-y: auto;
	overflow-x: hidden;
}

a {
	text-decoration: none;
}

ol,ul {
	list-style: outside none none;
}

.left {
	float: left;
}

.right {
	float: right;
}

.in-block {
	display: inline-block;
}

.orange {
	color: #c58d04;
}

.grey {
	color: #adadad;
}

.bg-color {
	background: #ececec;
}

#wrapper {
	width: 100%;
	margin: 0 auto;
}

.header {
	width: 100%;
}

.header ul {
	position:relative;
	overflow: hidden;
}

.header ul li {
	width: 50%;
	float: left;
	height: 2.8em;
	line-height: 2.8em;
	background: #fff;
	text-align: center;
	border-bottom:1px solid #f38b44;
	-moz-box-sizing:border-box; /* Firefox */
     -webkit-box-sizing:border-box; /* Safari */
     box-sizing:border-box;
}
.header ul .lines{
	position: absolute;
	width: 1%;
	height: 2.8em;
	line-height: 2.8em;
	border-right: 1px solid #FDE5D4;
	left: 49%;
	top: -1px;
 } 
.header ul li a {
	color: #8b898a;
}

.tab_content>div {
	height: auto;
	font-size: 0.8em;
	margin: 0.5em 0;
}

.empty-p {
	width: 80%;
	float: left;
	padding: 0.5em 0;
}

.has-p {
    width: 100%;
    margin: 0 auto;
    padding: 0 1em;
    height: auto;
    line-height: 2.5em;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -webkit-box-sizing: -webkit-border-box;
}
.has-p-one{
    background: url(/images/mall/contact.png) no-repeat left center;
    background-size: 12px 12px;
}
.has-p-two{
    background: url(/images/mall/take.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.has-p-three{
    background: url(/images/mall/time.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.input-right{
    position: relative;
}
.input-right-img{
    width: 1em;
    position: absolute;
    right: 0.6em;
    top: 0.3em;
}
#scheduledTime{
    width:11em;
    height: 2em;
    border:1px solid #a0a0a0;
    border-radius:4px;
    color:#a0a0a0;
    text-indent:.5em
}
.hiddens-p{
    text-overflow:ellipsis; 
    overflow:hidden; 
    white-space:nowrap;  
}

.right-dashed {
	border-left: 1px solid #eee;
	margin-top: 1em;
	padding-bottom:1em;
}

#edit {
	padding: 1em 0 1em 2em;
    width: 10px;
}

.header ul li.active{
    border-bottom: 4px solid #f38b44;
}
.header ul li.active a{
    color: #f38b44!important;
}
.buy_title{
	background:#f3f3f3;
	padding:0.3em 1em;
	margin: 0;
}
.content {
	width: 100%;
	background: #fff;
	overflow: hidden;	
	padding-bottom:8%;
}

.selectList {
	border-bottom: 1px solid #efefef;
	margin: 0 auto;
	overflow: hidden;
	padding: 0.5em 1em;
	font-size: 0.8em;
	clear:both;
}

.selectList img {
    display: inline-block;
    float: left;
    width: 25%;
    border-radius: 4px;
    -webkit-border-radius: 4px;
}

.button {
	display:block;	
	width: 99%;	
	height: 3em;
	color: #fff;
	border: none;
	border-radius: 4px;
	margin:0 auto 0.5em auto;
}

.addbtn {
	background: #33CC66;
}

.btn-wrap-5 {
	padding: 0 1em;
}
.buybtn {
	width: 100%;
	background: #f68d3c;
}

.footer {
	width: 100%;
	background: #fff;
	color: #b6b6b6;
	overflow: hidden;
	text-align: left;
	margin-bottom: 1em;
}

.all-end-button {
	width: 90%;
	margin: 1em auto 0.5em;
}

.all-end-button p:first-child {
	text-align: left;
}

.error-page{
	background: #ddd;
    padding-bottom: 2em;
}
.error-page img{
    margin:0 auto;
	padding-top: 2em;
}
.error-page p{
    text-align:center;
    color:#000;
    width:80%;
    margin:1em auto 2em;
}
#deliverFee{
	text-align:left;
	font-size:0.8em;
	color:#acb0af;
}
.order-div{
    margin-left: 26.8%;            
    position: relative;
}
.order-div>p:last-child{
    width: 100%;
    margin: 0;
    position: absolute;
    bottom: 0;
    left: 0;
}
.m-t-n{
    margin-top: 0;
}
.m-t-n>span{
    display: inline-block;
}
.m-t-n>span:first-child{
    width: 70%;
}
.m-t-n>span:last-child{
    width: 30%;
}
.mtn-span{
    float: right;
}
.t-r-span{
	text-align:right;
}
.ccc{
    color: #ccc;
}
.peisong{
    text-align: right;
    margin-bottom: 0;
    padding-right: 1em;
    padding-top: 0.4em;
}
.peisong-detail{
    color:#000;
}
.peisong-detail input{
    border: none;
}
.peisong-detail div>p{
    padding-left: 1.8em;
    padding-top: 0.8em;
    padding-bottom: 0.8em;
    margin: 0;
    clear:both;
}

.weipay{            
    background: url(/images/weixin2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}        
.peisong-detail div>p.pay{
    background: url(/images/money2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.cardpay{
    background: url(/images/cardpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.mdpay{
    background: url(/images/mdpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}

.peisong-detail div[class^="btn-wrap-"] {
	border-bottom: 1px solid #dadada;
	padding: 0 1em;
	height: 3em;
	position: relative;
}

.weipay,.pay,.mdpay,.cardpay{
    position: relative;
}
 .weipay>img,.mdpay>img,.pay>img,.cardpay>img,.zhifu input{
    width: 1.2em;
    height: 1.2em;
    position: absolute;
    right: 0;
    top: 50%;
    transform:translateY(-50%);
}

.pure-img-check {
	background: url(/images/weixuan2.png) no-repeat left center;
    background-size:1.05em 1.05em; 
    float: right;
    height: 1.05em;
    width: 1.05em;
}

.zhifu input{
    display: none;
}
#deliverFeeDiv, #FetchDiv {
	border-bottom: 1px solid #efefef;
    padding: 0.5em 1em;
}
#deliverFeeDiv p, #FetchDiv p{
	text-align:right;
}

#remark {
	padding: 0.5em 1em;
	height: 4em;
	font-size: 1.0em;
}

.tab-adress {
	position: relative;
}
.icon-wrap {
	/*float: right;*/
	position: absolute;
	top: 11px;
	right: 10px;
}
.icon-wrap-spe {
	top: 0;
}

/*toast提示*/
.toastBlock {
    display: none; 
    position: fixed;
    bottom: 50%;
    width: 100%;
    text-align: center;
    transition: opacity 1s ease-out;
    z-index: 19;
}
.toastBlock .toastContent {
    display: inline-block;
    padding: 18px;
    border-radius: 5px;
    font-size: 14px;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.7);
}
</style>
<body>
	<div id="wrapper">
		
			
			
			
				
					
					
						
						
						
						
						
					
					
				
				
			
			<div class="header">
				
					<ul class="tab">
						<li class='active' data='#deliverFeeDiv'><a href="#tab1">快递发货</a></li>						
						<li class=''><a href="#tab2">到店自提</a></li>
						<span class="lines"></span>
					</ul>
				
			</div>
			<p class="buy_title"></p>
			
			<div class="tab_container">
				<div id="tab1" class="tab_content pure-g" style="">
					<div class="pure-u-24-24 tab-adress j-tab-adress">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">17817738178<span>(17817738178)</span></span>
								</div>
								<div class="has-p">
									<span>配送地址：</span>
									<span class="pure-u-3-5">天津市县宁河县详细</span>
                                </div>

                                <span class="icon-wrap">
                                	
                                		
                                		
                                		<a class="url_adress" href="/toaddr/1?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
                                		</a>
                                		
                                	
                                </span>
							
							
						
					</div>
				</div>
				<div id="tab2" class="tab_content pure-g" style="display:none">
					<div class="pure-u-24-24">
						
							
								<div class="tab-adress j-tab-adress">
									<div class="has-p">
										<span>联系方式：</span>
										<span class="pure-u-3-5">452<span>(17817738178)</span></span>
									</div>
	                                <div class="has-p">
	                                	<span>门&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;店：</span>
	                                	<span class="pure-u-3-5">
	                                		广东省深圳市福田区
		                                	
		                                		Biu
		                                	
	                                	</span>
	                                </div>
	                                <span class="icon-wrap">
	                                	
	                                		
	                                		
	                                		<a class="url_adress" href="/toaddr/2?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
	                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
	                                		</a>
	                                		
	                                	
	                                </span>
                                </div>
                               	<div class="has-p">
                               		<span>到店时间：</span>
                               		<span class="input-right">
                               			<input type="text" id="scheduledTime" name="scheduledTime" class="text" placeholder="请选择"/><img src="/images/mall/input-right.png?v=5.0.0-faae2" class="input-right-img">
                               		</span>
                               	</div>
							
							
						
					</div>
				</div>
			</div>
			<p class="buy_title"></p>
			
			<div class="content">
				
					
						
							<div class="selectList">
								<img src="http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg"> 
								
									
									
										<div class="order-div">
											<p class="m-t-n"><span>接口-测试商品1</span><span class="mtn-span t-r-span">￥0.01</span></p>
											<p><span class="ccc mtn-span">X1</span></p>
                                        </div>	
									
								
							</div>
						
					
					
					
				
				<div id="deliverFeeDiv">
					 
						
						
							<p id="deliverFee">含运费：￥0.01</p>
							<p class="orange">合计：￥0.02</p>
						
					 
				</div>
				<div id="FetchDiv" style="display: none;">
					<p class="orange">合计：￥0.01</p>
				</div>
				<div id="remark">
					<span class="beizhu" style="float:left">备注：</span>
                   	<span class="beizhulan">
                   		<textarea rows="3" placeholder="可于此处给卖家留言备注" style="border:0;width: 85%;"></textarea>
                   	</span>
				</div>
			</div>
			<p class="buy_title"></p>
			<div class="footer">
				<div class="peisong-detail zhifu">
                	
                        <div class="btn-wrap-1">
                         	<p class="weipay">微信支付<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="1"/>
                         	</p>
                        </div>
                    
                  	
                  	
                        <div class="btn-wrap-2" style="">
                         	<p class="pay">货到付款<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="3"/>
                         	</p>
                        </div>
                   	
		
                    
                        <div class="btn-wrap-3" style="display:none">
                        	<p class="mdpay">到店支付<span class="pure-img-check"></span>
                        		<input type="radio" name="zhifu" value="2"/>
                        	</p>
                        </div>
                   	
                   	
                   	
                        <div class="btn-wrap-4">
                       		<p class="cardpay">储值卡支付<span class="pure-img-check"></span>
                       			<input type="radio" name="zhifu" value="4"/>
                       		</p>
                        </div>
                   	
                </div>
			</div>
			<div class="btn-wrap-5">
				<input type="button" class="button buybtn submit" value="确认提交" />
			</div>

			<div id="toastId" class="toastBlock">
			    <span class="toastContent"></span>
			</div>
			
		
	</div>
	<script type="text/javascript" src="/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/touch.js?v=5.0.0-faae2"></script>
    
	<script type="text/javascript" src="/js/mall/zepto.alert.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mall.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.zepto.js?v=5.0.0-faae2" ></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.core.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.scroller.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.datetime.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.i18n.zh.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			$("input[name='zhifu']:checked").prev('.pure-img').attr('src','/images/check.png');
			var tab = parseInt("1");
			/* if(tab == 1){
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else if (tab == 0){
			    $("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} else if(parseInt("1") != 0){
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} */
			
			if ("true" == "true" && 1 == 1) {
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else {
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			}
			
			// 控制显示图片比例
			var img_left_heights = $(".selectList img").width()*(0.75);
			$(".selectList img,.order-div").css('height',img_left_heights);
			
			// 取货日期
			var now = new Date();
            $('#scheduledTime').mobiscroll().datetime({
                minDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()+1),
                maxDate: new Date(now.getFullYear(), now.getMonth()+3, now.getDate()),
                stepMinute: 30,
                dateOrder :"yymmdd",
                dateFormat:"yy-mm-dd",
                timeWheels:"HHii",
                timeFormat:"HH:ii",
                //invalid: [{ start: '00:00', end: '08:00' },{ start: '22:00', end: '23:59' }],
                theme: 'ios7',
                lang: 'zh',
                display: 'bottom',
                mode: 'mixed'
            });
            $('#scheduledTime').click(function(){
                $('#scheduledTime').mobiscroll('show'); 
                return false;
            });
            
			$("ul li").click(function() {
				$("ul li").removeClass("active");
				$(this).addClass("active");
				if($(this).attr("data")=="#deliverFeeDiv"){
					$("#deliverFeeDiv").show();
					$("#FetchDiv").hide();
				}else{
					$("#deliverFeeDiv").hide();
					$("#FetchDiv").show();
				}
				$(".tab_content").hide();
				var href = $(this).find("a").attr("href");
				$(href).show();
				
				if(href.endWith("tab1")) {
					$(".btn-wrap-2").show();
					$(".btn-wrap-3").hide();
				} else if(href.endWith("tab2")) {
					$(".btn-wrap-2").hide();
					$(".btn-wrap-3").show();
				}
				//清空已选择的支付方式
				$("input[name='zhifu']").prop("checked", false);
				$(".zhifu .pure-img-check").css('background-image','url(/images/weixuan2.png)');
				return false;
			});
			//商户设置的满额包邮价
			/* var noDeliverFee = toPrice(parseFloat("200")/100);
			var totalFee = parseFloat("0.01");
			if(totalFee > noDeliverFee){
				$("#deliverFeeDiv .orange").text("合计：￥"+ totalFee);
				$("#deliverFee").text("含运费：￥0.00");
			} */
			$('.zhifu>div').click(function(){
	            $("input[name=zhifu]").prop("checked", false);
	            $(".pure-img-check").css('backgroundImage','url(/images/weixuan2.png)');
	            var img_obj = $(this).find('.pure-img-check');
	            var backgroundImage = img_obj.css('background-image');
	            var input_obj = $(this).find('input');
	            if(backgroundImage.indexOf("weixuan2.png") > 0){
	                img_obj.css('background-image','url(/images/check.png)');
	                input_obj.prop("checked", "checked");
	            }else{
	                img_obj.css('background-image','url(/images/weixuan2.png)');
	                input_obj.prop("checked", false);
	            }
	        });


	        $(".j-tab-adress").click(function(event) {
	        	var _url = $(this).find('.url_adress').prop("href");

	        	window.location.href = _url;
	        });
		});
		
		function validateRemark(){
			var text = filtEmoji($('.beizhulan textarea').val());
			if(text != "" && text != undefined){
				if(text.length>30){
					$.dialog({
                        widths : '80%',
                        content : '您输入的备注过长，请不要超过30个字',
                        title : 'no',
                        fullok : function() {
                            return true;
                        },                       
                        lock : true
                    });	
					return false;
				}
				return true;
			}
			return true;
		}
		function filtEmoji (str) {
			return unescape(escape(str).replace(/\%uD.{3}/g, ''));
		}
		
		$(".submit").click(function(event){
			var payType = $("input[name='zhifu']:checked").val();
			if(null == payType || "" == payType || typeof(payType) == "undefined") {
       		 $.dialog({
                    widths : '80%',
                    content : '请选择支付方式',
                    title : 'no',
                    fullok : function() {
                        return true;
                    },                       
                    lock : true
                });
       			return;
       		}
			$.dialog({
                content : "确认提交订单？",
                title : "no",
                okText: '取消',
                cancelText : '确定', 
                ok : function() {
                	$(".ft-right").removeAttr("disabled");
                	return;
                },
                cancel : function() {                        	
               		
               		if(payType == 1){
               			if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				doAlert("no", "无效物流方式");
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@4411bcf1";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/1", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "id=" + result.attach;
            	    			strParams += "&serial=10549840601068216320";
            	    			if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
            	        	});
            			}
               		}
               		
    				if(payType == 2){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@4411bcf1";
    					if(shopBranch == "") {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					var _fetchTime = $("#scheduledTime").val();
    					if(null == _fetchTime || "" == _fetchTime) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请选择取货时间',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						
    						var _remark = filtEmoji($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							fetchTime : _fetchTime,
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/2/2", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 3){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑收货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });

    						var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
    						// var _remark = encodeURI($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/1/3", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 4){
    					if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				$.dialog({
        	                    widths : '80%',
        	                    content : '无效物流方式',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@4411bcf1";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
            			// var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/4", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "?orderId=" + result.attach;
            					if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            					strParams += "&serial=10549840601068216320";
                				window.location.href = "/pay/5"+strParams;
            	        	});
            			}
            			
    				}
    				
                },
                lock : true
            });
		});
		
		//微信支付
		/* $(".payUseWX").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			var type = 0;
			$(".tab_content").each(function(){
				if($(this).css("display") != "none") {
					var attrId = $(this).attr("id");
					if(attrId == "tab1") {
						type = 1;//快递取货
					} else if(attrId == "tab2") {
						type = 2;//门店自提
					}
				}
			});
			if(type <= 0) {
				doAlert("no", "无效物流方式");
				return;
			}
			if(type == 1) {
				if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑收货地址");
					return;
				}
			}
			var _fetchTime = "";
			if(type == 2) {
				if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑取货地址");
					return;
				}
				_fetchTime = $("#scheduledTime").val();
				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
					doAlert("no", "请选择取货时间");
					return;
				}
				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@4411bcf1";
				if(shopBranch == "") {
					doAlert("no", "请编辑取货地址");
					return;
				}
			}
			
			var _remark = encodeURI($(".beizhulan").find("textarea").val());
			var params = {
				serial : "10549840601068216320",
				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
				fm : "1",
				mallGoodsId : "26838",
				amount : "1",
				cartIds : "",
				fetchTime : _fetchTime,
				remark : _remark
			};
			if(parseInt("1") == 1 && parseInt("1") == 2){
				var standardId = "";
				if(standardId != null && standardId != undefined){
					params.standardId = standardId;
				}
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				$.post("/cmorder/" + type+ "/1", params, function(result){
					dialog.close();
					
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					
					var strParams = "id=" + result.attach;
	    			strParams += "&serial=10549840601068216320";
	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
	        	});
			}
		}); */
		//货到付款
		/* $(".payAfrecv").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑收货地址");
				return;
			}
			
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				var _remark = encodeURI($(".beizhulan").find("textarea").val());
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/1/3", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
	        	});
			}
		}); */
		//到店支付
		// $(".payInshop").click(function(event) {
			/* if($(this).prop("disabled") == true)
        		return false;
			
			var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@4411bcf1";
			if(shopBranch == "") {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			var _fetchTime = $("#scheduledTime").val();
			if(null == _fetchTime || "" == _fetchTime) {
				doAlert("no", "请选择取货时间");
				return;
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				
				var _remark = $(".beizhulan").find("textarea").val();
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					fetchTime : _fetchTime,
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/2/2", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
	        	});
			} */
		// });
	
		// toast提示
		var toastTime=null;
		var displayTime=null;

		function setToast(html) {
		    if (toastTime != null) {
		        clearTimeout(toastTime);
		        clearTimeout(displayTime);
		    }
		    // $('toastId').style.display = 'block';
		    // $('toastId').style.opacity = 1;
		    $('#toastId').css({
		        display: 'block',
		        opacity: 1
		    });
		    $('#toastId .toastContent').text(html);

		    toastTime = setTimeout(function() {
		        // $('toastId').style.opacity = 0;
		        $('#toastId').css("opacity", 0);
		        displayTime = setTimeout(function() {
		            // $('toastId').style.display='none';
		            $('#toastId').css("display", "none");
		        }, 1000);
		    }, 1000);
		}

		function toastDisplay(str) {
		    setToast(str);
		}
	</script>
</body>
</html>
<!--加入判断用户是否关注公众号功能 add by lipengfei at 2015-11-9  -->
  	
	<script type="text/javascript" src="/js/bind/banner.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			//var SHOP_SERIAL = getCookie("SHOP_SERIAL");
			var SHOP_SERIAL = "10549840601068216320";
			if(null != SHOP_SERIAL && SHOP_SERIAL != ""){
				$.ajax({
					url : '/saofu_mobile/checkUserBindStatus',
					data : {
						"serial" : SHOP_SERIAL
					},
					type : 'post',
					cache : false,
					dataType : 'json',
					success : function(data) {
						if (data != null) {
							var guildFocusStr = data.guildFocusStr;
							if(guildFocusStr != null && guildFocusStr == "1"){
								var hasBindedShop = data.hasBindedShop;
								if(hasBindedShop == "0"){
									var qrName = data.QRPublicName;
									var qrUrl = data.QRCodeURL;
									if(qrName != "" && qrUrl != ""){
										var params = qrName+"**"+qrUrl;
										followModule(params);
									}
								}
							}
						} 
					},
					error : function() {
					}
				});
			}
		});
				
	</script>

2017-01-15 16:58:01,018 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:57:58 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=F8EE35B96C7DE9822EBFFFD1BD61A1A2; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 16:58:01,019 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:58:01,019 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：到店支付
2017-01-15 16:58:01,019 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 16:58:01,019 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:58:01,019 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 16:57:59",step_action="{'\u65b9\u6cd5': 'get', 'url': '/mall/tobuy/1?', '\u53c2\u6570': {'mallGoodsId': '26838', 'amount': 1, 'type': 1, 'serial': '10549840601068216320'}}", expected_results="{'检查': 'body', '匹配规则': '包含字符串', '条件': [{'模式': '到店支付', '消息': '无法打开商品详情'}]}" WHERE executed_history_id = 20170115165757 AND testcase_id = 102 AND step_id = 104 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:58:01,021 testcase.py[line: 164] INFO: 测试用例[id=102, name=test-n-点击立即购买按钮]执行成功
2017-01-15 16:58:01,021 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 16:58:01,022 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 16:57:59" WHERE executed_history_id = 20170115165757 AND testcase_id = 102 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:58:01,144 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=102]的执行结果
2017-01-15 16:58:01,412 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_first_name': 'Testlink', 'testsuite_id': '105', 'execution_type': '1', 'summary': '', 'modification_ts': '2016-11-29 17:33:09', 'updater_first_name': 'Testlink', 'author_last_name': 'Administrator', 'tc_external_id': '8', 'full_tc_external_id': 'wecharno-8', 'layout': '1', 'creation_ts': '2016-07-21 11:26:32', 'updater_last_name': 'Administrator', 'is_open': '1', 'active': '1', 'name': 'test-n-创建储值卡支付订单', 'steps': [{'step_number': '1', 'id': '108', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n'}], 'updater_login': 'admin', 'version': '1', 'preconditions': '', 'node_order': '1000', 'id': '107', 'status': '1', 'author_login': 'admin', 'testcase_id': '106', 'estimated_exec_duration': '', 'updater_id': '1', 'author_id': '1', 'importance': '2'}]
2017-01-15 16:58:01,534 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:58:01,534 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165757', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:58:01,535 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 16:58:01,535 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 16:58:01,535 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 16:58:01,535 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:58:01,535 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165757', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:58:01,536 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:58:01,536 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:58:01,536 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:58:01,536 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:58:01,537 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 16:58:01,537 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:58:01,537 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:58:01,537 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 16:58:01,537 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 16:58:01,537 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 16:58:01,537 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:58:01,580 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:58:01,580 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 16:58:01,580 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:57:59 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:58:01,580 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:58:01,580 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 16:58:44,521 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 16:58:44,521 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 16:58:44,538 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 16:58:44,542 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 16:58:44,623 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 16:58:44,623 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 16:58:44,625 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 16:58:44,625 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 16:58:44,627 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 16:58:44,629 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 16:58:44,630 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 16:58:44,770 global_function.py[line: 19] INFO: 获取测试用例信息 [{'updater_last_name': 'Administrator', 'author_login': 'admin', 'is_open': '1', 'execution_type': '1', 'version': '1', 'steps': [{'active': '1', 'execution_type': '1', 'id': '183', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'id': '182', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'id': '150', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n'}], 'summary': '', 'id': '149', 'importance': '2', 'status': '1', 'full_tc_external_id': 'pj_pos-1', 'name': 'test-n-登陆掌贝pos机', 'preconditions': '<p>\n\t初始化用例</p>\n', 'author_id': '1', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'estimated_exec_duration': '', 'testcase_id': '148', 'tc_external_id': '1', 'updater_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '147', 'modification_ts': '2016-11-30 15:41:36', 'active': '1', 'layout': '1', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-27 18:32:10', 'node_order': '1000'}]
2017-01-15 16:58:44,884 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 16:58:45,606 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:58:45,606 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165844', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:58:45,608 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 16:58:45,609 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 16:58:45,609 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 16:58:45,609 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:58:45,609 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165844', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:58:45,613 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:58:45,613 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:58:45,614 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 16:58:45,617 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 16:58:45,617 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:58:45,618 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 16:58:45,618 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:58:45,618 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:58:45",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115165844 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:58:45,620 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 16:58:45,620 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 16:58:45,620 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:58:45,620 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165844', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:58:45,622 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:58:45,622 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 16:58:45,622 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 16:58:45,622 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 16:58:45,625 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 16:58:45,625 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:58:45,626 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 16:58:45,626 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:58:45,626 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:58:45",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'device_no': 1, 'serial_no': 2}, '检查': 'body'}" WHERE executed_history_id = 20170115165844 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:58:45,628 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 16:58:45,628 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 16:58:45,628 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:58:45,628 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165844', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:58:45,630 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:58:45,630 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 16:58:45,630 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:58:45,631 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:58:45,631 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 16:58:45,631 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 16:58:45,631 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 16:58:45,631 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 16:58:45,631 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 16:58:45,632 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 16:58:45,632 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 16:58:45,632 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 16:58:45,632 httpprotocol.py[line: 76] INFO: 请求头为：{'SerialNo': '[CaseStep.serial_no]', 'ProtocolVersion': '4.0', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'ProductVersion': '[global_product_version]'}
2017-01-15 16:58:46,011 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 16:58:46,011 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 16:58:46,011 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:58:43 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:58:46,012 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:58:46,012 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:58:46,012 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:58:46,014 global_function.py[line: 89] ERROR: 运行用例出错 'InterfaceUnittestTestCase' object has no attribute 'replace'
2017-01-15 16:58:46,022 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '执行用例出错 148')
2017-01-15 16:58:46,023 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 16:58:46,023 main.py[line: 115] INFO: 运行指定项目
2017-01-15 16:58:46,149 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 16:58:46,149 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 16:58:46,151 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 16:58:46,151 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 16:58:46,278 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 16:58:46,423 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 16:58:46,423 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 16:58:46,569 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['126', '88', '120', '76', '106', '114', '80', '102', '110', '93', '98'])
2017-01-15 16:58:46,689 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_last_name': 'Administrator', 'author_login': 'admin', 'is_open': '1', 'execution_type': '1', 'version': '1', 'steps': [{'active': '1', 'execution_type': '1', 'id': '181', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'expected_results': ''}, {'active': '1', 'execution_type': '1', 'id': '180', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'expected_results': ''}, {'active': '1', 'execution_type': '1', 'id': '128', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n'}], 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'id': '127', 'importance': '2', 'status': '1', 'full_tc_external_id': 'wecharno-12', 'name': 'test-n-免费领取优惠券', 'preconditions': '', 'author_id': '1', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'estimated_exec_duration': '', 'testcase_id': '126', 'tc_external_id': '12', 'updater_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '125', 'modification_ts': '2016-11-29 19:43:22', 'active': '1', 'layout': '1', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-26 15:06:38', 'node_order': '1000'}]
2017-01-15 16:58:46,805 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:58:46,806 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165844', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:58:46,807 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 16:58:46,807 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 16:58:46,807 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:58:46,807 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:58:46,807 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:58:46,807 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 16:58:46,813 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:58:46,813 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:58:46",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115165844 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:58:46,815 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 16:58:46,816 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:58:46,816 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:58:46,816 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165844', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:58:46,817 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:58:46,817 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:58:46,817 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 16:58:46,823 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:58:46,823 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:58:46",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115165844 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:58:46,824 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 16:58:46,825 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 16:58:46,825 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:58:46,825 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165844', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:58:46,826 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 16:58:46,826 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 16:58:46,826 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 16:58:46" WHERE executed_history_id = 20170115165844 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:58:46,965 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 16:58:47,225 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_last_name': 'Administrator', 'author_login': 'admin', 'is_open': '1', 'execution_type': '1', 'version': '1', 'steps': [{'active': '1', 'execution_type': '1', 'id': '175', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'id': '174', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'expected_results': ''}, {'active': '1', 'execution_type': '1', 'id': '90', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'id': '176', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '4', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'id': '177', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '5', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n'}], 'summary': '', 'id': '89', 'importance': '2', 'status': '1', 'full_tc_external_id': 'wecharno-4', 'name': 'test-n-把商品加入购物车', 'preconditions': '', 'author_id': '1', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'estimated_exec_duration': '', 'testcase_id': '88', 'tc_external_id': '4', 'updater_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '87', 'modification_ts': '2016-11-29 17:58:09', 'active': '1', 'layout': '1', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-20 12:07:40', 'node_order': '1000'}]
2017-01-15 16:58:47,353 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:58:47,353 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165844', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:58:47,357 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 16:58:47,358 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 16:58:47,358 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 16:58:47,358 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:58:47,358 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165844', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:58:47,359 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:58:47,359 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:58:47,360 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 16:58:47,360 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 16:58:47,364 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2017-01-15 16:58:47,364 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:58:47,364 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}]
2017-01-15 16:58:47,364 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:58:47,364 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:58:47",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115165844 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:58:47,366 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2017-01-15 16:58:47,367 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:58:47,367 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:58:47,367 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165844', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:58:47,368 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:58:47,369 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2017-01-15 16:58:47,369 casestep.py[line: 149] INFO: 转换后的参数体为：(167020,)
2017-01-15 16:58:47,369 mydb.py[line: 72] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2017-01-15 16:58:48,112 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 16:58:48,112 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:58:47",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '\u53c2\u6570': [167020]}", expected_results="" WHERE executed_history_id = 20170115165844 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:58:48,114 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2017-01-15 16:58:48,114 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2017-01-15 16:58:48,115 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:58:48,115 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165844', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:58:48,116 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:58:48,117 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:58:48,117 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:58:48,117 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:58:48,117 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', 26838), ('standardId', 'undefined'), ('amount', 1), ('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 16:58:48,117 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:58:48,118 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 16:58:48,118 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2017-01-15 16:58:48,118 httpprotocol.py[line: 75] INFO: 参数为：b'mallGoodsId=26838&standardId=undefined&amount=1&serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2017-01-15 16:58:48,118 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 16:58:49,003 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:58:49,003 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"加入购物车失败","attach":null}
2017-01-15 16:58:49,003 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:58:46 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:58:49,003 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:58:49,003 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:58:49,003 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:59:24,210 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 16:59:24,211 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 16:59:24,226 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 16:59:24,229 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 16:59:24,282 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 16:59:24,282 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 16:59:24,283 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 16:59:24,283 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 16:59:24,284 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 16:59:24,285 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 16:59:24,285 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 16:59:24,426 global_function.py[line: 19] INFO: 获取测试用例信息 [{'tc_external_id': '1', 'author_first_name': 'Testlink', 'id': '149', 'testsuite_id': '147', 'updater_id': '1', 'summary': '', 'estimated_exec_duration': '', 'author_id': '1', 'author_last_name': 'Administrator', 'active': '1', 'author_login': 'admin', 'modification_ts': '2016-11-30 15:41:36', 'testcase_id': '148', 'steps': [{'step_number': '1', 'id': '183', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n'}, {'step_number': '2', 'id': '182', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n'}, {'step_number': '3', 'id': '150', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n'}], 'is_open': '1', 'node_order': '1000', 'layout': '1', 'name': 'test-n-登陆掌贝pos机', 'updater_first_name': 'Testlink', 'updater_last_name': 'Administrator', 'updater_login': 'admin', 'preconditions': '<p>\n\t初始化用例</p>\n', 'full_tc_external_id': 'pj_pos-1', 'status': '1', 'creation_ts': '2016-07-27 18:32:10', 'execution_type': '1', 'version': '1', 'importance': '2'}]
2017-01-15 16:59:24,542 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 16:59:25,418 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:59:25,418 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165924', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:59:25,420 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 16:59:25,420 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 16:59:25,421 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 16:59:25,421 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:59:25,421 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165924', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:59:25,423 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:59:25,424 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:59:25,424 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 16:59:25,527 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 16:59:25,527 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:59:25,528 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 16:59:25,528 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 16:59:25,528 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:59:25",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'检查': 'body', '输出': {'branch_id': 1}}" WHERE executed_history_id = 20170115165924 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:59:25,530 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 16:59:25,530 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 16:59:25,531 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:59:25,531 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165924', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:59:25,533 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 16:59:25,534 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 16:59:25,534 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 16:59:25,534 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 16:59:25,635 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 16:59:25,635 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 16:59:25,635 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 16:59:25,636 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 16:59:25,636 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 16:59:25",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'检查': 'body', '输出': {'device_no': 1, 'serial_no': 2}}" WHERE executed_history_id = 20170115165924 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:59:25,637 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 16:59:25,638 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 16:59:25,638 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:59:25,638 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165924', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:59:25,639 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 16:59:25,639 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 16:59:25,639 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:59:25,639 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:59:25,640 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 16:59:25,640 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 16:59:25,640 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 16:59:25,640 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 16:59:25,640 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 16:59:25,640 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 16:59:25,640 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 16:59:25,640 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 16:59:25,640 httpprotocol.py[line: 76] INFO: 请求头为：{'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'SerialNo': '[CaseStep.serial_no]'}
2017-01-15 16:59:26,040 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 16:59:26,040 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 16:59:26,040 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:59:23 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:59:26,040 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:59:26,041 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 16:59:26,041 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 16:59:26,042 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 16:59:26,042 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 16:59:26,042 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 16:59:25",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'ProtocolVersion': '4.0', 'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8', 'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'检查': 'body', '匹配规则': '键值相等', '输出': {'OperatorId': {'operator': {'id': 'value'}}, 'Token': {'token': 'value'}}, '条件': [{'模式': {'success': True}, '消息': '登录失败,success不为true'}, {'模式': {'message': '成功'}, '消息': 'message不为成功'}, {'模式': {'code': '4001'}, '消息': 'code不为4001'}]}" WHERE executed_history_id = 20170115165924 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:59:26,044 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 16:59:26,044 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 16:59:25" WHERE executed_history_id = 20170115165924 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 16:59:26,046 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 16:59:26,046 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '')
2017-01-15 16:59:26,046 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 16:59:26,046 main.py[line: 115] INFO: 运行指定项目
2017-01-15 16:59:26,177 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 16:59:26,177 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 16:59:26,179 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 16:59:26,179 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 16:59:26,306 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 16:59:26,462 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 16:59:26,462 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 16:59:26,604 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['114', '102', '76', '110', '93', '106', '120', '126', '88', '98', '80'])
2017-01-15 16:59:26,741 testplan.py[line: 45] INFO: 获取测试用例信息 [{'tc_external_id': '10', 'author_first_name': 'Testlink', 'id': '115', 'testsuite_id': '113', 'updater_id': '1', 'summary': '', 'estimated_exec_duration': '', 'author_id': '1', 'author_last_name': 'Administrator', 'active': '1', 'author_login': 'admin', 'modification_ts': '2016-11-29 17:52:17', 'testcase_id': '114', 'steps': [{'step_number': '1', 'id': '116', 'active': '1', 'execution_type': '1', 'expected_results': '', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n'}, {'step_number': '2', 'id': '117', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n'}], 'is_open': '1', 'node_order': '1000', 'layout': '1', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'updater_first_name': 'Testlink', 'updater_last_name': 'Administrator', 'updater_login': 'admin', 'preconditions': '', 'full_tc_external_id': 'wecharno-10', 'status': '1', 'creation_ts': '2016-07-25 15:02:41', 'execution_type': '1', 'version': '1', 'importance': '2'}]
2017-01-15 16:59:26,880 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 16:59:26,880 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165924', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 16:59:26,881 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 16:59:26,881 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 16:59:26,881 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 16:59:26,881 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:59:26,882 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165924', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:59:26,883 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:59:27,042 global_function.py[line: 19] INFO: 获取测试用例信息 [{'tc_external_id': '8', 'author_first_name': 'Testlink', 'id': '107', 'testsuite_id': '105', 'updater_id': '1', 'summary': '', 'estimated_exec_duration': '', 'author_id': '1', 'author_last_name': 'Administrator', 'active': '1', 'author_login': 'admin', 'modification_ts': '2016-11-29 17:33:09', 'testcase_id': '106', 'steps': [{'step_number': '1', 'id': '108', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n'}], 'is_open': '1', 'node_order': '1000', 'layout': '1', 'name': 'test-n-创建储值卡支付订单', 'updater_first_name': 'Testlink', 'updater_last_name': 'Administrator', 'updater_login': 'admin', 'preconditions': '', 'full_tc_external_id': 'wecharno-8', 'status': '1', 'creation_ts': '2016-07-21 11:26:32', 'execution_type': '1', 'version': '1', 'importance': '2'}]
2017-01-15 16:59:27,184 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 16:59:27,444 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 16:59:27,444 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165924', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 16:59:27,445 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 16:59:27,445 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 16:59:27,446 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 16:59:27,446 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 16:59:27,446 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115165924', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 16:59:27,447 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 16:59:27,447 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 16:59:27,447 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 16:59:27,447 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 16:59:27,447 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 16:59:27,448 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:59:27,448 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 16:59:27,448 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 16:59:27,448 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 16:59:27,448 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 16:59:27,448 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}
2017-01-15 16:59:27,491 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 16:59:27,491 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 16:59:27,491 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 08:59:25 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 16:59:27,491 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 16:59:27,491 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 16:59:27,492 testcase.py[line: 133] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 16:59:27,492 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 16:59:27,492 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 16:59:27",step_action="{'\u8bf7\u6c42\u5934': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'检查': 'body', '匹配规则': '包含字符串', '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}]}" WHERE executed_history_id = 20170115165924 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:59:27,494 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 16:59:27,495 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 16:59:27" WHERE executed_history_id = 20170115165924 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 16:59:27,497 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 17:00:13,904 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 17:00:13,905 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 17:00:13,923 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 17:00:13,926 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 17:00:13,981 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 17:00:13,981 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 17:00:13,983 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 17:00:13,983 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 17:00:13,983 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 17:00:13,985 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 17:00:13,985 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 17:00:14,191 global_function.py[line: 19] INFO: 获取测试用例信息 [{'name': 'test-n-登陆掌贝pos机', 'layout': '1', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'tc_external_id': '1', 'steps': [{'id': '183', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'active': '1'}, {'id': '182', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'active': '1'}, {'id': '150', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'step_number': '3', 'active': '1'}], 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-30 15:41:36', 'version': '1', 'testsuite_id': '147', 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'summary': '', 'updater_first_name': 'Testlink', 'author_last_name': 'Administrator', 'status': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'full_tc_external_id': 'pj_pos-1', 'execution_type': '1', 'importance': '2', 'testcase_id': '148', 'is_open': '1', 'node_order': '1000', 'id': '149', 'estimated_exec_duration': '', 'active': '1', 'creation_ts': '2016-07-27 18:32:10'}]
2017-01-15 17:00:14,316 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 17:00:15,316 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:00:15,317 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170013', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 17:00:15,319 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 17:00:15,319 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 17:00:15,320 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 17:00:15,320 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:00:15,320 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170013', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:00:15,323 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:00:15,324 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:00:15,324 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 17:00:15,328 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 17:00:15,329 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:00:15,329 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 17:00:15,329 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 17:00:15,329 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:00:15",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'检查': 'body', '输出': {'branch_id': 1}}" WHERE executed_history_id = 20170115170013 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:00:15,332 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 17:00:15,332 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 17:00:15,332 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:00:15,332 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170013', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:00:15,335 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:00:15,335 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 17:00:15,336 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 17:00:15,336 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 17:00:15,339 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 17:00:15,339 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:00:15,339 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 17:00:15,340 testcase.py[line: 161] INFO: 正在更新步骤执行结果
2017-01-15 17:00:15,340 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:00:15",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'检查': 'body', '输出': {'device_no': 1, 'serial_no': 2}}" WHERE executed_history_id = 20170115170013 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:00:15,341 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 17:00:15,342 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 17:00:15,342 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:00:15,342 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170013', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:00:15,343 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:00:15,344 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 17:00:15,344 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:00:15,344 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:00:15,344 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 17:00:15,345 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 17:00:15,345 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 17:00:15,345 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 17:00:15,345 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 17:00:15,346 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 17:00:15,346 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 17:00:15,346 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 17:00:15,346 httpprotocol.py[line: 76] INFO: 请求头为：{'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8', 'ProtocolVersion': '4.0', 'ProductVersion': '[global_product_version]', 'SerialNo': '[CaseStep.serial_no]'}
2017-01-15 17:00:16,173 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 17:00:16,173 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 17:00:16,173 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:00:13 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:00:16,174 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:00:16,174 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:00:16,174 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:00:16,175 testcase.py[line: 132] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 17:00:16,175 testcase.py[line: 139] INFO: 正在更新步骤执行结果
2017-01-15 17:00:16,175 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 17:00:15",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8', 'ProtocolVersion': '4.0', 'ProductVersion': '[global_product_version]', 'SerialNo': '[CaseStep.serial_no]'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'条件': [{'消息': '登录失败,success不为true', '模式': {'success': True}}, {'消息': 'message不为成功', '模式': {'message': '成功'}}, {'消息': 'code不为4001', '模式': {'code': '4001'}}], '检查': 'body', '输出': {'OperatorId': {'operator': {'id': 'value'}}, 'Token': {'token': 'value'}}, '匹配规则': '键值相等'}" WHERE executed_history_id = 20170115170013 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:00:16,177 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:00:16,177 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:00:15" WHERE executed_history_id = 20170115170013 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:00:16,178 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 17:00:16,178 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '')
2017-01-15 17:00:16,178 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 17:00:16,178 main.py[line: 115] INFO: 运行指定项目
2017-01-15 17:00:16,312 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 17:00:16,312 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 17:00:16,314 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 17:00:16,314 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 17:00:16,446 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 17:00:16,594 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 17:00:16,595 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 17:00:16,773 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['110', '106', '114', '126', '98', '120', '88', '76', '80', '102', '93'])
2017-01-15 17:00:16,923 testplan.py[line: 45] INFO: 获取测试用例信息 [{'name': 'test-n-储值卡支付-不使用优惠，会员账户支付', 'layout': '1', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'tc_external_id': '9', 'steps': [{'id': '112', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'actions': '<p>\n\t{<br />\n\t&quot;style&quot;:&quot;testcase&quot;,<br />\n\t<br />\n\t&quot;testcase_id&quot;:114,<br />\n\t<br />\n\t&quot;testcase_name&quot;:&quot;test-n-提交储值卡支付订单-pay5重定向&quot;<br />\n\t}</p>\n', 'step_number': '1', 'active': '1'}, {'id': '119', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;}</p>\n', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_without_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:-1,&quot;yhCardType&quot;:-1}<br />\n\t}</p>\n', 'step_number': '3', 'active': '1'}], 'updater_last_name': 'Administrator', 'modification_ts': '2016-07-29 17:13:06', 'version': '1', 'testsuite_id': '109', 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n', 'updater_first_name': 'Testlink', 'author_last_name': 'Administrator', 'status': '1', 'preconditions': '', 'full_tc_external_id': 'wecharno-9', 'execution_type': '1', 'importance': '2', 'testcase_id': '110', 'is_open': '1', 'node_order': '2', 'id': '111', 'estimated_exec_duration': '', 'active': '0', 'creation_ts': '2016-07-22 14:48:17'}]
2017-01-15 17:00:17,057 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:00:17,057 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170013', 110, 'test-n-储值卡支付-不使用优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:00:17,060 testplan.py[line: 72] INFO: 开始执行测试用例[id=110，name=test-n-储值卡支付-不使用优惠，会员账户支付]
2017-01-15 17:00:17,060 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-不使用优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 17:00:17,060 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:00:17,060 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 17:00:17" WHERE executed_history_id = 20170115170013 AND testcase_id = 110 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:00:17,185 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=110]的执行结果
2017-01-15 17:00:17,324 testplan.py[line: 45] INFO: 获取测试用例信息 [{'name': 'test-n-创建储值卡支付订单', 'layout': '1', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'tc_external_id': '8', 'steps': [{'id': '108', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'active': '1'}], 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:33:09', 'version': '1', 'testsuite_id': '105', 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'summary': '', 'updater_first_name': 'Testlink', 'author_last_name': 'Administrator', 'status': '1', 'preconditions': '', 'full_tc_external_id': 'wecharno-8', 'execution_type': '1', 'importance': '2', 'testcase_id': '106', 'is_open': '1', 'node_order': '1000', 'id': '107', 'estimated_exec_duration': '', 'active': '1', 'creation_ts': '2016-07-21 11:26:32'}]
2017-01-15 17:00:17,450 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:00:17,450 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170013', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:00:17,451 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:00:17,451 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:00:17,452 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:00:17,452 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:00:17,452 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170013', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:00:17,454 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:00:17,454 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:00:17,455 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:00:17,455 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:00:17,455 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:00:17,456 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:00:17,456 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:00:17,456 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:00:17,457 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:00:17,457 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:00:17,457 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:00:17,535 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:00:17,535 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:00:17,536 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:00:15 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:00:17,536 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:00:17,536 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:00:17,536 testcase.py[line: 132] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:00:17,536 testcase.py[line: 139] INFO: 正在更新步骤执行结果
2017-01-15 17:00:17,536 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:00:17",step_action="{'\u8bf7\u6c42\u5934': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '检查': 'body', '输出': {'success': ''success':(.+?),', 'attach': 'attach':'(.+?)''}, '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115170013 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:00:17,539 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:00:17,539 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:00:17" WHERE executed_history_id = 20170115170013 AND testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:00:17,707 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=106]的执行结果
2017-01-15 17:00:18,004 testplan.py[line: 45] INFO: 获取测试用例信息 [{'name': 'test-n-提交储值卡支付订单-pay5重定向', 'layout': '1', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'tc_external_id': '10', 'steps': [{'id': '116', 'execution_type': '1', 'expected_results': '', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'step_number': '1', 'active': '1'}, {'id': '117', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2', 'active': '1'}], 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:52:17', 'version': '1', 'testsuite_id': '113', 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'summary': '', 'updater_first_name': 'Testlink', 'author_last_name': 'Administrator', 'status': '1', 'preconditions': '', 'full_tc_external_id': 'wecharno-10', 'execution_type': '1', 'importance': '2', 'testcase_id': '114', 'is_open': '1', 'node_order': '1000', 'id': '115', 'estimated_exec_duration': '', 'active': '1', 'creation_ts': '2016-07-25 15:02:41'}]
2017-01-15 17:00:18,122 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:00:18,122 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170013', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:00:18,124 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 17:00:18,124 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 17:00:18,124 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:00:18,124 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:00:18,124 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170013', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:00:18,125 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:00:18,257 global_function.py[line: 19] INFO: 获取测试用例信息 [{'name': 'test-n-创建储值卡支付订单', 'layout': '1', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'tc_external_id': '8', 'steps': [{'id': '108', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'active': '1'}], 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:33:09', 'version': '1', 'testsuite_id': '105', 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'summary': '', 'updater_first_name': 'Testlink', 'author_last_name': 'Administrator', 'status': '1', 'preconditions': '', 'full_tc_external_id': 'wecharno-8', 'execution_type': '1', 'importance': '2', 'testcase_id': '106', 'is_open': '1', 'node_order': '1000', 'id': '107', 'estimated_exec_duration': '', 'active': '1', 'creation_ts': '2016-07-21 11:26:32'}]
2017-01-15 17:00:18,381 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 17:00:18,645 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:00:18,646 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170013', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 17:00:18,650 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:00:18,650 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:00:18,650 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:00:18,651 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:00:18,651 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170013', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:00:18,653 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:00:18,653 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:00:18,653 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:00:18,653 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:00:18,653 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:00:18,653 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:00:18,654 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:00:18,654 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:00:18,654 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:00:18,654 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:00:18,654 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:00:18,696 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:00:18,696 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:00:18,697 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:00:16 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:00:18,697 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:00:18,697 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:00:18,697 testcase.py[line: 132] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:00:18,698 testcase.py[line: 139] INFO: 正在更新步骤执行结果
2017-01-15 17:00:18,698 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:00:18",step_action="{'\u8bf7\u6c42\u5934': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '检查': 'body', '输出': {'success': ''success':(.+?),', 'attach': 'attach':'(.+?)''}, '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115170013 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:00:18,699 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:00:18,700 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:00:18" WHERE executed_history_id = 20170115170013 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:00:18,701 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 17:01:19,951 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 17:01:19,951 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 17:01:19,968 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 17:01:19,971 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 17:01:20,038 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 17:01:20,038 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 17:01:20,040 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 17:01:20,041 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 17:01:20,043 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 17:01:20,045 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 17:01:20,045 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 17:01:20,190 global_function.py[line: 19] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'testcase_id': '148', 'modification_ts': '2016-11-30 15:41:36', 'name': 'test-n-登陆掌贝pos机', 'execution_type': '1', 'id': '149', 'steps': [{'active': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'id': '183', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n'}, {'active': '1', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'id': '182', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n'}, {'active': '1', 'step_number': '3', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'id': '150', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n'}], 'version': '1', 'importance': '2', 'updater_last_name': 'Administrator', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-27 18:32:10', 'is_open': '1', 'author_login': 'admin', 'status': '1', 'tc_external_id': '1', 'author_id': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'updater_id': '1', 'summary': '', 'layout': '1', 'author_last_name': 'Administrator', 'active': '1', 'full_tc_external_id': 'pj_pos-1', 'updater_login': 'admin', 'node_order': '1000', 'testsuite_id': '147', 'estimated_exec_duration': ''}]
2017-01-15 17:01:20,317 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 17:01:21,085 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:01:21,085 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 17:01:21,091 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 17:01:21,091 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 17:01:21,091 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 17:01:21,092 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:21,092 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:21,094 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:01:21,094 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:21,094 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 17:01:21,097 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 17:01:21,097 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:01:21,097 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 17:01:21,097 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:01:21,098 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:01:21",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115170119 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:01:21,099 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 17:01:21,099 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 17:01:21,099 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:21,099 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:21,101 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:01:21,101 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 17:01:21,101 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 17:01:21,101 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 17:01:21,105 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 17:01:21,105 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:01:21,105 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 17:01:21,105 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:01:21,105 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:01:21",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'serial_no': 2, 'device_no': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115170119 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:01:21,107 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 17:01:21,107 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 17:01:21,107 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:21,107 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:21,108 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:01:21,109 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 17:01:21,109 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:21,109 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:21,109 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 17:01:21,109 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 17:01:21,109 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 17:01:21,109 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 17:01:21,109 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 17:01:21,110 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 17:01:21,110 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 17:01:21,110 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 17:01:21,110 httpprotocol.py[line: 76] INFO: 请求头为：{'ProductVersion': '[global_product_version]', 'Content-Type': 'application/json;charset=utf-8', 'ProtocolVersion': '4.0', 'SerialNo': '[CaseStep.serial_no]', 'DeviceId': '[CaseStep.device_no]'}
2017-01-15 17:01:21,509 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 17:01:21,509 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 17:01:21,509 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:01:19 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:01:21,509 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:01:21,509 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:01:21,509 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:01:21,511 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 17:01:21,511 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:01:21,511 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 17:01:21",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'SerialNo': '[CaseStep.serial_no]'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'条件': [{'消息': '登录失败,success不为true', '模式': {'success': True}}, {'消息': 'message不为成功', '模式': {'message': '成功'}}, {'消息': 'code不为4001', '模式': {'code': '4001'}}], '匹配规则': '键值相等', '输出': {'Token': {'token': 'value'}, 'OperatorId': {'operator': {'id': 'value'}}}, '检查': 'body'}" WHERE executed_history_id = 20170115170119 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:01:21,513 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:01:21,513 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:01:21" WHERE executed_history_id = 20170115170119 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:01:21,514 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 17:01:21,514 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '')
2017-01-15 17:01:21,514 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 17:01:21,515 main.py[line: 115] INFO: 运行指定项目
2017-01-15 17:01:21,663 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 17:01:21,664 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 17:01:21,665 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 17:01:21,666 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 17:01:21,796 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 17:01:21,917 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 17:01:21,917 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 17:01:22,047 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['126', '98', '88', '110', '76', '106', '102', '80', '114', '93', '120'])
2017-01-15 17:01:22,171 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'testcase_id': '126', 'modification_ts': '2016-11-29 19:43:22', 'name': 'test-n-免费领取优惠券', 'execution_type': '1', 'id': '127', 'steps': [{'active': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'id': '181', 'expected_results': ''}, {'active': '1', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'id': '180', 'expected_results': ''}, {'active': '1', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n', 'execution_type': '1', 'id': '128', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n'}], 'version': '1', 'importance': '2', 'updater_last_name': 'Administrator', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-26 15:06:38', 'is_open': '1', 'author_login': 'admin', 'status': '1', 'tc_external_id': '12', 'author_id': '1', 'preconditions': '', 'updater_id': '1', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'layout': '1', 'author_last_name': 'Administrator', 'active': '1', 'full_tc_external_id': 'wecharno-12', 'updater_login': 'admin', 'node_order': '1000', 'testsuite_id': '125', 'estimated_exec_duration': ''}]
2017-01-15 17:01:22,283 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:01:22,283 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:01:22,285 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 17:01:22,286 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 17:01:22,286 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:01:22,286 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:01:22,286 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:22,286 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 17:01:22,292 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:01:22,292 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:01:22",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115170119 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:22,296 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 17:01:22,296 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:01:22,296 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:22,296 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:22,298 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:01:22,298 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:22,298 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 17:01:22,304 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:01:22,304 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:01:22",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115170119 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:22,305 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 17:01:22,305 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 17:01:22,305 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:22,305 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:22,306 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 17:01:22,306 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:01:22,306 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 17:01:22" WHERE executed_history_id = 20170115170119 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:22,419 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 17:01:22,742 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'testcase_id': '98', 'modification_ts': '2016-11-29 18:13:45', 'name': 'test-n-查看购物车商品列表', 'execution_type': '1', 'id': '99', 'steps': [{'active': '1', 'step_number': '2', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'execution_type': '1', 'id': '101', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;code&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;200&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n'}], 'version': '1', 'importance': '2', 'updater_last_name': 'Administrator', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-20 15:50:42', 'is_open': '1', 'author_login': 'admin', 'status': '1', 'tc_external_id': '6', 'author_id': '1', 'preconditions': '', 'updater_id': '1', 'summary': '', 'layout': '1', 'author_last_name': 'Administrator', 'active': '1', 'full_tc_external_id': 'wecharno-6', 'updater_login': 'admin', 'node_order': '1000', 'testsuite_id': '97', 'estimated_exec_duration': ''}]
2017-01-15 17:01:22,873 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:01:22,874 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 98, 'test-n-查看购物车商品列表', '微商城-查看购物车商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:01:22,875 testplan.py[line: 72] INFO: 开始执行测试用例[id=98，name=test-n-查看购物车商品列表]
2017-01-15 17:01:22,876 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2017-01-15 17:01:22,876 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}
2017-01-15 17:01:22,876 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:22,876 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 98, 'test-n-查看购物车商品列表', 'plan1_of_wechatno', 'pj_wechatno', 101, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:22,877 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:01:22,877 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:01:22,878 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:01:22,878 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:01:22,878 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 17:01:22,878 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:22,878 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:01:22,878 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2017-01-15 17:01:22,878 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:01:22,897 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:01:22,898 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"code":"4000","message":"Server Error"}
2017-01-15 17:01:22,899 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:01:20 GMT'), ('Content-Type', 'application/json;charset=ISO-8859-1'), ('Content-Length', '56'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:01:22,899 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:01:22,899 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：200
2017-01-15 17:01:22,899 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:01:22,899 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:01:22,899 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:01:22",step_action="{'\u65b9\u6cd5': 'get', 'url': '/cartlist?', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'条件': [{'消息': '把商品移出购物车中失败', '模式': '200'}], '匹配规则': '包含字符串', '检查': 'code'}" WHERE executed_history_id = 20170115170119 AND testcase_id = 98 AND step_id = 101 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:22,901 testcase.py[line: 165] INFO: 测试用例[id=98, name=test-n-查看购物车商品列表]执行成功
2017-01-15 17:01:22,901 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:01:22,901 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 17:01:22" WHERE executed_history_id = 20170115170119 AND testcase_id = 98 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:23,017 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=98]的执行结果
2017-01-15 17:01:23,256 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'testcase_id': '88', 'modification_ts': '2016-11-29 17:58:09', 'name': 'test-n-把商品加入购物车', 'execution_type': '1', 'id': '89', 'steps': [{'active': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'id': '175', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'id': '174', 'expected_results': ''}, {'active': '1', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'id': '90', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'step_number': '4', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'id': '176', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n'}, {'active': '1', 'step_number': '5', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'execution_type': '1', 'id': '177', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n'}], 'version': '1', 'importance': '2', 'updater_last_name': 'Administrator', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-20 12:07:40', 'is_open': '1', 'author_login': 'admin', 'status': '1', 'tc_external_id': '4', 'author_id': '1', 'preconditions': '', 'updater_id': '1', 'summary': '', 'layout': '1', 'author_last_name': 'Administrator', 'active': '1', 'full_tc_external_id': 'wecharno-4', 'updater_login': 'admin', 'node_order': '1000', 'testsuite_id': '87', 'estimated_exec_duration': ''}]
2017-01-15 17:01:23,368 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:01:23,368 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:01:23,369 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 17:01:23,369 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 17:01:23,369 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 17:01:23,369 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:23,370 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:23,371 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:01:23,371 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:01:23,371 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 17:01:23,371 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 17:01:23,373 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2017-01-15 17:01:23,373 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:01:23,374 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}]
2017-01-15 17:01:23,374 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:01:23,374 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:01:23",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115170119 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:23,375 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2017-01-15 17:01:23,375 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:01:23,375 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:23,375 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:23,376 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:01:23,376 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2017-01-15 17:01:23,377 casestep.py[line: 149] INFO: 转换后的参数体为：(167020,)
2017-01-15 17:01:23,377 mydb.py[line: 72] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2017-01-15 17:01:23,702 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:01:23,702 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:01:23",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '\u53c2\u6570': [167020]}", expected_results="" WHERE executed_history_id = 20170115170119 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:23,704 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2017-01-15 17:01:23,704 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2017-01-15 17:01:23,705 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:23,705 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:23,706 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:01:23,706 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:01:23,706 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:01:23,706 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:01:23,707 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', 26838), ('standardId', 'undefined'), ('amount', 1), ('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 17:01:23,707 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:23,707 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:01:23,707 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2017-01-15 17:01:23,707 httpprotocol.py[line: 75] INFO: 参数为：b'mallGoodsId=26838&standardId=undefined&amount=1&serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2017-01-15 17:01:23,707 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:01:24,414 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:01:24,415 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"加入购物车失败","attach":null}
2017-01-15 17:01:24,415 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:01:22 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:01:24,415 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:01:24,415 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:01:24,415 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:01:24,416 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 17:01:24,417 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:01:24,417 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 把商品加如购物车失败,success不为true", protocol_method="post", runtime="2017-01-15 17:01:23",step_action="{'\u65b9\u6cd5': 'post', 'url': '/addtocart', '\u53c2\u6570': {'mallGoodsId': 26838, 'standardId': 'undefined', 'amount': 1, 'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'条件': [{'消息': '把商品加如购物车失败,success不为true', '模式': {'success': True}}], '匹配规则': '键值相等', '检查': 'body'}" WHERE executed_history_id = 20170115170119 AND testcase_id = 88 AND step_id = 90 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:24,419 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:01:24,420 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:01:23" WHERE executed_history_id = 20170115170119 AND testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:24,572 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=88]的执行结果
2017-01-15 17:01:24,853 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'testcase_id': '110', 'modification_ts': '2016-07-29 17:13:06', 'name': 'test-n-储值卡支付-不使用优惠，会员账户支付', 'execution_type': '1', 'id': '111', 'steps': [{'active': '1', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;style&quot;:&quot;testcase&quot;,<br />\n\t<br />\n\t&quot;testcase_id&quot;:114,<br />\n\t<br />\n\t&quot;testcase_name&quot;:&quot;test-n-提交储值卡支付订单-pay5重定向&quot;<br />\n\t}</p>\n', 'execution_type': '1', 'id': '112', 'expected_results': '<p>\n\t{&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n'}, {'active': '1', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_without_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:-1,&quot;yhCardType&quot;:-1}<br />\n\t}</p>\n', 'execution_type': '1', 'id': '119', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;}</p>\n'}], 'version': '1', 'importance': '2', 'updater_last_name': 'Administrator', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-22 14:48:17', 'is_open': '1', 'author_login': 'admin', 'status': '1', 'tc_external_id': '9', 'author_id': '1', 'preconditions': '', 'updater_id': '1', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n', 'layout': '1', 'author_last_name': 'Administrator', 'active': '0', 'full_tc_external_id': 'wecharno-9', 'updater_login': 'admin', 'node_order': '2', 'testsuite_id': '109', 'estimated_exec_duration': ''}]
2017-01-15 17:01:24,969 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:01:24,969 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 110, 'test-n-储值卡支付-不使用优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:01:24,970 testplan.py[line: 72] INFO: 开始执行测试用例[id=110，name=test-n-储值卡支付-不使用优惠，会员账户支付]
2017-01-15 17:01:24,970 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-不使用优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 17:01:24,971 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:01:24,971 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 17:01:24" WHERE executed_history_id = 20170115170119 AND testcase_id = 110 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:25,111 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=110]的执行结果
2017-01-15 17:01:25,230 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'testcase_id': '76', 'modification_ts': '2016-11-29 18:17:12', 'name': 'test-n-显示默认页面', 'execution_type': '2', 'id': '77', 'steps': [{'active': '1', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/plist&quot;,<br />\n\t&quot;参数&quot;:{&quot;page_size&quot;:&quot;10&quot;,&quot;page_no&quot;:&quot;1&quot;,&quot;cateIds&quot;:&quot;&quot;,&quot;orderBy&quot;:&quot;&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;name&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '2', 'id': '78', 'expected_results': '<p>\n\t｛&ldquo;检查&rdquo;:&ldquo;BODY&rdquo;，</p>\n<p>\n\t&ldquo;匹配规则&rdquo;：&ldquo;包含字符串&rdquo;，</p>\n<p>\n\t&ldquo;条件&rdquo;：【｛&ldquo;模式&rdquo;：&ldquo;\\&quot;currentPage\\&quot;:1&rdquo;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝，｛&ldquo;模式&rdquo;：&ldquo;\\&quot;pageStartRow\\&quot;:0&quot;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝】</p>\n<p>\n\t｝</p>\n'}], 'version': '1', 'importance': '2', 'updater_last_name': 'Administrator', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-18 15:52:00', 'is_open': '1', 'author_login': 'admin', 'status': '1', 'tc_external_id': '1', 'author_id': '1', 'preconditions': '', 'updater_id': '1', 'summary': '', 'layout': '1', 'author_last_name': 'Administrator', 'active': '1', 'full_tc_external_id': 'wecharno-1', 'updater_login': 'admin', 'node_order': '1000', 'testsuite_id': '75', 'estimated_exec_duration': ''}]
2017-01-15 17:01:25,341 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:01:25,341 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 76, 'test-n-显示默认页面', '微商城-显示商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:01:25,342 testplan.py[line: 72] INFO: 开始执行测试用例[id=76，name=test-n-显示默认页面]
2017-01-15 17:01:25,342 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}
2017-01-15 17:01:25,342 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\"currentPage\":1","消息":"接口返回错误"},{"模式":"\"pageStartRow\":0","消息":"接口返回错误"}]}
2017-01-15 17:01:25,342 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:25,342 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 76, 'test-n-显示默认页面', 'plan1_of_wechatno', 'pj_wechatno', 78, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}', '{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\\"currentPage\\":1","消息":"接口返回错误"},{"模式":"\\"pageStartRow\\":0","消息":"接口返回错误"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:25,345 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:01:25,345 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:01:25,345 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:01:25,345 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('page_size', '10'), ('page_no', '1'), ('cateIds', ''), ('orderBy', ''), ('serial', '10549840601068216320'), ('name', '')])
2017-01-15 17:01:25,345 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:25,345 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:01:25,346 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/plist
2017-01-15 17:01:25,346 httpprotocol.py[line: 75] INFO: 参数为：b'page_size=10&page_no=1&cateIds=&orderBy=&serial=10549840601068216320&name='
2017-01-15 17:01:25,346 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:01:25,910 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:01:25,910 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"dataList":[{"id":27105,"name":"微信支付测试-二级","privateSerial":null,"price":0,"oriPrice":0,"description":"微信支付测试-二级","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/30/b9e21dc4-6cf2-4923-9ec7-4259ecea09c1.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":39,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27090,"name":"测试1222-3","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ea123913-89df-4384-929e-158617f67cbe.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":60,"standardLowPrice":980.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27072,"name":"二级规格1129-2","privateSerial":null,"price":0,"oriPrice":0,"description":"二级规格1129-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/29/9ecf031d-e9bd-427e-b147-cb4a1f8fe5d3.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":25,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27087,"name":"1221-1","privateSerial":null,"price":0,"oriPrice":0,"description":"1221-1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/21/1e844fc5-ee37-4393-97af-2a220971ef1f.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":48,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27040,"name":"一级变三级（改bug前）","privateSerial":null,"price":0,"oriPrice":0,"description":"一级规格1109-2一级规格1109-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/09/23b306d5-384d-4b3b-a4f7-a757d9fc0635.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":135,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27088,"name":"测试1222","privateSerial":null,"price":8,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ca612435-f6e1-4f0d-bc18-61e558e8f720.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":2341,"istop":0,"soldCount":4,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":7,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27089,"name":"测试1222-2","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/37bc7e08-1a2f-4c88-9542-ec5613686d7e.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":26,"standardLowPrice":2100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26955,"name":"乐视超级电视","privateSerial":null,"price":0,"oriPrice":0,"description":"乐视超级电视","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/10/31/3d3ca77e-d010-42f3-804f-bc8a563ec753.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":88,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26971,"name":"多级规格测试010","privateSerial":null,"price":0,"oriPrice":0,"description":"多级规格测试010","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/01/fface01c-5d06-400e-bf7b-2ae2fd64c858.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":15,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27057,"name":"裙子","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/13dbced7-faae-4e13-aebe-6f69d72dc7e0.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":101,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false}],"pageInfo":{"pageSize":10,"currentPage":1,"totalPages":5,"totalRows":47,"pageStartRow":0,"pageEndRow":10,"pagination":true,"hasNextPage":true,"hasPreviousPage":false,"params":null,"needCount":true}}
2017-01-15 17:01:25,912 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:01:23 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:01:25,912 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:01:25,912 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2017-01-15 17:01:25,912 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2017-01-15 17:01:25,912 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:01:25,913 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:01:25,913 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2017-01-15 17:01:25",step_action="{'\u65b9\u6cd5': 'post', 'url': '/goods/plist', '\u53c2\u6570': {'page_size': '10', 'page_no': '1', 'cateIds': '', 'orderBy': '', 'serial': '10549840601068216320', 'name': ''}}", expected_results="{'条件': [{'消息': '接口返回错误', '模式': ''currentPage':1'}, {'消息': '接口返回错误', '模式': ''pageStartRow':0'}], '匹配规则': '包含字符串', '检查': 'BODY'}" WHERE executed_history_id = 20170115170119 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:25,914 testcase.py[line: 165] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2017-01-15 17:01:25,914 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:01:25,914 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 17:01:25" WHERE executed_history_id = 20170115170119 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:26,027 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2017-01-15 17:01:26,269 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'testcase_id': '106', 'modification_ts': '2016-11-29 17:33:09', 'name': 'test-n-创建储值卡支付订单', 'execution_type': '1', 'id': '107', 'steps': [{'active': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'id': '108', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n'}], 'version': '1', 'importance': '2', 'updater_last_name': 'Administrator', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-21 11:26:32', 'is_open': '1', 'author_login': 'admin', 'status': '1', 'tc_external_id': '8', 'author_id': '1', 'preconditions': '', 'updater_id': '1', 'summary': '', 'layout': '1', 'author_last_name': 'Administrator', 'active': '1', 'full_tc_external_id': 'wecharno-8', 'updater_login': 'admin', 'node_order': '1000', 'testsuite_id': '105', 'estimated_exec_duration': ''}]
2017-01-15 17:01:26,398 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:01:26,398 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:01:26,407 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:01:26,407 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:01:26,407 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:01:26,408 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:26,408 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:26,409 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:01:26,409 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:01:26,409 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:01:26,409 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:01:26,410 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:01:26,410 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:26,410 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:26,410 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:01:26,410 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:01:26,410 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:01:26,410 httpprotocol.py[line: 76] INFO: 请求头为：{'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:01:26,453 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:01:26,454 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:01:26,454 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:01:24 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:01:26,454 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:01:26,454 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:01:26,455 testcase.py[line: 133] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:01:26,455 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:01:26,455 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:01:26",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '匹配规则': '包含字符串', '输出': {'success': ''success':(.+?),', 'attach': 'attach':'(.+?)''}, '检查': 'body'}" WHERE executed_history_id = 20170115170119 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:26,457 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:01:26,457 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:01:26" WHERE executed_history_id = 20170115170119 AND testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:26,650 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=106]的执行结果
2017-01-15 17:01:27,003 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'testcase_id': '102', 'modification_ts': '2016-11-29 18:14:53', 'name': 'test-n-点击立即购买按钮', 'execution_type': '1', 'id': '103', 'steps': [{'active': '1', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/mall/tobuy/1?&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:&quot;26838&quot;,&quot;amount&quot;:1,&quot;type&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'id': '104', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;到店支付&quot;,&quot;消息&quot;:&quot;无法打开商品详情&quot;}]</p>\n<p>\n\t}</p>\n'}], 'version': '1', 'importance': '2', 'updater_last_name': 'Administrator', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-20 16:48:26', 'is_open': '1', 'author_login': 'admin', 'status': '1', 'tc_external_id': '7', 'author_id': '1', 'preconditions': '', 'updater_id': '1', 'summary': '', 'layout': '1', 'author_last_name': 'Administrator', 'active': '1', 'full_tc_external_id': 'wecharno-7', 'updater_login': 'admin', 'node_order': '1001', 'testsuite_id': '79', 'estimated_exec_duration': ''}]
2017-01-15 17:01:27,133 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:01:27,134 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 102, 'test-n-点击立即购买按钮', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:01:27,135 testplan.py[line: 72] INFO: 开始执行测试用例[id=102，name=test-n-点击立即购买按钮]
2017-01-15 17:01:27,135 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}
2017-01-15 17:01:27,135 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}
2017-01-15 17:01:27,135 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:27,135 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 102, 'test-n-点击立即购买按钮', 'plan1_of_wechatno', 'pj_wechatno', 104, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:27,136 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:01:27,136 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:01:27,136 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:01:27,136 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', '26838'), ('amount', 1), ('type', 1), ('serial', '10549840601068216320')])
2017-01-15 17:01:27,136 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:27,137 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:01:27,137 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/mall/tobuy/1?mallGoodsId=26838&amount=1&type=1&serial=10549840601068216320
2017-01-15 17:01:27,137 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:01:27,538 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:01:27,538 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 
	 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta http-equiv="Expires" CONTENT="0">
<meta http-equiv="Cache-Control" CONTENT="no-cache">
<meta http-equiv="Pragma" CONTENT="no-cache">
<title>微商城</title>
<link rel="stylesheet" href="/css/mall/pure.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/grids-core.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/zepto.alert.css?v=5.0.0-faae2">

<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.ios7.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.animation.css?v=5.0.0-faae2">
</head>
<style type="text/css">
* {
	margin: 0;
	padding: 0;
}

html {
	color: #626262;
	overflow-y: auto;
	overflow-x: hidden;
}

body {
	margin-bottom: 20px;
	overflow-y: auto;
	overflow-x: hidden;
}

a {
	text-decoration: none;
}

ol,ul {
	list-style: outside none none;
}

.left {
	float: left;
}

.right {
	float: right;
}

.in-block {
	display: inline-block;
}

.orange {
	color: #c58d04;
}

.grey {
	color: #adadad;
}

.bg-color {
	background: #ececec;
}

#wrapper {
	width: 100%;
	margin: 0 auto;
}

.header {
	width: 100%;
}

.header ul {
	position:relative;
	overflow: hidden;
}

.header ul li {
	width: 50%;
	float: left;
	height: 2.8em;
	line-height: 2.8em;
	background: #fff;
	text-align: center;
	border-bottom:1px solid #f38b44;
	-moz-box-sizing:border-box; /* Firefox */
     -webkit-box-sizing:border-box; /* Safari */
     box-sizing:border-box;
}
.header ul .lines{
	position: absolute;
	width: 1%;
	height: 2.8em;
	line-height: 2.8em;
	border-right: 1px solid #FDE5D4;
	left: 49%;
	top: -1px;
 } 
.header ul li a {
	color: #8b898a;
}

.tab_content>div {
	height: auto;
	font-size: 0.8em;
	margin: 0.5em 0;
}

.empty-p {
	width: 80%;
	float: left;
	padding: 0.5em 0;
}

.has-p {
    width: 100%;
    margin: 0 auto;
    padding: 0 1em;
    height: auto;
    line-height: 2.5em;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -webkit-box-sizing: -webkit-border-box;
}
.has-p-one{
    background: url(/images/mall/contact.png) no-repeat left center;
    background-size: 12px 12px;
}
.has-p-two{
    background: url(/images/mall/take.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.has-p-three{
    background: url(/images/mall/time.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.input-right{
    position: relative;
}
.input-right-img{
    width: 1em;
    position: absolute;
    right: 0.6em;
    top: 0.3em;
}
#scheduledTime{
    width:11em;
    height: 2em;
    border:1px solid #a0a0a0;
    border-radius:4px;
    color:#a0a0a0;
    text-indent:.5em
}
.hiddens-p{
    text-overflow:ellipsis; 
    overflow:hidden; 
    white-space:nowrap;  
}

.right-dashed {
	border-left: 1px solid #eee;
	margin-top: 1em;
	padding-bottom:1em;
}

#edit {
	padding: 1em 0 1em 2em;
    width: 10px;
}

.header ul li.active{
    border-bottom: 4px solid #f38b44;
}
.header ul li.active a{
    color: #f38b44!important;
}
.buy_title{
	background:#f3f3f3;
	padding:0.3em 1em;
	margin: 0;
}
.content {
	width: 100%;
	background: #fff;
	overflow: hidden;	
	padding-bottom:8%;
}

.selectList {
	border-bottom: 1px solid #efefef;
	margin: 0 auto;
	overflow: hidden;
	padding: 0.5em 1em;
	font-size: 0.8em;
	clear:both;
}

.selectList img {
    display: inline-block;
    float: left;
    width: 25%;
    border-radius: 4px;
    -webkit-border-radius: 4px;
}

.button {
	display:block;	
	width: 99%;	
	height: 3em;
	color: #fff;
	border: none;
	border-radius: 4px;
	margin:0 auto 0.5em auto;
}

.addbtn {
	background: #33CC66;
}

.btn-wrap-5 {
	padding: 0 1em;
}
.buybtn {
	width: 100%;
	background: #f68d3c;
}

.footer {
	width: 100%;
	background: #fff;
	color: #b6b6b6;
	overflow: hidden;
	text-align: left;
	margin-bottom: 1em;
}

.all-end-button {
	width: 90%;
	margin: 1em auto 0.5em;
}

.all-end-button p:first-child {
	text-align: left;
}

.error-page{
	background: #ddd;
    padding-bottom: 2em;
}
.error-page img{
    margin:0 auto;
	padding-top: 2em;
}
.error-page p{
    text-align:center;
    color:#000;
    width:80%;
    margin:1em auto 2em;
}
#deliverFee{
	text-align:left;
	font-size:0.8em;
	color:#acb0af;
}
.order-div{
    margin-left: 26.8%;            
    position: relative;
}
.order-div>p:last-child{
    width: 100%;
    margin: 0;
    position: absolute;
    bottom: 0;
    left: 0;
}
.m-t-n{
    margin-top: 0;
}
.m-t-n>span{
    display: inline-block;
}
.m-t-n>span:first-child{
    width: 70%;
}
.m-t-n>span:last-child{
    width: 30%;
}
.mtn-span{
    float: right;
}
.t-r-span{
	text-align:right;
}
.ccc{
    color: #ccc;
}
.peisong{
    text-align: right;
    margin-bottom: 0;
    padding-right: 1em;
    padding-top: 0.4em;
}
.peisong-detail{
    color:#000;
}
.peisong-detail input{
    border: none;
}
.peisong-detail div>p{
    padding-left: 1.8em;
    padding-top: 0.8em;
    padding-bottom: 0.8em;
    margin: 0;
    clear:both;
}

.weipay{            
    background: url(/images/weixin2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}        
.peisong-detail div>p.pay{
    background: url(/images/money2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.cardpay{
    background: url(/images/cardpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.mdpay{
    background: url(/images/mdpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}

.peisong-detail div[class^="btn-wrap-"] {
	border-bottom: 1px solid #dadada;
	padding: 0 1em;
	height: 3em;
	position: relative;
}

.weipay,.pay,.mdpay,.cardpay{
    position: relative;
}
 .weipay>img,.mdpay>img,.pay>img,.cardpay>img,.zhifu input{
    width: 1.2em;
    height: 1.2em;
    position: absolute;
    right: 0;
    top: 50%;
    transform:translateY(-50%);
}

.pure-img-check {
	background: url(/images/weixuan2.png) no-repeat left center;
    background-size:1.05em 1.05em; 
    float: right;
    height: 1.05em;
    width: 1.05em;
}

.zhifu input{
    display: none;
}
#deliverFeeDiv, #FetchDiv {
	border-bottom: 1px solid #efefef;
    padding: 0.5em 1em;
}
#deliverFeeDiv p, #FetchDiv p{
	text-align:right;
}

#remark {
	padding: 0.5em 1em;
	height: 4em;
	font-size: 1.0em;
}

.tab-adress {
	position: relative;
}
.icon-wrap {
	/*float: right;*/
	position: absolute;
	top: 11px;
	right: 10px;
}
.icon-wrap-spe {
	top: 0;
}

/*toast提示*/
.toastBlock {
    display: none; 
    position: fixed;
    bottom: 50%;
    width: 100%;
    text-align: center;
    transition: opacity 1s ease-out;
    z-index: 19;
}
.toastBlock .toastContent {
    display: inline-block;
    padding: 18px;
    border-radius: 5px;
    font-size: 14px;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.7);
}
</style>
<body>
	<div id="wrapper">
		
			
			
			
				
					
					
						
						
						
						
						
					
					
				
				
			
			<div class="header">
				
					<ul class="tab">
						<li class='active' data='#deliverFeeDiv'><a href="#tab1">快递发货</a></li>						
						<li class=''><a href="#tab2">到店自提</a></li>
						<span class="lines"></span>
					</ul>
				
			</div>
			<p class="buy_title"></p>
			
			<div class="tab_container">
				<div id="tab1" class="tab_content pure-g" style="">
					<div class="pure-u-24-24 tab-adress j-tab-adress">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">17817738178<span>(17817738178)</span></span>
								</div>
								<div class="has-p">
									<span>配送地址：</span>
									<span class="pure-u-3-5">天津市县宁河县详细</span>
                                </div>

                                <span class="icon-wrap">
                                	
                                		
                                		
                                		<a class="url_adress" href="/toaddr/1?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
                                		</a>
                                		
                                	
                                </span>
							
							
						
					</div>
				</div>
				<div id="tab2" class="tab_content pure-g" style="display:none">
					<div class="pure-u-24-24">
						
							
								<div class="tab-adress j-tab-adress">
									<div class="has-p">
										<span>联系方式：</span>
										<span class="pure-u-3-5">452<span>(17817738178)</span></span>
									</div>
	                                <div class="has-p">
	                                	<span>门&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;店：</span>
	                                	<span class="pure-u-3-5">
	                                		广东省深圳市福田区
		                                	
		                                		Biu
		                                	
	                                	</span>
	                                </div>
	                                <span class="icon-wrap">
	                                	
	                                		
	                                		
	                                		<a class="url_adress" href="/toaddr/2?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
	                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
	                                		</a>
	                                		
	                                	
	                                </span>
                                </div>
                               	<div class="has-p">
                               		<span>到店时间：</span>
                               		<span class="input-right">
                               			<input type="text" id="scheduledTime" name="scheduledTime" class="text" placeholder="请选择"/><img src="/images/mall/input-right.png?v=5.0.0-faae2" class="input-right-img">
                               		</span>
                               	</div>
							
							
						
					</div>
				</div>
			</div>
			<p class="buy_title"></p>
			
			<div class="content">
				
					
						
							<div class="selectList">
								<img src="http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg"> 
								
									
									
										<div class="order-div">
											<p class="m-t-n"><span>接口-测试商品1</span><span class="mtn-span t-r-span">￥0.01</span></p>
											<p><span class="ccc mtn-span">X1</span></p>
                                        </div>	
									
								
							</div>
						
					
					
					
				
				<div id="deliverFeeDiv">
					 
						
						
							<p id="deliverFee">含运费：￥0.01</p>
							<p class="orange">合计：￥0.02</p>
						
					 
				</div>
				<div id="FetchDiv" style="display: none;">
					<p class="orange">合计：￥0.01</p>
				</div>
				<div id="remark">
					<span class="beizhu" style="float:left">备注：</span>
                   	<span class="beizhulan">
                   		<textarea rows="3" placeholder="可于此处给卖家留言备注" style="border:0;width: 85%;"></textarea>
                   	</span>
				</div>
			</div>
			<p class="buy_title"></p>
			<div class="footer">
				<div class="peisong-detail zhifu">
                	
                        <div class="btn-wrap-1">
                         	<p class="weipay">微信支付<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="1"/>
                         	</p>
                        </div>
                    
                  	
                  	
                        <div class="btn-wrap-2" style="">
                         	<p class="pay">货到付款<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="3"/>
                         	</p>
                        </div>
                   	
		
                    
                        <div class="btn-wrap-3" style="display:none">
                        	<p class="mdpay">到店支付<span class="pure-img-check"></span>
                        		<input type="radio" name="zhifu" value="2"/>
                        	</p>
                        </div>
                   	
                   	
                   	
                        <div class="btn-wrap-4">
                       		<p class="cardpay">储值卡支付<span class="pure-img-check"></span>
                       			<input type="radio" name="zhifu" value="4"/>
                       		</p>
                        </div>
                   	
                </div>
			</div>
			<div class="btn-wrap-5">
				<input type="button" class="button buybtn submit" value="确认提交" />
			</div>

			<div id="toastId" class="toastBlock">
			    <span class="toastContent"></span>
			</div>
			
		
	</div>
	<script type="text/javascript" src="/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/touch.js?v=5.0.0-faae2"></script>
    
	<script type="text/javascript" src="/js/mall/zepto.alert.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mall.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.zepto.js?v=5.0.0-faae2" ></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.core.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.scroller.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.datetime.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.i18n.zh.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			$("input[name='zhifu']:checked").prev('.pure-img').attr('src','/images/check.png');
			var tab = parseInt("1");
			/* if(tab == 1){
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else if (tab == 0){
			    $("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} else if(parseInt("1") != 0){
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} */
			
			if ("true" == "true" && 1 == 1) {
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else {
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			}
			
			// 控制显示图片比例
			var img_left_heights = $(".selectList img").width()*(0.75);
			$(".selectList img,.order-div").css('height',img_left_heights);
			
			// 取货日期
			var now = new Date();
            $('#scheduledTime').mobiscroll().datetime({
                minDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()+1),
                maxDate: new Date(now.getFullYear(), now.getMonth()+3, now.getDate()),
                stepMinute: 30,
                dateOrder :"yymmdd",
                dateFormat:"yy-mm-dd",
                timeWheels:"HHii",
                timeFormat:"HH:ii",
                //invalid: [{ start: '00:00', end: '08:00' },{ start: '22:00', end: '23:59' }],
                theme: 'ios7',
                lang: 'zh',
                display: 'bottom',
                mode: 'mixed'
            });
            $('#scheduledTime').click(function(){
                $('#scheduledTime').mobiscroll('show'); 
                return false;
            });
            
			$("ul li").click(function() {
				$("ul li").removeClass("active");
				$(this).addClass("active");
				if($(this).attr("data")=="#deliverFeeDiv"){
					$("#deliverFeeDiv").show();
					$("#FetchDiv").hide();
				}else{
					$("#deliverFeeDiv").hide();
					$("#FetchDiv").show();
				}
				$(".tab_content").hide();
				var href = $(this).find("a").attr("href");
				$(href).show();
				
				if(href.endWith("tab1")) {
					$(".btn-wrap-2").show();
					$(".btn-wrap-3").hide();
				} else if(href.endWith("tab2")) {
					$(".btn-wrap-2").hide();
					$(".btn-wrap-3").show();
				}
				//清空已选择的支付方式
				$("input[name='zhifu']").prop("checked", false);
				$(".zhifu .pure-img-check").css('background-image','url(/images/weixuan2.png)');
				return false;
			});
			//商户设置的满额包邮价
			/* var noDeliverFee = toPrice(parseFloat("200")/100);
			var totalFee = parseFloat("0.01");
			if(totalFee > noDeliverFee){
				$("#deliverFeeDiv .orange").text("合计：￥"+ totalFee);
				$("#deliverFee").text("含运费：￥0.00");
			} */
			$('.zhifu>div').click(function(){
	            $("input[name=zhifu]").prop("checked", false);
	            $(".pure-img-check").css('backgroundImage','url(/images/weixuan2.png)');
	            var img_obj = $(this).find('.pure-img-check');
	            var backgroundImage = img_obj.css('background-image');
	            var input_obj = $(this).find('input');
	            if(backgroundImage.indexOf("weixuan2.png") > 0){
	                img_obj.css('background-image','url(/images/check.png)');
	                input_obj.prop("checked", "checked");
	            }else{
	                img_obj.css('background-image','url(/images/weixuan2.png)');
	                input_obj.prop("checked", false);
	            }
	        });


	        $(".j-tab-adress").click(function(event) {
	        	var _url = $(this).find('.url_adress').prop("href");

	        	window.location.href = _url;
	        });
		});
		
		function validateRemark(){
			var text = filtEmoji($('.beizhulan textarea').val());
			if(text != "" && text != undefined){
				if(text.length>30){
					$.dialog({
                        widths : '80%',
                        content : '您输入的备注过长，请不要超过30个字',
                        title : 'no',
                        fullok : function() {
                            return true;
                        },                       
                        lock : true
                    });	
					return false;
				}
				return true;
			}
			return true;
		}
		function filtEmoji (str) {
			return unescape(escape(str).replace(/\%uD.{3}/g, ''));
		}
		
		$(".submit").click(function(event){
			var payType = $("input[name='zhifu']:checked").val();
			if(null == payType || "" == payType || typeof(payType) == "undefined") {
       		 $.dialog({
                    widths : '80%',
                    content : '请选择支付方式',
                    title : 'no',
                    fullok : function() {
                        return true;
                    },                       
                    lock : true
                });
       			return;
       		}
			$.dialog({
                content : "确认提交订单？",
                title : "no",
                okText: '取消',
                cancelText : '确定', 
                ok : function() {
                	$(".ft-right").removeAttr("disabled");
                	return;
                },
                cancel : function() {                        	
               		
               		if(payType == 1){
               			if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				doAlert("no", "无效物流方式");
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@71f1b344";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/1", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "id=" + result.attach;
            	    			strParams += "&serial=10549840601068216320";
            	    			if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
            	        	});
            			}
               		}
               		
    				if(payType == 2){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@71f1b344";
    					if(shopBranch == "") {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					var _fetchTime = $("#scheduledTime").val();
    					if(null == _fetchTime || "" == _fetchTime) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请选择取货时间',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						
    						var _remark = filtEmoji($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							fetchTime : _fetchTime,
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/2/2", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 3){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑收货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });

    						var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
    						// var _remark = encodeURI($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/1/3", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 4){
    					if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				$.dialog({
        	                    widths : '80%',
        	                    content : '无效物流方式',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@71f1b344";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
            			// var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/4", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "?orderId=" + result.attach;
            					if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            					strParams += "&serial=10549840601068216320";
                				window.location.href = "/pay/5"+strParams;
            	        	});
            			}
            			
    				}
    				
                },
                lock : true
            });
		});
		
		//微信支付
		/* $(".payUseWX").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			var type = 0;
			$(".tab_content").each(function(){
				if($(this).css("display") != "none") {
					var attrId = $(this).attr("id");
					if(attrId == "tab1") {
						type = 1;//快递取货
					} else if(attrId == "tab2") {
						type = 2;//门店自提
					}
				}
			});
			if(type <= 0) {
				doAlert("no", "无效物流方式");
				return;
			}
			if(type == 1) {
				if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑收货地址");
					return;
				}
			}
			var _fetchTime = "";
			if(type == 2) {
				if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑取货地址");
					return;
				}
				_fetchTime = $("#scheduledTime").val();
				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
					doAlert("no", "请选择取货时间");
					return;
				}
				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@71f1b344";
				if(shopBranch == "") {
					doAlert("no", "请编辑取货地址");
					return;
				}
			}
			
			var _remark = encodeURI($(".beizhulan").find("textarea").val());
			var params = {
				serial : "10549840601068216320",
				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
				fm : "1",
				mallGoodsId : "26838",
				amount : "1",
				cartIds : "",
				fetchTime : _fetchTime,
				remark : _remark
			};
			if(parseInt("1") == 1 && parseInt("1") == 2){
				var standardId = "";
				if(standardId != null && standardId != undefined){
					params.standardId = standardId;
				}
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				$.post("/cmorder/" + type+ "/1", params, function(result){
					dialog.close();
					
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					
					var strParams = "id=" + result.attach;
	    			strParams += "&serial=10549840601068216320";
	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
	        	});
			}
		}); */
		//货到付款
		/* $(".payAfrecv").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑收货地址");
				return;
			}
			
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				var _remark = encodeURI($(".beizhulan").find("textarea").val());
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/1/3", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
	        	});
			}
		}); */
		//到店支付
		// $(".payInshop").click(function(event) {
			/* if($(this).prop("disabled") == true)
        		return false;
			
			var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@71f1b344";
			if(shopBranch == "") {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			var _fetchTime = $("#scheduledTime").val();
			if(null == _fetchTime || "" == _fetchTime) {
				doAlert("no", "请选择取货时间");
				return;
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				
				var _remark = $(".beizhulan").find("textarea").val();
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					fetchTime : _fetchTime,
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/2/2", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
	        	});
			} */
		// });
	
		// toast提示
		var toastTime=null;
		var displayTime=null;

		function setToast(html) {
		    if (toastTime != null) {
		        clearTimeout(toastTime);
		        clearTimeout(displayTime);
		    }
		    // $('toastId').style.display = 'block';
		    // $('toastId').style.opacity = 1;
		    $('#toastId').css({
		        display: 'block',
		        opacity: 1
		    });
		    $('#toastId .toastContent').text(html);

		    toastTime = setTimeout(function() {
		        // $('toastId').style.opacity = 0;
		        $('#toastId').css("opacity", 0);
		        displayTime = setTimeout(function() {
		            // $('toastId').style.display='none';
		            $('#toastId').css("display", "none");
		        }, 1000);
		    }, 1000);
		}

		function toastDisplay(str) {
		    setToast(str);
		}
	</script>
</body>
</html>
<!--加入判断用户是否关注公众号功能 add by lipengfei at 2015-11-9  -->
  	
	<script type="text/javascript" src="/js/bind/banner.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			//var SHOP_SERIAL = getCookie("SHOP_SERIAL");
			var SHOP_SERIAL = "10549840601068216320";
			if(null != SHOP_SERIAL && SHOP_SERIAL != ""){
				$.ajax({
					url : '/saofu_mobile/checkUserBindStatus',
					data : {
						"serial" : SHOP_SERIAL
					},
					type : 'post',
					cache : false,
					dataType : 'json',
					success : function(data) {
						if (data != null) {
							var guildFocusStr = data.guildFocusStr;
							if(guildFocusStr != null && guildFocusStr == "1"){
								var hasBindedShop = data.hasBindedShop;
								if(hasBindedShop == "0"){
									var qrName = data.QRPublicName;
									var qrUrl = data.QRCodeURL;
									if(qrName != "" && qrUrl != ""){
										var params = qrName+"**"+qrUrl;
										followModule(params);
									}
								}
							}
						} 
					},
					error : function() {
					}
				});
			}
		});
				
	</script>

2017-01-15 17:01:27,546 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:01:25 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=51800A3A10B1077CDA814E7202A05235; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 17:01:27,546 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:01:27,546 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：到店支付
2017-01-15 17:01:27,546 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:01:27,546 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:01:27,546 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:01:27",step_action="{'\u65b9\u6cd5': 'get', 'url': '/mall/tobuy/1?', '\u53c2\u6570': {'mallGoodsId': '26838', 'amount': 1, 'type': 1, 'serial': '10549840601068216320'}}", expected_results="{'条件': [{'消息': '无法打开商品详情', '模式': '到店支付'}], '匹配规则': '包含字符串', '检查': 'body'}" WHERE executed_history_id = 20170115170119 AND testcase_id = 102 AND step_id = 104 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:27,549 testcase.py[line: 165] INFO: 测试用例[id=102, name=test-n-点击立即购买按钮]执行成功
2017-01-15 17:01:27,550 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:01:27,550 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 17:01:27" WHERE executed_history_id = 20170115170119 AND testcase_id = 102 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:27,716 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=102]的执行结果
2017-01-15 17:01:28,022 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'testcase_id': '80', 'modification_ts': '2016-11-29 18:16:14', 'name': 'test-n-点击商品', 'execution_type': '1', 'id': '81', 'steps': [{'active': '1', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'id': '82', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n'}], 'version': '1', 'importance': '2', 'updater_last_name': 'Administrator', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-20 11:05:03', 'is_open': '1', 'author_login': 'admin', 'status': '1', 'tc_external_id': '2', 'author_id': '1', 'preconditions': '', 'updater_id': '1', 'summary': '', 'layout': '1', 'author_last_name': 'Administrator', 'active': '1', 'full_tc_external_id': 'wecharno-2', 'updater_login': 'admin', 'node_order': '1000', 'testsuite_id': '79', 'estimated_exec_duration': ''}]
2017-01-15 17:01:28,136 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:01:28,136 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:01:28,137 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2017-01-15 17:01:28,137 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2017-01-15 17:01:28,137 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2017-01-15 17:01:28,137 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:28,138 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:28,138 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:01:28,138 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:01:28,139 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:01:28,139 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('id', 26838), ('serial', '10549840601068216320')])
2017-01-15 17:01:28,139 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:28,139 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:01:28,139 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2017-01-15 17:01:28,139 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:01:28,184 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:01:28,184 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/css/malls/detail.css?v=5.0.0-faae2">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/mall/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320",
			mallConfigSerial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script src="/common/js/request.js?v=5.0.0-faae2"></script>
	<script src="/common/js/extend-number.js?v=5.0.0-faae2"></script>
	<script src="/component/iscroll/js/iscroll.js?v=5.0.0-faae2"></script>
	<script src="/component/swiper/js/swiper.min.js?v=5.0.0-faae2"></script>
	<script src="/js/malls/detail.js?v=5.0.0-faae2"></script>
</body>
</html>
2017-01-15 17:01:28,186 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:01:26 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3983'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=B448C09DE76A8A405F05E4B1A10F4943; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 17:01:28,186 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:01:28,186 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2017-01-15 17:01:28,186 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:01:28,186 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:01:28,186 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:01:28",step_action="{'\u65b9\u6cd5': 'get', 'url': '/goods/item?', '\u53c2\u6570': {'id': 26838, 'serial': '10549840601068216320'}}", expected_results="{'条件': [{'消息': '点击商品时无法打开购买页面', '模式': '立即购买'}], '匹配规则': '包含字符串', '检查': 'body'}" WHERE executed_history_id = 20170115170119 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:28,188 testcase.py[line: 165] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2017-01-15 17:01:28,188 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:01:28,188 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 17:01:28" WHERE executed_history_id = 20170115170119 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:28,311 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2017-01-15 17:01:28,561 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'testcase_id': '114', 'modification_ts': '2016-11-29 17:52:17', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'execution_type': '1', 'id': '115', 'steps': [{'active': '1', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'execution_type': '1', 'id': '116', 'expected_results': ''}, {'active': '1', 'step_number': '2', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'id': '117', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n'}], 'version': '1', 'importance': '2', 'updater_last_name': 'Administrator', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-25 15:02:41', 'is_open': '1', 'author_login': 'admin', 'status': '1', 'tc_external_id': '10', 'author_id': '1', 'preconditions': '', 'updater_id': '1', 'summary': '', 'layout': '1', 'author_last_name': 'Administrator', 'active': '1', 'full_tc_external_id': 'wecharno-10', 'updater_login': 'admin', 'node_order': '1000', 'testsuite_id': '113', 'estimated_exec_duration': ''}]
2017-01-15 17:01:28,706 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:01:28,706 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:01:28,707 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 17:01:28,708 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 17:01:28,708 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:01:28,708 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:28,708 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:28,709 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:01:28,836 global_function.py[line: 19] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'testcase_id': '106', 'modification_ts': '2016-11-29 17:33:09', 'name': 'test-n-创建储值卡支付订单', 'execution_type': '1', 'id': '107', 'steps': [{'active': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'id': '108', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n'}], 'version': '1', 'importance': '2', 'updater_last_name': 'Administrator', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-21 11:26:32', 'is_open': '1', 'author_login': 'admin', 'status': '1', 'tc_external_id': '8', 'author_id': '1', 'preconditions': '', 'updater_id': '1', 'summary': '', 'layout': '1', 'author_last_name': 'Administrator', 'active': '1', 'full_tc_external_id': 'wecharno-8', 'updater_login': 'admin', 'node_order': '1000', 'testsuite_id': '105', 'estimated_exec_duration': ''}]
2017-01-15 17:01:28,964 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 17:01:29,218 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:01:29,218 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 17:01:29,219 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:01:29,220 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:01:29,220 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:01:29,220 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:01:29,220 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170119', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:01:29,221 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:01:29,221 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:01:29,221 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:01:29,221 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:01:29,221 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:01:29,222 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:29,222 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:01:29,222 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:01:29,222 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:01:29,222 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:01:29,222 httpprotocol.py[line: 76] INFO: 请求头为：{'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:01:29,266 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:01:29,266 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:01:29,267 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:01:27 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:01:29,267 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:01:29,267 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:01:29,268 testcase.py[line: 133] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:01:29,268 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:01:29,269 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:01:29",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '匹配规则': '包含字符串', '输出': {'success': ''success':(.+?),', 'attach': 'attach':'(.+?)''}, '检查': 'body'}" WHERE executed_history_id = 20170115170119 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:29,272 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:01:29,273 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:01:29" WHERE executed_history_id = 20170115170119 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:01:29,275 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 17:03:15,429 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 17:03:15,429 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 17:03:15,442 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 17:03:15,445 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 17:03:15,495 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 17:03:15,496 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 17:03:15,497 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 17:03:15,497 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 17:03:15,498 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 17:03:15,499 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 17:03:15,499 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 17:03:15,629 global_function.py[line: 19] INFO: 获取测试用例信息 [{'id': '149', 'testsuite_id': '147', 'updater_id': '1', 'full_tc_external_id': 'pj_pos-1', 'modification_ts': '2016-11-30 15:41:36', 'active': '1', 'testcase_id': '148', 'creation_ts': '2016-07-27 18:32:10', 'version': '1', 'layout': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'name': 'test-n-登陆掌贝pos机', 'tc_external_id': '1', 'is_open': '1', 'summary': '', 'author_first_name': 'Testlink', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'id': '183', 'active': '1', 'execution_type': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'id': '182', 'active': '1', 'execution_type': '1', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'id': '150', 'active': '1', 'execution_type': '1', 'step_number': '3', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n'}], 'author_id': '1', 'execution_type': '1', 'node_order': '1000', 'updater_login': 'admin', 'status': '1', 'author_login': 'admin', 'author_last_name': 'Administrator', 'updater_last_name': 'Administrator', 'importance': '2', 'updater_first_name': 'Testlink', 'estimated_exec_duration': ''}]
2017-01-15 17:03:15,746 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 17:03:16,598 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:03:16,598 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170315', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 17:03:16,601 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 17:03:16,601 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 17:03:16,602 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 17:03:16,602 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:03:16,602 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170315', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:03:16,604 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:03:16,604 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:03:16,604 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 17:03:16,607 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 17:03:16,607 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:03:16,607 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 17:03:16,608 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:03:16,608 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:03:16",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'检查': 'body', '输出': {'branch_id': 1}}" WHERE executed_history_id = 20170115170315 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:03:16,609 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 17:03:16,610 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 17:03:16,610 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:03:16,610 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170315', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:03:16,611 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:03:16,611 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 17:03:16,611 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 17:03:16,611 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 17:03:16,614 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 17:03:16,614 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:03:16,614 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 17:03:16,615 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:03:16,615 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:03:16",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'检查': 'body', '输出': {'device_no': 1, 'serial_no': 2}}" WHERE executed_history_id = 20170115170315 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:03:16,617 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 17:03:16,617 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 17:03:16,617 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:03:16,617 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170315', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:03:16,618 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:03:16,619 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 17:03:16,619 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:03:16,619 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:03:16,619 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 17:03:16,619 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 17:03:16,619 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 17:03:16,619 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 17:03:16,619 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 17:03:16,620 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 17:03:16,620 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 17:03:16,620 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 17:03:16,620 httpprotocol.py[line: 76] INFO: 请求头为：{'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8', 'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0'}
2017-01-15 17:03:17,004 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 17:03:17,004 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 17:03:17,005 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:03:14 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:03:17,005 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:03:17,005 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:03:17,005 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:03:17,006 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 17:03:17,006 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:03:17,007 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 17:03:16",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8', 'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'检查': 'body', '匹配规则': '键值相等', '输出': {'OperatorId': {'operator': {'id': 'value'}}, 'Token': {'token': 'value'}}, '条件': [{'模式': {'success': True}, '消息': '登录失败,success不为true'}, {'模式': {'message': '成功'}, '消息': 'message不为成功'}, {'模式': {'code': '4001'}, '消息': 'code不为4001'}]}" WHERE executed_history_id = 20170115170315 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:03:17,010 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:03:17,011 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:03:16" WHERE executed_history_id = 20170115170315 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:03:17,012 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 17:03:17,013 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '')
2017-01-15 17:03:17,013 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 17:03:17,013 main.py[line: 115] INFO: 运行指定项目
2017-01-15 17:03:17,247 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 17:03:17,247 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 17:03:17,250 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 17:03:17,250 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 17:03:17,451 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 17:03:17,614 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 17:03:17,614 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 17:03:17,753 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['126', '93', '102', '114', '106', '76', '120', '110', '88', '98', '80'])
2017-01-15 17:03:17,886 testplan.py[line: 45] INFO: 获取测试用例信息 [{'id': '127', 'testsuite_id': '125', 'updater_id': '1', 'full_tc_external_id': 'wecharno-12', 'modification_ts': '2016-11-29 19:43:22', 'active': '1', 'testcase_id': '126', 'creation_ts': '2016-07-26 15:06:38', 'version': '1', 'layout': '1', 'preconditions': '', 'name': 'test-n-免费领取优惠券', 'tc_external_id': '12', 'is_open': '1', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'author_first_name': 'Testlink', 'steps': [{'expected_results': '', 'id': '181', 'active': '1', 'execution_type': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '', 'id': '180', 'active': '1', 'execution_type': '1', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n', 'id': '128', 'active': '1', 'execution_type': '1', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n'}], 'author_id': '1', 'execution_type': '1', 'node_order': '1000', 'updater_login': 'admin', 'status': '1', 'author_login': 'admin', 'author_last_name': 'Administrator', 'updater_last_name': 'Administrator', 'importance': '2', 'updater_first_name': 'Testlink', 'estimated_exec_duration': ''}]
2017-01-15 17:03:18,002 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:03:18,002 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170315', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:03:18,004 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 17:03:18,004 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 17:03:18,004 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:03:18,004 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:03:18,004 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:03:18,004 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 17:03:18,010 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:03:18,011 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:03:18",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115170315 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:03:18,012 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 17:03:18,012 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:03:18,013 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:03:18,013 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170315', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:03:18,014 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:03:18,014 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:03:18,014 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 17:03:18,019 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:03:18,020 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:03:18",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115170315 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:03:18,022 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 17:03:18,022 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 17:03:18,022 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:03:18,023 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170315', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:03:18,024 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 17:03:18,024 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:03:18,024 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 17:03:18" WHERE executed_history_id = 20170115170315 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:03:18,170 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 17:03:18,450 testplan.py[line: 45] INFO: 获取测试用例信息 [{'id': '94', 'testsuite_id': '91', 'updater_id': '1', 'full_tc_external_id': 'wecharno-5', 'modification_ts': '2016-11-29 18:05:21', 'active': '1', 'testcase_id': '93', 'creation_ts': '2016-07-20 12:25:46', 'version': '1', 'layout': '1', 'preconditions': '', 'name': 'test-n-把商品移出购物车', 'tc_external_id': '5', 'is_open': '1', 'summary': '', 'author_first_name': 'Testlink', 'steps': [{'expected_results': '', 'id': '95', 'active': '1', 'execution_type': '1', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,</p>\n<p>\n\t&quot;用例id&quot;:88,</p>\n<p>\n\t&quot;用例名称&quot;:&quot;test-n-把商品加入购物车&quot;<br />\n\t}</p>\n<p>\n\t&nbsp;</p>\n'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品移出购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '96', 'active': '1', 'execution_type': '1', 'step_number': '2', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cart/delfromcart?&quot;,<br />\n\t&quot;参数&quot;:{&quot;strIds&quot;:&quot;[CaseStep.strIds]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;[]&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '178', 'active': '1', 'execution_type': '1', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n'}], 'author_id': '1', 'execution_type': '1', 'node_order': '1000', 'updater_login': 'admin', 'status': '1', 'author_login': 'admin', 'author_last_name': 'Administrator', 'updater_last_name': 'Administrator', 'importance': '2', 'updater_first_name': 'Testlink', 'estimated_exec_duration': ''}]
2017-01-15 17:03:18,563 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:03:18,563 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170315', 93, 'test-n-把商品移出购物车', '微商城-把商品移出购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:03:18,564 testplan.py[line: 72] INFO: 开始执行测试用例[id=93，name=test-n-把商品移出购物车]
2017-01-15 17:03:18,564 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} 
2017-01-15 17:03:18,564 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:03:18,564 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:03:18,565 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170315', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 95, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} ', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:03:18,566 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:03:18,687 global_function.py[line: 19] INFO: 获取测试用例信息 [{'id': '89', 'testsuite_id': '87', 'updater_id': '1', 'full_tc_external_id': 'wecharno-4', 'modification_ts': '2016-11-29 17:58:09', 'active': '1', 'testcase_id': '88', 'creation_ts': '2016-07-20 12:07:40', 'version': '1', 'layout': '1', 'preconditions': '', 'name': 'test-n-把商品加入购物车', 'tc_external_id': '4', 'is_open': '1', 'summary': '', 'author_first_name': 'Testlink', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'id': '175', 'active': '1', 'execution_type': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '', 'id': '174', 'active': '1', 'execution_type': '1', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '90', 'active': '1', 'execution_type': '1', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'id': '176', 'active': '1', 'execution_type': '1', 'step_number': '4', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '177', 'active': '1', 'execution_type': '1', 'step_number': '5', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n'}], 'author_id': '1', 'execution_type': '1', 'node_order': '1000', 'updater_login': 'admin', 'status': '1', 'author_login': 'admin', 'author_last_name': 'Administrator', 'updater_last_name': 'Administrator', 'importance': '2', 'updater_first_name': 'Testlink', 'estimated_exec_duration': ''}]
2017-01-15 17:03:18,808 global_function.py[line: 39] INFO: 正在读取套件[id=87]的协议，host，端口配置...
2017-01-15 17:03:19,051 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:03:19,052 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170315', 88, 'test-n-把商品加入购物车', '把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 17:03:19,053 global_function.py[line: 71] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 17:03:19,053 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 17:03:19,053 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 17:03:19,054 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:03:19,054 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170315', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:03:19,055 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:03:19,055 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:03:19,055 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 17:03:19,056 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 17:03:19,622 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2017-01-15 17:03:19,622 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:03:19,622 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}]
2017-01-15 17:03:19,623 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:03:19,623 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:03:19",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'检查': 'body', '输出': {'customer_id': 1}}" WHERE executed_history_id = 20170115170315 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:03:19,626 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2017-01-15 17:03:19,626 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:03:19,626 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:03:19,626 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170315', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:03:19,628 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:03:19,629 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2017-01-15 17:03:19,629 casestep.py[line: 149] INFO: 转换后的参数体为：(167020,)
2017-01-15 17:03:19,629 mydb.py[line: 72] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2017-01-15 17:03:20,367 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:03:20,367 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:03:19",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '\u53c2\u6570': [167020]}", expected_results="" WHERE executed_history_id = 20170115170315 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:03:20,370 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2017-01-15 17:03:20,370 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2017-01-15 17:03:20,370 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:03:20,370 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170315', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', '80', '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:03:20,372 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:03:20,372 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:03:20,372 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:03:20,372 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:03:20,373 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', 26838), ('standardId', 'undefined'), ('amount', 1), ('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 17:03:20,373 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:03:20,373 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:03:20,373 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2017-01-15 17:03:20,373 httpprotocol.py[line: 75] INFO: 参数为：b'mallGoodsId=26838&standardId=undefined&amount=1&serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2017-01-15 17:03:20,373 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:03:21,069 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:03:21,069 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"加入购物车失败","attach":null}
2017-01-15 17:03:21,069 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:03:18 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:03:21,069 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:03:21,070 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:03:21,070 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:03:21,071 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 17:03:21,071 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:03:21,071 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 把商品加如购物车失败,success不为true", protocol_method="post", runtime="2017-01-15 17:03:20",step_action="{'\u65b9\u6cd5': 'post', 'url': '/addtocart', '\u53c2\u6570': {'mallGoodsId': 26838, 'standardId': 'undefined', 'amount': 1, 'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'检查': 'body', '匹配规则': '键值相等', '条件': [{'模式': {'success': True}, '消息': '把商品加如购物车失败,success不为true'}]}" WHERE executed_history_id = 20170115170315 AND testcase_id = 88 AND step_id = 90 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:03:21,076 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:03:21,077 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:03:19" WHERE executed_history_id = 20170115170315 and testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:03:21,080 global_function.py[line: 82] INFO: 指定用例[88]已执行完
2017-01-15 17:06:54,599 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 17:06:54,600 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 17:06:54,615 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 17:06:54,619 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 17:06:54,676 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 17:06:54,677 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 17:06:54,678 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 17:06:54,678 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 17:06:54,680 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 17:06:54,683 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 17:06:54,683 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 17:06:54,830 global_function.py[line: 19] INFO: 获取测试用例信息 [{'testsuite_id': '147', 'importance': '2', 'layout': '1', 'testcase_id': '148', 'author_last_name': 'Administrator', 'author_first_name': 'Testlink', 'active': '1', 'execution_type': '1', 'updater_last_name': 'Administrator', 'is_open': '1', 'modification_ts': '2016-11-30 15:41:36', 'updater_login': 'admin', 'author_id': '1', 'version': '1', 'steps': [{'active': '1', 'step_number': '1', 'id': '183', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n'}, {'active': '1', 'step_number': '2', 'id': '182', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n'}, {'active': '1', 'step_number': '3', 'id': '150', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n'}], 'id': '149', 'author_login': 'admin', 'status': '1', 'creation_ts': '2016-07-27 18:32:10', 'node_order': '1000', 'preconditions': '<p>\n\t初始化用例</p>\n', 'summary': '', 'tc_external_id': '1', 'updater_first_name': 'Testlink', 'full_tc_external_id': 'pj_pos-1', 'name': 'test-n-登陆掌贝pos机', 'estimated_exec_duration': '', 'updater_id': '1'}]
2017-01-15 17:06:54,955 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 17:06:55,719 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:06:55,719 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170654', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 17:06:55,721 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 17:06:55,721 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 17:06:55,721 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 17:06:55,721 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:06:55,722 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170654', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:06:55,724 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:06:55,724 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:06:55,724 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 17:06:55,728 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 17:06:55,728 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:06:55,728 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 17:06:55,728 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:06:55,728 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:06:55",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115170654 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:06:55,730 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 17:06:55,730 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 17:06:55,730 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:06:55,730 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170654', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:06:55,732 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:06:55,732 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 17:06:55,732 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 17:06:55,732 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 17:06:55,735 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 17:06:55,735 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:06:55,735 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 17:06:55,735 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:06:55,735 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:06:55",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'serial_no': 2, 'device_no': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115170654 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:06:55,737 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 17:06:55,737 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 17:06:55,737 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:06:55,737 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170654', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:06:55,738 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:06:55,738 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 17:06:55,739 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:06:55,739 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:06:55,739 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 17:06:55,739 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 17:06:55,739 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 17:06:55,739 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 17:06:55,739 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 17:06:55,740 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 17:06:55,740 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 17:06:55,740 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 17:06:55,740 httpprotocol.py[line: 76] INFO: 请求头为：{'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'ProtocolVersion': '4.0'}
2017-01-15 17:06:56,146 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 17:06:56,146 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 17:06:56,146 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:06:53 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:06:56,147 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:06:56,147 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:06:56,147 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:06:56,148 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 17:06:56,148 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:06:56,148 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 17:06:55",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'SerialNo': '[CaseStep.serial_no]', 'ProtocolVersion': '4.0', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'ProductVersion': '[global_product_version]'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'输出': {'Token': {'token': 'value'}, 'OperatorId': {'operator': {'id': 'value'}}}, '匹配规则': '键值相等', '条件': [{'消息': '登录失败,success不为true', '模式': {'success': True}}, {'消息': 'message不为成功', '模式': {'message': '成功'}}, {'消息': 'code不为4001', '模式': {'code': '4001'}}], '检查': 'body'}" WHERE executed_history_id = 20170115170654 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:06:56,150 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:06:56,150 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:06:55" WHERE executed_history_id = 20170115170654 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:06:56,152 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 17:06:56,152 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '')
2017-01-15 17:06:56,152 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 17:06:56,152 main.py[line: 115] INFO: 运行指定项目
2017-01-15 17:06:56,303 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 17:06:56,303 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 17:06:56,306 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 17:06:56,306 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 17:06:56,462 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 17:06:56,580 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 17:06:56,581 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 17:06:56,714 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['114', '120', '80', '126', '98', '102', '76', '88', '106', '93', '110'])
2017-01-15 17:06:56,841 testplan.py[line: 45] INFO: 获取测试用例信息 [{'testsuite_id': '113', 'importance': '2', 'layout': '1', 'testcase_id': '114', 'author_last_name': 'Administrator', 'author_first_name': 'Testlink', 'active': '1', 'execution_type': '1', 'updater_last_name': 'Administrator', 'is_open': '1', 'modification_ts': '2016-11-29 17:52:17', 'updater_login': 'admin', 'author_id': '1', 'version': '1', 'steps': [{'active': '1', 'step_number': '1', 'id': '116', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'execution_type': '1', 'expected_results': ''}, {'active': '1', 'step_number': '2', 'id': '117', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n'}], 'id': '115', 'author_login': 'admin', 'status': '1', 'creation_ts': '2016-07-25 15:02:41', 'node_order': '1000', 'preconditions': '', 'summary': '', 'tc_external_id': '10', 'updater_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-10', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'estimated_exec_duration': '', 'updater_id': '1'}]
2017-01-15 17:06:56,956 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:06:56,956 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170654', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:06:56,957 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 17:06:56,957 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 17:06:56,957 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:06:56,957 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:06:56,957 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170654', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:06:56,958 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:06:57,108 global_function.py[line: 19] INFO: 获取测试用例信息 [{'testsuite_id': '105', 'importance': '2', 'layout': '1', 'testcase_id': '106', 'author_last_name': 'Administrator', 'author_first_name': 'Testlink', 'active': '1', 'execution_type': '1', 'updater_last_name': 'Administrator', 'is_open': '1', 'modification_ts': '2016-11-29 17:33:09', 'updater_login': 'admin', 'author_id': '1', 'version': '1', 'steps': [{'active': '1', 'step_number': '1', 'id': '108', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n'}], 'id': '107', 'author_login': 'admin', 'status': '1', 'creation_ts': '2016-07-21 11:26:32', 'node_order': '1000', 'preconditions': '', 'summary': '', 'tc_external_id': '8', 'updater_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-8', 'name': 'test-n-创建储值卡支付订单', 'estimated_exec_duration': '', 'updater_id': '1'}]
2017-01-15 17:06:57,330 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 17:06:57,609 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:06:57,609 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170654', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 17:06:57,610 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:06:57,610 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:06:57,610 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:06:57,610 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:06:57,610 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170654', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:06:57,611 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:06:57,611 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:06:57,612 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:06:57,612 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:06:57,612 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:06:57,612 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:06:57,612 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:06:57,612 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:06:57,613 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:06:57,613 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:06:57,613 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 17:06:57,663 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:06:57,664 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:06:57,664 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:06:55 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:06:57,665 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:06:57,665 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:06:57,667 testcase.py[line: 133] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:06:57,667 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:06:57,668 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:06:57",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '匹配规则': '包含字符串', '条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '检查': 'body'}" WHERE executed_history_id = 20170115170654 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:06:57,675 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:06:57,675 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:06:57" WHERE executed_history_id = 20170115170654 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:06:57,680 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 17:07:28,428 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 17:07:28,428 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 17:07:28,441 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 17:07:28,444 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 17:07:28,509 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 17:07:28,509 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 17:07:28,512 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 17:07:28,513 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 17:07:28,515 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 17:07:28,517 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 17:07:28,517 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 17:07:28,699 global_function.py[line: 19] INFO: 获取测试用例信息 [{'testcase_id': '148', 'author_first_name': 'Testlink', 'preconditions': '<p>\n\t初始化用例</p>\n', 'importance': '2', 'tc_external_id': '1', 'id': '149', 'active': '1', 'updater_id': '1', 'modification_ts': '2016-11-30 15:41:36', 'author_last_name': 'Administrator', 'layout': '1', 'summary': '', 'testsuite_id': '147', 'author_id': '1', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'id': '183', 'active': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'step_number': '2', 'id': '182', 'active': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '3', 'id': '150', 'active': '1'}], 'status': '1', 'author_login': 'admin', 'is_open': '1', 'updater_last_name': 'Administrator', 'updater_first_name': 'Testlink', 'name': 'test-n-登陆掌贝pos机', 'estimated_exec_duration': '', 'updater_login': 'admin', 'creation_ts': '2016-07-27 18:32:10', 'full_tc_external_id': 'pj_pos-1', 'execution_type': '1', 'node_order': '1000', 'version': '1'}]
2017-01-15 17:07:28,859 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 17:07:29,638 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:07:29,638 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170728', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 17:07:29,640 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 17:07:29,640 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 17:07:29,640 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 17:07:29,641 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:07:29,641 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170728', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:07:29,642 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:07:29,643 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:07:29,643 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 17:07:29,646 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 17:07:29,646 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:07:29,646 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 17:07:29,647 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:07:29,647 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:07:29",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115170728 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:07:29,649 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 17:07:29,649 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 17:07:29,649 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:07:29,649 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170728', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:07:29,651 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:07:29,651 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 17:07:29,651 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 17:07:29,652 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 17:07:29,656 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 17:07:29,656 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:07:29,656 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 17:07:29,656 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:07:29,657 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:07:29",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'device_no': 1, 'serial_no': 2}, '检查': 'body'}" WHERE executed_history_id = 20170115170728 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:07:29,659 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 17:07:29,659 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 17:07:29,659 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:07:29,659 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170728', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:07:29,661 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:07:29,661 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 17:07:29,661 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:07:29,661 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:07:29,662 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 17:07:29,662 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 17:07:29,662 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 17:07:29,662 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 17:07:29,662 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 17:07:29,663 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 17:07:29,663 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 17:07:29,663 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 17:07:29,663 httpprotocol.py[line: 76] INFO: 请求头为：{'SerialNo': '[CaseStep.serial_no]', 'Content-Type': 'application/json;charset=utf-8', 'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0', 'DeviceId': '[CaseStep.device_no]'}
2017-01-15 17:07:30,047 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 17:07:30,048 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 17:07:30,048 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:07:27 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:07:30,048 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:07:30,048 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:07:30,048 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:07:30,049 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 17:07:30,049 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:07:30,049 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 17:07:29",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'ProtocolVersion': '4.0', 'ProductVersion': '[global_product_version]', 'SerialNo': '[CaseStep.serial_no]', 'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'匹配规则': '键值相等', '条件': [{'模式': {'success': True}, '消息': '登录失败,success不为true'}, {'模式': {'message': '成功'}, '消息': 'message不为成功'}, {'模式': {'code': '4001'}, '消息': 'code不为4001'}], '输出': {'OperatorId': {'operator': {'id': 'value'}}, 'Token': {'token': 'value'}}, '检查': 'body'}" WHERE executed_history_id = 20170115170728 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:07:30,051 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:07:30,051 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:07:29" WHERE executed_history_id = 20170115170728 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:07:30,053 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 17:07:30,053 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '')
2017-01-15 17:07:30,053 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 17:07:30,053 main.py[line: 115] INFO: 运行指定项目
2017-01-15 17:07:30,168 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 17:07:30,169 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 17:07:30,171 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 17:07:30,171 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 17:07:30,332 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 17:07:30,466 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 17:07:30,466 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 17:07:30,618 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['114', '80', '110', '106', '98', '102', '88', '76', '126', '93', '120'])
2017-01-15 17:07:30,782 testplan.py[line: 45] INFO: 获取测试用例信息 [{'testcase_id': '114', 'author_first_name': 'Testlink', 'preconditions': '', 'importance': '2', 'tc_external_id': '10', 'id': '115', 'active': '1', 'updater_id': '1', 'modification_ts': '2016-11-29 17:52:17', 'author_last_name': 'Administrator', 'layout': '1', 'summary': '', 'testsuite_id': '113', 'author_id': '1', 'steps': [{'expected_results': '', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'id': '116', 'active': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '2', 'id': '117', 'active': '1'}], 'status': '1', 'author_login': 'admin', 'is_open': '1', 'updater_last_name': 'Administrator', 'updater_first_name': 'Testlink', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'estimated_exec_duration': '', 'updater_login': 'admin', 'creation_ts': '2016-07-25 15:02:41', 'full_tc_external_id': 'wecharno-10', 'execution_type': '1', 'node_order': '1000', 'version': '1'}]
2017-01-15 17:07:30,911 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:07:30,911 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170728', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:07:30,913 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 17:07:30,913 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 17:07:30,913 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:07:30,913 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:07:30,913 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170728', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:07:30,914 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:07:31,052 global_function.py[line: 19] INFO: 获取测试用例信息 [{'testcase_id': '106', 'author_first_name': 'Testlink', 'preconditions': '', 'importance': '2', 'tc_external_id': '8', 'id': '107', 'active': '1', 'updater_id': '1', 'modification_ts': '2016-11-29 17:33:09', 'author_last_name': 'Administrator', 'layout': '1', 'summary': '', 'testsuite_id': '105', 'author_id': '1', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'id': '108', 'active': '1'}], 'status': '1', 'author_login': 'admin', 'is_open': '1', 'updater_last_name': 'Administrator', 'updater_first_name': 'Testlink', 'name': 'test-n-创建储值卡支付订单', 'estimated_exec_duration': '', 'updater_login': 'admin', 'creation_ts': '2016-07-21 11:26:32', 'full_tc_external_id': 'wecharno-8', 'execution_type': '1', 'node_order': '1000', 'version': '1'}]
2017-01-15 17:07:31,183 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 17:07:31,442 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:07:31,442 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170728', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 17:07:31,444 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:07:31,444 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:07:31,445 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:07:31,445 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:07:31,445 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115170728', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:07:31,446 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:07:31,446 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:07:31,446 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:07:31,446 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:07:31,446 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:07:31,446 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:07:31,447 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:07:31,447 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:07:31,447 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:07:31,447 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:07:31,447 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 17:07:31,492 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:07:31,492 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:07:31,492 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:07:29 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:07:31,492 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:07:31,492 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:07:31,493 testcase.py[line: 133] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:07:31,493 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:07:31,493 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:07:31",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}], '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body'}" WHERE executed_history_id = 20170115170728 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:07:31,495 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:07:31,495 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:07:31" WHERE executed_history_id = 20170115170728 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:07:31,496 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 17:11:04,541 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 17:11:04,541 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 17:11:04,560 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 17:11:04,564 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 17:11:04,640 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 17:11:04,641 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 17:11:04,644 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 17:11:04,644 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 17:11:04,647 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 17:11:04,649 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 17:11:04,649 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 17:11:04,893 global_function.py[line: 19] INFO: 获取测试用例信息 [{'execution_type': '1', 'updater_last_name': 'Administrator', 'summary': '', 'node_order': '1000', 'modification_ts': '2016-11-30 15:41:36', 'preconditions': '<p>\n\t初始化用例</p>\n', 'updater_login': 'admin', 'version': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'step_number': '1', 'id': '183', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'step_number': '2', 'id': '182', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'id': '150', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n'}], 'layout': '1', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'name': 'test-n-登陆掌贝pos机', 'author_last_name': 'Administrator', 'tc_external_id': '1', 'testcase_id': '148', 'creation_ts': '2016-07-27 18:32:10', 'is_open': '1', 'updater_id': '1', 'author_first_name': 'Testlink', 'testsuite_id': '147', 'importance': '2', 'active': '1', 'estimated_exec_duration': '', 'id': '149', 'status': '1', 'full_tc_external_id': 'pj_pos-1', 'author_id': '1'}]
2017-01-15 17:11:05,029 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 17:11:05,835 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:11:05,836 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '')
2017-01-15 17:11:05,837 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 17:11:05,838 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 17:11:05,838 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 17:11:05,838 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:05,839 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:05,840 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:11:05,840 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:05,841 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 17:11:05,845 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 17:11:05,845 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:11:05,845 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 17:11:05,845 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:11:05,845 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:11:05",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115171104 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:11:05,848 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 17:11:05,848 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 17:11:05,848 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:05,848 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:05,850 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:11:05,850 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 17:11:05,850 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 17:11:05,850 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 17:11:05,854 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 17:11:05,854 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:11:05,854 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 17:11:05,855 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:11:05,855 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:11:05",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'device_no': 1, 'serial_no': 2}, '检查': 'body'}" WHERE executed_history_id = 20170115171104 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:11:05,857 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 17:11:05,857 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 17:11:05,858 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:05,858 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:05,860 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:11:05,860 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 17:11:05,860 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:05,860 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:05,861 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 17:11:05,861 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 17:11:05,861 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 17:11:05,861 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 17:11:05,861 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 17:11:05,862 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 17:11:05,862 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 17:11:05,862 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 17:11:05,862 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'ProtocolVersion': '4.0', 'ProductVersion': '[global_product_version]', 'SerialNo': '[CaseStep.serial_no]'}
2017-01-15 17:11:06,252 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 17:11:06,252 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 17:11:06,252 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:11:03 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:11:06,252 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:11:06,252 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:11:06,252 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:11:06,254 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 17:11:06,254 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:11:06,254 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 17:11:05",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0', 'SerialNo': '[CaseStep.serial_no]', 'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'匹配规则': '键值相等', '条件': [{'模式': {'success': True}, '消息': '登录失败,success不为true'}, {'模式': {'message': '成功'}, '消息': 'message不为成功'}, {'模式': {'code': '4001'}, '消息': 'code不为4001'}], '输出': {'OperatorId': {'operator': {'id': 'value'}}, 'Token': {'token': 'value'}}, '检查': 'body'}" WHERE executed_history_id = 20170115171104 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:11:06,256 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:11:06,256 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:11:05" WHERE executed_history_id = 20170115171104 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:11:06,257 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 17:11:06,257 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '')
2017-01-15 17:11:06,258 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 17:11:06,258 main.py[line: 115] INFO: 运行指定项目
2017-01-15 17:11:06,384 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 17:11:06,385 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 17:11:06,386 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 17:11:06,386 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 17:11:06,554 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 17:11:06,714 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 17:11:06,715 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 17:11:06,876 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['88', '76', '126', '106', '98', '102', '114', '80', '110', '93', '120'])
2017-01-15 17:11:06,996 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'updater_last_name': 'Administrator', 'summary': '', 'node_order': '1000', 'modification_ts': '2016-11-29 17:58:09', 'preconditions': '', 'updater_login': 'admin', 'version': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'id': '175', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n'}, {'execution_type': '1', 'active': '1', 'expected_results': '', 'step_number': '2', 'id': '174', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'id': '90', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'step_number': '4', 'id': '176', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '5', 'id': '177', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n'}], 'layout': '1', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'name': 'test-n-把商品加入购物车', 'author_last_name': 'Administrator', 'tc_external_id': '4', 'testcase_id': '88', 'creation_ts': '2016-07-20 12:07:40', 'is_open': '1', 'updater_id': '1', 'author_first_name': 'Testlink', 'testsuite_id': '87', 'importance': '2', 'active': '1', 'estimated_exec_duration': '', 'id': '89', 'status': '1', 'full_tc_external_id': 'wecharno-4', 'author_id': '1'}]
2017-01-15 17:11:07,108 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:11:07,108 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:11:07,110 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 17:11:07,110 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 17:11:07,110 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 17:11:07,110 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:07,110 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:07,111 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:11:07,111 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:11:07,111 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 17:11:07,111 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 17:11:07,114 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2017-01-15 17:11:07,114 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:11:07,114 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}]
2017-01-15 17:11:07,115 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:11:07,115 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:11:07",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115171104 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:07,116 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2017-01-15 17:11:07,116 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:11:07,116 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:07,116 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:07,117 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:11:07,117 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2017-01-15 17:11:07,118 casestep.py[line: 149] INFO: 转换后的参数体为：(167020,)
2017-01-15 17:11:07,118 mydb.py[line: 72] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2017-01-15 17:11:07,713 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:11:07,713 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:11:07",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '\u53c2\u6570': [167020]}", expected_results="" WHERE executed_history_id = 20170115171104 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:07,715 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2017-01-15 17:11:07,716 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2017-01-15 17:11:07,716 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:07,716 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:07,717 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:11:07,717 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:11:07,717 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:11:07,718 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:11:07,718 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', 26838), ('standardId', 'undefined'), ('amount', 1), ('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 17:11:07,718 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:07,718 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:11:07,718 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2017-01-15 17:11:07,718 httpprotocol.py[line: 75] INFO: 参数为：b'mallGoodsId=26838&standardId=undefined&amount=1&serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2017-01-15 17:11:07,718 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:11:08,287 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:11:08,288 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"加入购物车失败","attach":null}
2017-01-15 17:11:08,288 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:11:06 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:11:08,289 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:11:08,289 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:11:08,289 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:11:08,291 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 17:11:08,292 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:11:08,292 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 把商品加如购物车失败,success不为true", protocol_method="post", runtime="2017-01-15 17:11:07",step_action="{'\u65b9\u6cd5': 'post', 'url': '/addtocart', '\u53c2\u6570': {'mallGoodsId': 26838, 'standardId': 'undefined', 'amount': 1, 'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'匹配规则': '键值相等', '条件': [{'模式': {'success': True}, '消息': '把商品加如购物车失败,success不为true'}], '检查': 'body'}" WHERE executed_history_id = 20170115171104 AND testcase_id = 88 AND step_id = 90 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:08,296 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:11:08,296 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:11:07" WHERE executed_history_id = 20170115171104 AND testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:08,440 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=88]的执行结果
2017-01-15 17:11:08,726 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '2', 'updater_last_name': 'Administrator', 'summary': '', 'node_order': '1000', 'modification_ts': '2016-11-29 18:17:12', 'preconditions': '', 'updater_login': 'admin', 'version': '1', 'steps': [{'execution_type': '2', 'active': '1', 'expected_results': '<p>\n\t｛&ldquo;检查&rdquo;:&ldquo;BODY&rdquo;，</p>\n<p>\n\t&ldquo;匹配规则&rdquo;：&ldquo;包含字符串&rdquo;，</p>\n<p>\n\t&ldquo;条件&rdquo;：【｛&ldquo;模式&rdquo;：&ldquo;\\&quot;currentPage\\&quot;:1&rdquo;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝，｛&ldquo;模式&rdquo;：&ldquo;\\&quot;pageStartRow\\&quot;:0&quot;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝】</p>\n<p>\n\t｝</p>\n', 'step_number': '1', 'id': '78', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/plist&quot;,<br />\n\t&quot;参数&quot;:{&quot;page_size&quot;:&quot;10&quot;,&quot;page_no&quot;:&quot;1&quot;,&quot;cateIds&quot;:&quot;&quot;,&quot;orderBy&quot;:&quot;&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;name&quot;:&quot;&quot;}<br />\n\t}</p>\n'}], 'layout': '1', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'name': 'test-n-显示默认页面', 'author_last_name': 'Administrator', 'tc_external_id': '1', 'testcase_id': '76', 'creation_ts': '2016-07-18 15:52:00', 'is_open': '1', 'updater_id': '1', 'author_first_name': 'Testlink', 'testsuite_id': '75', 'importance': '2', 'active': '1', 'estimated_exec_duration': '', 'id': '77', 'status': '1', 'full_tc_external_id': 'wecharno-1', 'author_id': '1'}]
2017-01-15 17:11:08,845 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:11:08,846 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 76, 'test-n-显示默认页面', '微商城-显示商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:11:08,846 testplan.py[line: 72] INFO: 开始执行测试用例[id=76，name=test-n-显示默认页面]
2017-01-15 17:11:08,847 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}
2017-01-15 17:11:08,847 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\"currentPage\":1","消息":"接口返回错误"},{"模式":"\"pageStartRow\":0","消息":"接口返回错误"}]}
2017-01-15 17:11:08,847 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:08,847 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 76, 'test-n-显示默认页面', 'plan1_of_wechatno', 'pj_wechatno', 78, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}', '{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\\"currentPage\\":1","消息":"接口返回错误"},{"模式":"\\"pageStartRow\\":0","消息":"接口返回错误"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:08,848 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:11:08,848 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:11:08,848 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:11:08,848 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('page_size', '10'), ('page_no', '1'), ('cateIds', ''), ('orderBy', ''), ('serial', '10549840601068216320'), ('name', '')])
2017-01-15 17:11:08,848 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:08,849 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:11:08,849 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/plist
2017-01-15 17:11:08,849 httpprotocol.py[line: 75] INFO: 参数为：b'page_size=10&page_no=1&cateIds=&orderBy=&serial=10549840601068216320&name='
2017-01-15 17:11:08,849 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:11:09,060 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:11:09,060 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"dataList":[{"id":27105,"name":"微信支付测试-二级","privateSerial":null,"price":0,"oriPrice":0,"description":"微信支付测试-二级","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/30/b9e21dc4-6cf2-4923-9ec7-4259ecea09c1.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":39,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27090,"name":"测试1222-3","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ea123913-89df-4384-929e-158617f67cbe.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":60,"standardLowPrice":980.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27072,"name":"二级规格1129-2","privateSerial":null,"price":0,"oriPrice":0,"description":"二级规格1129-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/29/9ecf031d-e9bd-427e-b147-cb4a1f8fe5d3.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":25,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27087,"name":"1221-1","privateSerial":null,"price":0,"oriPrice":0,"description":"1221-1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/21/1e844fc5-ee37-4393-97af-2a220971ef1f.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":48,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27040,"name":"一级变三级（改bug前）","privateSerial":null,"price":0,"oriPrice":0,"description":"一级规格1109-2一级规格1109-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/09/23b306d5-384d-4b3b-a4f7-a757d9fc0635.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":135,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27088,"name":"测试1222","privateSerial":null,"price":8,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ca612435-f6e1-4f0d-bc18-61e558e8f720.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":2341,"istop":0,"soldCount":4,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":7,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27089,"name":"测试1222-2","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/37bc7e08-1a2f-4c88-9542-ec5613686d7e.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":26,"standardLowPrice":2100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26955,"name":"乐视超级电视","privateSerial":null,"price":0,"oriPrice":0,"description":"乐视超级电视","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/10/31/3d3ca77e-d010-42f3-804f-bc8a563ec753.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":88,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26971,"name":"多级规格测试010","privateSerial":null,"price":0,"oriPrice":0,"description":"多级规格测试010","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/01/fface01c-5d06-400e-bf7b-2ae2fd64c858.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":15,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27057,"name":"裙子","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/13dbced7-faae-4e13-aebe-6f69d72dc7e0.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":101,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false}],"pageInfo":{"pageSize":10,"currentPage":1,"totalPages":5,"totalRows":47,"pageStartRow":0,"pageEndRow":10,"pagination":true,"hasNextPage":true,"hasPreviousPage":false,"params":null,"needCount":true}}
2017-01-15 17:11:09,063 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:11:06 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:11:09,063 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:11:09,063 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2017-01-15 17:11:09,063 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2017-01-15 17:11:09,063 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:11:09,063 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:11:09,063 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2017-01-15 17:11:08",step_action="{'\u65b9\u6cd5': 'post', 'url': '/goods/plist', '\u53c2\u6570': {'page_size': '10', 'page_no': '1', 'cateIds': '', 'orderBy': '', 'serial': '10549840601068216320', 'name': ''}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': ''currentPage':1', '消息': '接口返回错误'}, {'模式': ''pageStartRow':0', '消息': '接口返回错误'}], '检查': 'BODY'}" WHERE executed_history_id = 20170115171104 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:09,065 testcase.py[line: 165] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2017-01-15 17:11:09,065 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:11:09,065 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 17:11:08" WHERE executed_history_id = 20170115171104 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:09,201 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2017-01-15 17:11:09,465 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'updater_last_name': 'Administrator', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'node_order': '1000', 'modification_ts': '2016-11-29 19:43:22', 'preconditions': '', 'updater_login': 'admin', 'version': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '', 'step_number': '1', 'id': '181', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n'}, {'execution_type': '1', 'active': '1', 'expected_results': '', 'step_number': '2', 'id': '180', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'id': '128', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n'}], 'layout': '1', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'name': 'test-n-免费领取优惠券', 'author_last_name': 'Administrator', 'tc_external_id': '12', 'testcase_id': '126', 'creation_ts': '2016-07-26 15:06:38', 'is_open': '1', 'updater_id': '1', 'author_first_name': 'Testlink', 'testsuite_id': '125', 'importance': '2', 'active': '1', 'estimated_exec_duration': '', 'id': '127', 'status': '1', 'full_tc_external_id': 'wecharno-12', 'author_id': '1'}]
2017-01-15 17:11:09,592 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:11:09,592 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:11:09,593 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 17:11:09,593 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 17:11:09,594 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:11:09,594 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:11:09,594 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:09,594 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 17:11:09,600 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:11:09,600 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:11:09",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115171104 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:09,603 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 17:11:09,604 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:11:09,604 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:09,604 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:09,606 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:11:09,607 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:09,607 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 17:11:09,613 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:11:09,613 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:11:09",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115171104 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:09,615 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 17:11:09,615 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 17:11:09,615 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:09,615 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:09,616 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 17:11:09,616 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:11:09,616 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 17:11:09" WHERE executed_history_id = 20170115171104 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:09,753 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 17:11:10,026 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'updater_last_name': 'Administrator', 'summary': '', 'node_order': '1000', 'modification_ts': '2016-11-29 17:33:09', 'preconditions': '', 'updater_login': 'admin', 'version': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'id': '108', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n'}], 'layout': '1', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'name': 'test-n-创建储值卡支付订单', 'author_last_name': 'Administrator', 'tc_external_id': '8', 'testcase_id': '106', 'creation_ts': '2016-07-21 11:26:32', 'is_open': '1', 'updater_id': '1', 'author_first_name': 'Testlink', 'testsuite_id': '105', 'importance': '2', 'active': '1', 'estimated_exec_duration': '', 'id': '107', 'status': '1', 'full_tc_external_id': 'wecharno-8', 'author_id': '1'}]
2017-01-15 17:11:10,143 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:11:10,143 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:11:10,144 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:11:10,144 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:11:10,144 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:11:10,144 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:10,145 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:10,145 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:11:10,146 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:11:10,146 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:11:10,146 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:11:10,146 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:11:10,146 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:10,146 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:10,146 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:11:10,147 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:11:10,147 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:11:10,147 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 17:11:10,198 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:11:10,199 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:11:10,199 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:11:08 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:11:10,200 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:11:10,200 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:11:10,202 testcase.py[line: 133] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:11:10,202 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:11:10,202 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:11:10",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}], '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body'}" WHERE executed_history_id = 20170115171104 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:10,209 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:11:10,209 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:11:10" WHERE executed_history_id = 20170115171104 AND testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:10,342 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=106]的执行结果
2017-01-15 17:11:10,614 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'updater_last_name': 'Administrator', 'summary': '', 'node_order': '1000', 'modification_ts': '2016-11-29 18:13:45', 'preconditions': '', 'updater_login': 'admin', 'version': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;code&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;200&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'id': '101', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n'}], 'layout': '1', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'name': 'test-n-查看购物车商品列表', 'author_last_name': 'Administrator', 'tc_external_id': '6', 'testcase_id': '98', 'creation_ts': '2016-07-20 15:50:42', 'is_open': '1', 'updater_id': '1', 'author_first_name': 'Testlink', 'testsuite_id': '97', 'importance': '2', 'active': '1', 'estimated_exec_duration': '', 'id': '99', 'status': '1', 'full_tc_external_id': 'wecharno-6', 'author_id': '1'}]
2017-01-15 17:11:10,762 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:11:10,762 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 98, 'test-n-查看购物车商品列表', '微商城-查看购物车商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:11:10,763 testplan.py[line: 72] INFO: 开始执行测试用例[id=98，name=test-n-查看购物车商品列表]
2017-01-15 17:11:10,764 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2017-01-15 17:11:10,764 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}
2017-01-15 17:11:10,764 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:10,764 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 98, 'test-n-查看购物车商品列表', 'plan1_of_wechatno', 'pj_wechatno', 101, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:10,765 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:11:10,765 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:11:10,766 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:11:10,766 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:11:10,766 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 17:11:10,766 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:10,766 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:11:10,767 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2017-01-15 17:11:10,767 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:11:10,785 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:11:10,786 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"code":"4000","message":"Server Error"}
2017-01-15 17:11:10,786 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:11:08 GMT'), ('Content-Type', 'application/json;charset=ISO-8859-1'), ('Content-Length', '56'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:11:10,786 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:11:10,786 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：200
2017-01-15 17:11:10,786 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:11:10,787 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:11:10,787 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:11:10",step_action="{'\u65b9\u6cd5': 'get', 'url': '/cartlist?', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': '200', '消息': '把商品移出购物车中失败'}], '检查': 'code'}" WHERE executed_history_id = 20170115171104 AND testcase_id = 98 AND step_id = 101 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:10,789 testcase.py[line: 165] INFO: 测试用例[id=98, name=test-n-查看购物车商品列表]执行成功
2017-01-15 17:11:10,789 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:11:10,789 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 17:11:10" WHERE executed_history_id = 20170115171104 AND testcase_id = 98 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:10,906 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=98]的执行结果
2017-01-15 17:11:11,176 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'updater_last_name': 'Administrator', 'summary': '', 'node_order': '1001', 'modification_ts': '2016-11-29 18:14:53', 'preconditions': '', 'updater_login': 'admin', 'version': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;到店支付&quot;,&quot;消息&quot;:&quot;无法打开商品详情&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'id': '104', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/mall/tobuy/1?&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:&quot;26838&quot;,&quot;amount&quot;:1,&quot;type&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n'}], 'layout': '1', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'name': 'test-n-点击立即购买按钮', 'author_last_name': 'Administrator', 'tc_external_id': '7', 'testcase_id': '102', 'creation_ts': '2016-07-20 16:48:26', 'is_open': '1', 'updater_id': '1', 'author_first_name': 'Testlink', 'testsuite_id': '79', 'importance': '2', 'active': '1', 'estimated_exec_duration': '', 'id': '103', 'status': '1', 'full_tc_external_id': 'wecharno-7', 'author_id': '1'}]
2017-01-15 17:11:11,291 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:11:11,292 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 102, 'test-n-点击立即购买按钮', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:11:11,293 testplan.py[line: 72] INFO: 开始执行测试用例[id=102，name=test-n-点击立即购买按钮]
2017-01-15 17:11:11,293 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}
2017-01-15 17:11:11,293 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}
2017-01-15 17:11:11,294 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:11,294 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 102, 'test-n-点击立即购买按钮', 'plan1_of_wechatno', 'pj_wechatno', 104, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:11,296 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:11:11,296 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:11:11,296 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:11:11,297 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', '26838'), ('amount', 1), ('type', 1), ('serial', '10549840601068216320')])
2017-01-15 17:11:11,297 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:11,297 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:11:11,297 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/mall/tobuy/1?mallGoodsId=26838&amount=1&type=1&serial=10549840601068216320
2017-01-15 17:11:11,297 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:11:11,714 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:11:11,714 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 
	 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta http-equiv="Expires" CONTENT="0">
<meta http-equiv="Cache-Control" CONTENT="no-cache">
<meta http-equiv="Pragma" CONTENT="no-cache">
<title>微商城</title>
<link rel="stylesheet" href="/css/mall/pure.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/grids-core.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/zepto.alert.css?v=5.0.0-faae2">

<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.ios7.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.animation.css?v=5.0.0-faae2">
</head>
<style type="text/css">
* {
	margin: 0;
	padding: 0;
}

html {
	color: #626262;
	overflow-y: auto;
	overflow-x: hidden;
}

body {
	margin-bottom: 20px;
	overflow-y: auto;
	overflow-x: hidden;
}

a {
	text-decoration: none;
}

ol,ul {
	list-style: outside none none;
}

.left {
	float: left;
}

.right {
	float: right;
}

.in-block {
	display: inline-block;
}

.orange {
	color: #c58d04;
}

.grey {
	color: #adadad;
}

.bg-color {
	background: #ececec;
}

#wrapper {
	width: 100%;
	margin: 0 auto;
}

.header {
	width: 100%;
}

.header ul {
	position:relative;
	overflow: hidden;
}

.header ul li {
	width: 50%;
	float: left;
	height: 2.8em;
	line-height: 2.8em;
	background: #fff;
	text-align: center;
	border-bottom:1px solid #f38b44;
	-moz-box-sizing:border-box; /* Firefox */
     -webkit-box-sizing:border-box; /* Safari */
     box-sizing:border-box;
}
.header ul .lines{
	position: absolute;
	width: 1%;
	height: 2.8em;
	line-height: 2.8em;
	border-right: 1px solid #FDE5D4;
	left: 49%;
	top: -1px;
 } 
.header ul li a {
	color: #8b898a;
}

.tab_content>div {
	height: auto;
	font-size: 0.8em;
	margin: 0.5em 0;
}

.empty-p {
	width: 80%;
	float: left;
	padding: 0.5em 0;
}

.has-p {
    width: 100%;
    margin: 0 auto;
    padding: 0 1em;
    height: auto;
    line-height: 2.5em;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -webkit-box-sizing: -webkit-border-box;
}
.has-p-one{
    background: url(/images/mall/contact.png) no-repeat left center;
    background-size: 12px 12px;
}
.has-p-two{
    background: url(/images/mall/take.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.has-p-three{
    background: url(/images/mall/time.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.input-right{
    position: relative;
}
.input-right-img{
    width: 1em;
    position: absolute;
    right: 0.6em;
    top: 0.3em;
}
#scheduledTime{
    width:11em;
    height: 2em;
    border:1px solid #a0a0a0;
    border-radius:4px;
    color:#a0a0a0;
    text-indent:.5em
}
.hiddens-p{
    text-overflow:ellipsis; 
    overflow:hidden; 
    white-space:nowrap;  
}

.right-dashed {
	border-left: 1px solid #eee;
	margin-top: 1em;
	padding-bottom:1em;
}

#edit {
	padding: 1em 0 1em 2em;
    width: 10px;
}

.header ul li.active{
    border-bottom: 4px solid #f38b44;
}
.header ul li.active a{
    color: #f38b44!important;
}
.buy_title{
	background:#f3f3f3;
	padding:0.3em 1em;
	margin: 0;
}
.content {
	width: 100%;
	background: #fff;
	overflow: hidden;	
	padding-bottom:8%;
}

.selectList {
	border-bottom: 1px solid #efefef;
	margin: 0 auto;
	overflow: hidden;
	padding: 0.5em 1em;
	font-size: 0.8em;
	clear:both;
}

.selectList img {
    display: inline-block;
    float: left;
    width: 25%;
    border-radius: 4px;
    -webkit-border-radius: 4px;
}

.button {
	display:block;	
	width: 99%;	
	height: 3em;
	color: #fff;
	border: none;
	border-radius: 4px;
	margin:0 auto 0.5em auto;
}

.addbtn {
	background: #33CC66;
}

.btn-wrap-5 {
	padding: 0 1em;
}
.buybtn {
	width: 100%;
	background: #f68d3c;
}

.footer {
	width: 100%;
	background: #fff;
	color: #b6b6b6;
	overflow: hidden;
	text-align: left;
	margin-bottom: 1em;
}

.all-end-button {
	width: 90%;
	margin: 1em auto 0.5em;
}

.all-end-button p:first-child {
	text-align: left;
}

.error-page{
	background: #ddd;
    padding-bottom: 2em;
}
.error-page img{
    margin:0 auto;
	padding-top: 2em;
}
.error-page p{
    text-align:center;
    color:#000;
    width:80%;
    margin:1em auto 2em;
}
#deliverFee{
	text-align:left;
	font-size:0.8em;
	color:#acb0af;
}
.order-div{
    margin-left: 26.8%;            
    position: relative;
}
.order-div>p:last-child{
    width: 100%;
    margin: 0;
    position: absolute;
    bottom: 0;
    left: 0;
}
.m-t-n{
    margin-top: 0;
}
.m-t-n>span{
    display: inline-block;
}
.m-t-n>span:first-child{
    width: 70%;
}
.m-t-n>span:last-child{
    width: 30%;
}
.mtn-span{
    float: right;
}
.t-r-span{
	text-align:right;
}
.ccc{
    color: #ccc;
}
.peisong{
    text-align: right;
    margin-bottom: 0;
    padding-right: 1em;
    padding-top: 0.4em;
}
.peisong-detail{
    color:#000;
}
.peisong-detail input{
    border: none;
}
.peisong-detail div>p{
    padding-left: 1.8em;
    padding-top: 0.8em;
    padding-bottom: 0.8em;
    margin: 0;
    clear:both;
}

.weipay{            
    background: url(/images/weixin2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}        
.peisong-detail div>p.pay{
    background: url(/images/money2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.cardpay{
    background: url(/images/cardpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.mdpay{
    background: url(/images/mdpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}

.peisong-detail div[class^="btn-wrap-"] {
	border-bottom: 1px solid #dadada;
	padding: 0 1em;
	height: 3em;
	position: relative;
}

.weipay,.pay,.mdpay,.cardpay{
    position: relative;
}
 .weipay>img,.mdpay>img,.pay>img,.cardpay>img,.zhifu input{
    width: 1.2em;
    height: 1.2em;
    position: absolute;
    right: 0;
    top: 50%;
    transform:translateY(-50%);
}

.pure-img-check {
	background: url(/images/weixuan2.png) no-repeat left center;
    background-size:1.05em 1.05em; 
    float: right;
    height: 1.05em;
    width: 1.05em;
}

.zhifu input{
    display: none;
}
#deliverFeeDiv, #FetchDiv {
	border-bottom: 1px solid #efefef;
    padding: 0.5em 1em;
}
#deliverFeeDiv p, #FetchDiv p{
	text-align:right;
}

#remark {
	padding: 0.5em 1em;
	height: 4em;
	font-size: 1.0em;
}

.tab-adress {
	position: relative;
}
.icon-wrap {
	/*float: right;*/
	position: absolute;
	top: 11px;
	right: 10px;
}
.icon-wrap-spe {
	top: 0;
}

/*toast提示*/
.toastBlock {
    display: none; 
    position: fixed;
    bottom: 50%;
    width: 100%;
    text-align: center;
    transition: opacity 1s ease-out;
    z-index: 19;
}
.toastBlock .toastContent {
    display: inline-block;
    padding: 18px;
    border-radius: 5px;
    font-size: 14px;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.7);
}
</style>
<body>
	<div id="wrapper">
		
			
			
			
				
					
					
						
						
						
						
						
					
					
				
				
			
			<div class="header">
				
					<ul class="tab">
						<li class='active' data='#deliverFeeDiv'><a href="#tab1">快递发货</a></li>						
						<li class=''><a href="#tab2">到店自提</a></li>
						<span class="lines"></span>
					</ul>
				
			</div>
			<p class="buy_title"></p>
			
			<div class="tab_container">
				<div id="tab1" class="tab_content pure-g" style="">
					<div class="pure-u-24-24 tab-adress j-tab-adress">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">17817738178<span>(17817738178)</span></span>
								</div>
								<div class="has-p">
									<span>配送地址：</span>
									<span class="pure-u-3-5">天津市县宁河县详细</span>
                                </div>

                                <span class="icon-wrap">
                                	
                                		
                                		
                                		<a class="url_adress" href="/toaddr/1?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
                                		</a>
                                		
                                	
                                </span>
							
							
						
					</div>
				</div>
				<div id="tab2" class="tab_content pure-g" style="display:none">
					<div class="pure-u-24-24">
						
							
								<div class="tab-adress j-tab-adress">
									<div class="has-p">
										<span>联系方式：</span>
										<span class="pure-u-3-5">452<span>(17817738178)</span></span>
									</div>
	                                <div class="has-p">
	                                	<span>门&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;店：</span>
	                                	<span class="pure-u-3-5">
	                                		广东省深圳市福田区
		                                	
		                                		Biu
		                                	
	                                	</span>
	                                </div>
	                                <span class="icon-wrap">
	                                	
	                                		
	                                		
	                                		<a class="url_adress" href="/toaddr/2?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
	                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
	                                		</a>
	                                		
	                                	
	                                </span>
                                </div>
                               	<div class="has-p">
                               		<span>到店时间：</span>
                               		<span class="input-right">
                               			<input type="text" id="scheduledTime" name="scheduledTime" class="text" placeholder="请选择"/><img src="/images/mall/input-right.png?v=5.0.0-faae2" class="input-right-img">
                               		</span>
                               	</div>
							
							
						
					</div>
				</div>
			</div>
			<p class="buy_title"></p>
			
			<div class="content">
				
					
						
							<div class="selectList">
								<img src="http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg"> 
								
									
									
										<div class="order-div">
											<p class="m-t-n"><span>接口-测试商品1</span><span class="mtn-span t-r-span">￥0.01</span></p>
											<p><span class="ccc mtn-span">X1</span></p>
                                        </div>	
									
								
							</div>
						
					
					
					
				
				<div id="deliverFeeDiv">
					 
						
						
							<p id="deliverFee">含运费：￥0.01</p>
							<p class="orange">合计：￥0.02</p>
						
					 
				</div>
				<div id="FetchDiv" style="display: none;">
					<p class="orange">合计：￥0.01</p>
				</div>
				<div id="remark">
					<span class="beizhu" style="float:left">备注：</span>
                   	<span class="beizhulan">
                   		<textarea rows="3" placeholder="可于此处给卖家留言备注" style="border:0;width: 85%;"></textarea>
                   	</span>
				</div>
			</div>
			<p class="buy_title"></p>
			<div class="footer">
				<div class="peisong-detail zhifu">
                	
                        <div class="btn-wrap-1">
                         	<p class="weipay">微信支付<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="1"/>
                         	</p>
                        </div>
                    
                  	
                  	
                        <div class="btn-wrap-2" style="">
                         	<p class="pay">货到付款<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="3"/>
                         	</p>
                        </div>
                   	
		
                    
                        <div class="btn-wrap-3" style="display:none">
                        	<p class="mdpay">到店支付<span class="pure-img-check"></span>
                        		<input type="radio" name="zhifu" value="2"/>
                        	</p>
                        </div>
                   	
                   	
                   	
                        <div class="btn-wrap-4">
                       		<p class="cardpay">储值卡支付<span class="pure-img-check"></span>
                       			<input type="radio" name="zhifu" value="4"/>
                       		</p>
                        </div>
                   	
                </div>
			</div>
			<div class="btn-wrap-5">
				<input type="button" class="button buybtn submit" value="确认提交" />
			</div>

			<div id="toastId" class="toastBlock">
			    <span class="toastContent"></span>
			</div>
			
		
	</div>
	<script type="text/javascript" src="/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/touch.js?v=5.0.0-faae2"></script>
    
	<script type="text/javascript" src="/js/mall/zepto.alert.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mall.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.zepto.js?v=5.0.0-faae2" ></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.core.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.scroller.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.datetime.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.i18n.zh.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			$("input[name='zhifu']:checked").prev('.pure-img').attr('src','/images/check.png');
			var tab = parseInt("1");
			/* if(tab == 1){
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else if (tab == 0){
			    $("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} else if(parseInt("1") != 0){
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} */
			
			if ("true" == "true" && 1 == 1) {
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else {
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			}
			
			// 控制显示图片比例
			var img_left_heights = $(".selectList img").width()*(0.75);
			$(".selectList img,.order-div").css('height',img_left_heights);
			
			// 取货日期
			var now = new Date();
            $('#scheduledTime').mobiscroll().datetime({
                minDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()+1),
                maxDate: new Date(now.getFullYear(), now.getMonth()+3, now.getDate()),
                stepMinute: 30,
                dateOrder :"yymmdd",
                dateFormat:"yy-mm-dd",
                timeWheels:"HHii",
                timeFormat:"HH:ii",
                //invalid: [{ start: '00:00', end: '08:00' },{ start: '22:00', end: '23:59' }],
                theme: 'ios7',
                lang: 'zh',
                display: 'bottom',
                mode: 'mixed'
            });
            $('#scheduledTime').click(function(){
                $('#scheduledTime').mobiscroll('show'); 
                return false;
            });
            
			$("ul li").click(function() {
				$("ul li").removeClass("active");
				$(this).addClass("active");
				if($(this).attr("data")=="#deliverFeeDiv"){
					$("#deliverFeeDiv").show();
					$("#FetchDiv").hide();
				}else{
					$("#deliverFeeDiv").hide();
					$("#FetchDiv").show();
				}
				$(".tab_content").hide();
				var href = $(this).find("a").attr("href");
				$(href).show();
				
				if(href.endWith("tab1")) {
					$(".btn-wrap-2").show();
					$(".btn-wrap-3").hide();
				} else if(href.endWith("tab2")) {
					$(".btn-wrap-2").hide();
					$(".btn-wrap-3").show();
				}
				//清空已选择的支付方式
				$("input[name='zhifu']").prop("checked", false);
				$(".zhifu .pure-img-check").css('background-image','url(/images/weixuan2.png)');
				return false;
			});
			//商户设置的满额包邮价
			/* var noDeliverFee = toPrice(parseFloat("200")/100);
			var totalFee = parseFloat("0.01");
			if(totalFee > noDeliverFee){
				$("#deliverFeeDiv .orange").text("合计：￥"+ totalFee);
				$("#deliverFee").text("含运费：￥0.00");
			} */
			$('.zhifu>div').click(function(){
	            $("input[name=zhifu]").prop("checked", false);
	            $(".pure-img-check").css('backgroundImage','url(/images/weixuan2.png)');
	            var img_obj = $(this).find('.pure-img-check');
	            var backgroundImage = img_obj.css('background-image');
	            var input_obj = $(this).find('input');
	            if(backgroundImage.indexOf("weixuan2.png") > 0){
	                img_obj.css('background-image','url(/images/check.png)');
	                input_obj.prop("checked", "checked");
	            }else{
	                img_obj.css('background-image','url(/images/weixuan2.png)');
	                input_obj.prop("checked", false);
	            }
	        });


	        $(".j-tab-adress").click(function(event) {
	        	var _url = $(this).find('.url_adress').prop("href");

	        	window.location.href = _url;
	        });
		});
		
		function validateRemark(){
			var text = filtEmoji($('.beizhulan textarea').val());
			if(text != "" && text != undefined){
				if(text.length>30){
					$.dialog({
                        widths : '80%',
                        content : '您输入的备注过长，请不要超过30个字',
                        title : 'no',
                        fullok : function() {
                            return true;
                        },                       
                        lock : true
                    });	
					return false;
				}
				return true;
			}
			return true;
		}
		function filtEmoji (str) {
			return unescape(escape(str).replace(/\%uD.{3}/g, ''));
		}
		
		$(".submit").click(function(event){
			var payType = $("input[name='zhifu']:checked").val();
			if(null == payType || "" == payType || typeof(payType) == "undefined") {
       		 $.dialog({
                    widths : '80%',
                    content : '请选择支付方式',
                    title : 'no',
                    fullok : function() {
                        return true;
                    },                       
                    lock : true
                });
       			return;
       		}
			$.dialog({
                content : "确认提交订单？",
                title : "no",
                okText: '取消',
                cancelText : '确定', 
                ok : function() {
                	$(".ft-right").removeAttr("disabled");
                	return;
                },
                cancel : function() {                        	
               		
               		if(payType == 1){
               			if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				doAlert("no", "无效物流方式");
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@7fab1d8d";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/1", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "id=" + result.attach;
            	    			strParams += "&serial=10549840601068216320";
            	    			if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
            	        	});
            			}
               		}
               		
    				if(payType == 2){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@7fab1d8d";
    					if(shopBranch == "") {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					var _fetchTime = $("#scheduledTime").val();
    					if(null == _fetchTime || "" == _fetchTime) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请选择取货时间',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						
    						var _remark = filtEmoji($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							fetchTime : _fetchTime,
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/2/2", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 3){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑收货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });

    						var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
    						// var _remark = encodeURI($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/1/3", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 4){
    					if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				$.dialog({
        	                    widths : '80%',
        	                    content : '无效物流方式',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@7fab1d8d";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
            			// var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/4", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "?orderId=" + result.attach;
            					if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            					strParams += "&serial=10549840601068216320";
                				window.location.href = "/pay/5"+strParams;
            	        	});
            			}
            			
    				}
    				
                },
                lock : true
            });
		});
		
		//微信支付
		/* $(".payUseWX").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			var type = 0;
			$(".tab_content").each(function(){
				if($(this).css("display") != "none") {
					var attrId = $(this).attr("id");
					if(attrId == "tab1") {
						type = 1;//快递取货
					} else if(attrId == "tab2") {
						type = 2;//门店自提
					}
				}
			});
			if(type <= 0) {
				doAlert("no", "无效物流方式");
				return;
			}
			if(type == 1) {
				if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑收货地址");
					return;
				}
			}
			var _fetchTime = "";
			if(type == 2) {
				if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑取货地址");
					return;
				}
				_fetchTime = $("#scheduledTime").val();
				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
					doAlert("no", "请选择取货时间");
					return;
				}
				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@7fab1d8d";
				if(shopBranch == "") {
					doAlert("no", "请编辑取货地址");
					return;
				}
			}
			
			var _remark = encodeURI($(".beizhulan").find("textarea").val());
			var params = {
				serial : "10549840601068216320",
				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
				fm : "1",
				mallGoodsId : "26838",
				amount : "1",
				cartIds : "",
				fetchTime : _fetchTime,
				remark : _remark
			};
			if(parseInt("1") == 1 && parseInt("1") == 2){
				var standardId = "";
				if(standardId != null && standardId != undefined){
					params.standardId = standardId;
				}
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				$.post("/cmorder/" + type+ "/1", params, function(result){
					dialog.close();
					
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					
					var strParams = "id=" + result.attach;
	    			strParams += "&serial=10549840601068216320";
	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
	        	});
			}
		}); */
		//货到付款
		/* $(".payAfrecv").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑收货地址");
				return;
			}
			
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				var _remark = encodeURI($(".beizhulan").find("textarea").val());
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/1/3", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
	        	});
			}
		}); */
		//到店支付
		// $(".payInshop").click(function(event) {
			/* if($(this).prop("disabled") == true)
        		return false;
			
			var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@7fab1d8d";
			if(shopBranch == "") {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			var _fetchTime = $("#scheduledTime").val();
			if(null == _fetchTime || "" == _fetchTime) {
				doAlert("no", "请选择取货时间");
				return;
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				
				var _remark = $(".beizhulan").find("textarea").val();
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					fetchTime : _fetchTime,
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/2/2", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
	        	});
			} */
		// });
	
		// toast提示
		var toastTime=null;
		var displayTime=null;

		function setToast(html) {
		    if (toastTime != null) {
		        clearTimeout(toastTime);
		        clearTimeout(displayTime);
		    }
		    // $('toastId').style.display = 'block';
		    // $('toastId').style.opacity = 1;
		    $('#toastId').css({
		        display: 'block',
		        opacity: 1
		    });
		    $('#toastId .toastContent').text(html);

		    toastTime = setTimeout(function() {
		        // $('toastId').style.opacity = 0;
		        $('#toastId').css("opacity", 0);
		        displayTime = setTimeout(function() {
		            // $('toastId').style.display='none';
		            $('#toastId').css("display", "none");
		        }, 1000);
		    }, 1000);
		}

		function toastDisplay(str) {
		    setToast(str);
		}
	</script>
</body>
</html>
<!--加入判断用户是否关注公众号功能 add by lipengfei at 2015-11-9  -->
  	
	<script type="text/javascript" src="/js/bind/banner.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			//var SHOP_SERIAL = getCookie("SHOP_SERIAL");
			var SHOP_SERIAL = "10549840601068216320";
			if(null != SHOP_SERIAL && SHOP_SERIAL != ""){
				$.ajax({
					url : '/saofu_mobile/checkUserBindStatus',
					data : {
						"serial" : SHOP_SERIAL
					},
					type : 'post',
					cache : false,
					dataType : 'json',
					success : function(data) {
						if (data != null) {
							var guildFocusStr = data.guildFocusStr;
							if(guildFocusStr != null && guildFocusStr == "1"){
								var hasBindedShop = data.hasBindedShop;
								if(hasBindedShop == "0"){
									var qrName = data.QRPublicName;
									var qrUrl = data.QRCodeURL;
									if(qrName != "" && qrUrl != ""){
										var params = qrName+"**"+qrUrl;
										followModule(params);
									}
								}
							}
						} 
					},
					error : function() {
					}
				});
			}
		});
				
	</script>

2017-01-15 17:11:11,718 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:11:09 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=D940AB6C73C348BD2C5881C647BE72C7; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 17:11:11,718 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:11:11,718 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：到店支付
2017-01-15 17:11:11,718 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:11:11,719 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:11:11,719 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:11:11",step_action="{'\u65b9\u6cd5': 'get', 'url': '/mall/tobuy/1?', '\u53c2\u6570': {'mallGoodsId': '26838', 'amount': 1, 'type': 1, 'serial': '10549840601068216320'}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': '到店支付', '消息': '无法打开商品详情'}], '检查': 'body'}" WHERE executed_history_id = 20170115171104 AND testcase_id = 102 AND step_id = 104 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:11,721 testcase.py[line: 165] INFO: 测试用例[id=102, name=test-n-点击立即购买按钮]执行成功
2017-01-15 17:11:11,721 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:11:11,721 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 17:11:11" WHERE executed_history_id = 20170115171104 AND testcase_id = 102 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:11,906 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=102]的执行结果
2017-01-15 17:11:12,191 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'updater_last_name': 'Administrator', 'summary': '', 'node_order': '1000', 'modification_ts': '2016-11-29 17:52:17', 'preconditions': '', 'updater_login': 'admin', 'version': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '', 'step_number': '1', 'id': '116', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'id': '117', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n'}], 'layout': '1', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'author_last_name': 'Administrator', 'tc_external_id': '10', 'testcase_id': '114', 'creation_ts': '2016-07-25 15:02:41', 'is_open': '1', 'updater_id': '1', 'author_first_name': 'Testlink', 'testsuite_id': '113', 'importance': '2', 'active': '1', 'estimated_exec_duration': '', 'id': '115', 'status': '1', 'full_tc_external_id': 'wecharno-10', 'author_id': '1'}]
2017-01-15 17:11:12,301 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:11:12,301 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:11:12,302 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 17:11:12,303 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 17:11:12,303 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:11:12,303 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:12,303 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:12,304 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:11:12,424 global_function.py[line: 19] INFO: 获取测试用例信息 [{'execution_type': '1', 'updater_last_name': 'Administrator', 'summary': '', 'node_order': '1000', 'modification_ts': '2016-11-29 17:33:09', 'preconditions': '', 'updater_login': 'admin', 'version': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'id': '108', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n'}], 'layout': '1', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'name': 'test-n-创建储值卡支付订单', 'author_last_name': 'Administrator', 'tc_external_id': '8', 'testcase_id': '106', 'creation_ts': '2016-07-21 11:26:32', 'is_open': '1', 'updater_id': '1', 'author_first_name': 'Testlink', 'testsuite_id': '105', 'importance': '2', 'active': '1', 'estimated_exec_duration': '', 'id': '107', 'status': '1', 'full_tc_external_id': 'wecharno-8', 'author_id': '1'}]
2017-01-15 17:11:12,537 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 17:11:12,907 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:11:12,908 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:11:12,910 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:11:12,910 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:11:12,910 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:11:12,910 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:12,910 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171104', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:12,912 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:11:12,912 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:11:12,912 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:11:12,913 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:11:12,913 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:11:12,913 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:12,914 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:12,914 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:11:12,914 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:11:12,915 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:11:12,915 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 17:11:12,987 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:11:12,987 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:11:12,987 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:11:10 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:11:12,987 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:11:12,987 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:11:12,988 testcase.py[line: 133] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:11:12,988 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:11:12,988 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:11:12",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}], '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body'}" WHERE executed_history_id = 20170115171104 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:12,990 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:11:12,990 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:11:12" WHERE executed_history_id = 20170115171104 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:12,991 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 17:11:45,347 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 17:11:45,347 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 17:11:45,364 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 17:11:45,367 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 17:11:45,435 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 17:11:45,435 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 17:11:45,436 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 17:11:45,437 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 17:11:45,437 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 17:11:45,439 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 17:11:45,439 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 17:11:45,565 global_function.py[line: 19] INFO: 获取测试用例信息 [{'estimated_exec_duration': '', 'testsuite_id': '147', 'name': 'test-n-登陆掌贝pos机', 'creation_ts': '2016-07-27 18:32:10', 'execution_type': '1', 'version': '1', 'updater_first_name': 'Testlink', 'testcase_id': '148', 'status': '1', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '183', 'execution_type': '1', 'active': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '182', 'execution_type': '1', 'active': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'id': '150', 'execution_type': '1', 'active': '1'}], 'author_first_name': 'Testlink', 'importance': '2', 'modification_ts': '2016-11-30 15:41:36', 'updater_id': '1', 'updater_login': 'admin', 'is_open': '1', 'id': '149', 'preconditions': '<p>\n\t初始化用例</p>\n', 'tc_external_id': '1', 'layout': '1', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'author_id': '1', 'node_order': '1000', 'active': '1', 'author_last_name': 'Administrator', 'summary': '', 'full_tc_external_id': 'pj_pos-1'}]
2017-01-15 17:11:45,677 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 17:11:46,412 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:11:46,413 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171145', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '')
2017-01-15 17:11:46,415 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 17:11:46,415 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 17:11:46,416 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 17:11:46,416 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:46,416 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171145', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:46,418 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:11:46,418 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:46,419 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 17:11:46,422 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 17:11:46,422 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:11:46,422 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 17:11:46,422 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:11:46,422 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:11:46",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'检查': 'body', '输出': {'branch_id': 1}}" WHERE executed_history_id = 20170115171145 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:11:46,424 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 17:11:46,425 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 17:11:46,425 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:46,425 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171145', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:46,426 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:11:46,427 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 17:11:46,427 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 17:11:46,427 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 17:11:46,431 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 17:11:46,431 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:11:46,431 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 17:11:46,431 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:11:46,432 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:11:46",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'检查': 'body', '输出': {'serial_no': 2, 'device_no': 1}}" WHERE executed_history_id = 20170115171145 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:11:46,433 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 17:11:46,434 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 17:11:46,434 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:46,434 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171145', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:46,435 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:11:46,436 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 17:11:46,436 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:46,436 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:46,436 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 17:11:46,436 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 17:11:46,436 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 17:11:46,437 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 17:11:46,437 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 17:11:46,437 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 17:11:46,437 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 17:11:46,437 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 17:11:46,438 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'SerialNo': '[CaseStep.serial_no]', 'ProtocolVersion': '4.0', 'ProductVersion': '[global_product_version]'}
2017-01-15 17:11:46,842 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 17:11:46,842 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 17:11:46,842 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:11:44 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:11:46,842 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:11:46,842 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:11:46,842 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:11:46,843 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 17:11:46,843 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:11:46,844 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 17:11:46",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0', 'SerialNo': '[CaseStep.serial_no]'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'检查': 'body', '输出': {'Token': {'token': 'value'}, 'OperatorId': {'operator': {'id': 'value'}}}, '匹配规则': '键值相等', '条件': [{'消息': '登录失败,success不为true', '模式': {'success': True}}, {'消息': 'message不为成功', '模式': {'message': '成功'}}, {'消息': 'code不为4001', '模式': {'code': '4001'}}]}" WHERE executed_history_id = 20170115171145 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:11:46,845 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:11:46,845 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:11:46" WHERE executed_history_id = 20170115171145 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:11:46,846 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 17:11:46,846 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', '')
2017-01-15 17:11:46,847 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 17:11:46,847 main.py[line: 115] INFO: 运行指定项目
2017-01-15 17:11:46,974 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 17:11:46,974 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 17:11:46,976 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 17:11:46,976 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 17:11:47,119 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 17:11:47,283 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 17:11:47,283 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 17:11:47,432 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['93', '120', '76', '88', '110', '126', '102', '98', '80', '106', '114'])
2017-01-15 17:11:47,565 testplan.py[line: 45] INFO: 获取测试用例信息 [{'estimated_exec_duration': '', 'testsuite_id': '91', 'name': 'test-n-把商品移出购物车', 'creation_ts': '2016-07-20 12:25:46', 'execution_type': '1', 'version': '1', 'updater_first_name': 'Testlink', 'testcase_id': '93', 'status': '1', 'steps': [{'expected_results': '', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,</p>\n<p>\n\t&quot;用例id&quot;:88,</p>\n<p>\n\t&quot;用例名称&quot;:&quot;test-n-把商品加入购物车&quot;<br />\n\t}</p>\n<p>\n\t&nbsp;</p>\n', 'id': '95', 'execution_type': '1', 'active': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品移出购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cart/delfromcart?&quot;,<br />\n\t&quot;参数&quot;:{&quot;strIds&quot;:&quot;[CaseStep.strIds]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '96', 'execution_type': '1', 'active': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;[]&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '178', 'execution_type': '1', 'active': '1'}], 'author_first_name': 'Testlink', 'importance': '2', 'modification_ts': '2016-11-29 18:05:21', 'updater_id': '1', 'updater_login': 'admin', 'is_open': '1', 'id': '94', 'preconditions': '', 'tc_external_id': '5', 'layout': '1', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'author_id': '1', 'node_order': '1000', 'active': '1', 'author_last_name': 'Administrator', 'summary': '', 'full_tc_external_id': 'wecharno-5'}]
2017-01-15 17:11:47,680 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:11:47,680 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171145', 93, 'test-n-把商品移出购物车', '微商城-把商品移出购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:11:47,682 testplan.py[line: 72] INFO: 开始执行测试用例[id=93，name=test-n-把商品移出购物车]
2017-01-15 17:11:47,682 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} 
2017-01-15 17:11:47,682 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:11:47,682 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:47,682 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171145', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 95, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} ', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:47,685 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:11:47,801 global_function.py[line: 19] INFO: 获取测试用例信息 [{'estimated_exec_duration': '', 'testsuite_id': '87', 'name': 'test-n-把商品加入购物车', 'creation_ts': '2016-07-20 12:07:40', 'execution_type': '1', 'version': '1', 'updater_first_name': 'Testlink', 'testcase_id': '88', 'status': '1', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '175', 'execution_type': '1', 'active': '1'}, {'expected_results': '', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '174', 'execution_type': '1', 'active': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'id': '90', 'execution_type': '1', 'active': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'step_number': '4', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'id': '176', 'execution_type': '1', 'active': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '5', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '177', 'execution_type': '1', 'active': '1'}], 'author_first_name': 'Testlink', 'importance': '2', 'modification_ts': '2016-11-29 17:58:09', 'updater_id': '1', 'updater_login': 'admin', 'is_open': '1', 'id': '89', 'preconditions': '', 'tc_external_id': '4', 'layout': '1', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'author_id': '1', 'node_order': '1000', 'active': '1', 'author_last_name': 'Administrator', 'summary': '', 'full_tc_external_id': 'wecharno-4'}]
2017-01-15 17:11:47,915 global_function.py[line: 39] INFO: 正在读取套件[id=87]的协议，host，端口配置...
2017-01-15 17:11:48,234 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:11:48,234 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171145', 88, 'test-n-把商品加入购物车', '把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:11:48,237 global_function.py[line: 71] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 17:11:48,238 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 17:11:48,238 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 17:11:48,238 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:48,238 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171145', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:48,240 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:11:48,241 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:11:48,241 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 17:11:48,241 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 17:11:48,245 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2017-01-15 17:11:48,245 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:11:48,245 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}]
2017-01-15 17:11:48,246 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:11:48,246 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:11:48",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'检查': 'body', '输出': {'customer_id': 1}}" WHERE executed_history_id = 20170115171145 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:48,250 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2017-01-15 17:11:48,250 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:11:48,250 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:48,250 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171145', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:48,252 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:11:48,253 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2017-01-15 17:11:48,253 casestep.py[line: 149] INFO: 转换后的参数体为：(167020,)
2017-01-15 17:11:48,253 mydb.py[line: 72] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2017-01-15 17:11:48,853 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:11:48,853 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:11:48",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '\u53c2\u6570': [167020]}", expected_results="" WHERE executed_history_id = 20170115171145 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:48,857 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2017-01-15 17:11:48,858 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2017-01-15 17:11:48,858 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:11:48,858 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115171145', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', '80', '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:11:48,861 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:11:48,861 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:11:48,861 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:11:48,862 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:11:48,862 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', 26838), ('standardId', 'undefined'), ('amount', 1), ('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 17:11:48,862 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:11:48,863 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:11:48,863 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2017-01-15 17:11:48,864 httpprotocol.py[line: 75] INFO: 参数为：b'mallGoodsId=26838&standardId=undefined&amount=1&serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2017-01-15 17:11:48,864 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:11:50,453 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:11:50,453 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"加入购物车失败","attach":null}
2017-01-15 17:11:50,453 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:11:48 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:11:50,454 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:11:50,454 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:11:50,454 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:11:50,455 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 17:11:50,455 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:11:50,456 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 把商品加如购物车失败,success不为true", protocol_method="post", runtime="2017-01-15 17:11:48",step_action="{'\u65b9\u6cd5': 'post', 'url': '/addtocart', '\u53c2\u6570': {'mallGoodsId': 26838, 'standardId': 'undefined', 'amount': 1, 'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'检查': 'body', '匹配规则': '键值相等', '条件': [{'消息': '把商品加如购物车失败,success不为true', '模式': {'success': True}}]}" WHERE executed_history_id = 20170115171145 AND testcase_id = 88 AND step_id = 90 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:50,459 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:11:50,459 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:11:48" WHERE executed_history_id = 20170115171145 and testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:11:50,461 global_function.py[line: 82] INFO: 指定用例[88]已执行完
2017-01-15 17:32:06,225 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 17:32:06,225 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 17:32:06,242 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 17:32:06,246 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 17:32:06,331 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 17:32:06,331 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 17:32:06,333 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 17:32:06,333 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 17:32:06,334 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 17:32:06,337 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 17:32:06,337 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 17:32:06,573 global_function.py[line: 19] INFO: 获取测试用例信息 [{'testsuite_id': '147', 'author_login': 'admin', 'active': '1', 'modification_ts': '2016-11-30 15:41:36', 'estimated_exec_duration': '', 'updater_first_name': 'Testlink', 'execution_type': '1', 'is_open': '1', 'full_tc_external_id': 'pj_pos-1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'updater_id': '1', 'updater_login': 'admin', 'author_id': '1', 'steps': [{'step_number': '1', 'active': '1', 'id': '183', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n'}, {'step_number': '2', 'active': '1', 'id': '182', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n'}, {'step_number': '3', 'active': '1', 'id': '150', 'execution_type': '1', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n'}], 'summary': '', 'updater_last_name': 'Administrator', 'importance': '2', 'node_order': '1000', 'layout': '1', 'tc_external_id': '1', 'author_last_name': 'Administrator', 'name': 'test-n-登陆掌贝pos机', 'status': '1', 'testcase_id': '148', 'id': '149', 'author_first_name': 'Testlink', 'version': '1', 'creation_ts': '2016-07-27 18:32:10'}]
2017-01-15 17:32:06,738 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 17:32:07,472 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:32:07,472 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173206', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '')
2017-01-15 17:32:07,474 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 17:32:07,474 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 17:32:07,474 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 17:32:07,474 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:32:07,474 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173206', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:32:07,476 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:32:07,476 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:32:07,476 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 17:32:07,480 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 17:32:07,480 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:32:07,480 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 17:32:07,480 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:32:07,480 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:32:07",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115173206 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:32:07,483 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 17:32:07,483 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 17:32:07,483 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:32:07,483 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173206', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:32:07,485 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:32:07,485 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 17:32:07,486 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 17:32:07,486 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 17:32:07,489 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 17:32:07,489 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:32:07,489 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 17:32:07,489 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:32:07,490 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:32:07",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'serial_no': 2, 'device_no': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115173206 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:32:07,491 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 17:32:07,492 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 17:32:07,492 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:32:07,492 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173206', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:32:07,493 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:32:07,494 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 17:32:07,494 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:32:07,494 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:32:07,494 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 17:32:07,494 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 17:32:07,494 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 17:32:07,494 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 17:32:07,494 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 17:32:07,495 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 17:32:07,495 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 17:32:07,495 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 17:32:07,495 httpprotocol.py[line: 76] INFO: 请求头为：{'SerialNo': '[CaseStep.serial_no]', 'DeviceId': '[CaseStep.device_no]', 'ProductVersion': '[global_product_version]', 'Content-Type': 'application/json;charset=utf-8', 'ProtocolVersion': '4.0'}
2017-01-15 17:32:07,891 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 17:32:07,892 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 17:32:07,892 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:32:05 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:32:07,892 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:32:07,892 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:32:07,892 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:32:07,893 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 17:32:07,894 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:32:07,894 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 17:32:07",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8', 'ProtocolVersion': '4.0'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'输出': {'Token': {'token': 'value'}, 'OperatorId': {'operator': {'id': 'value'}}}, '条件': [{'消息': '登录失败,success不为true', '模式': {'success': True}}, {'消息': 'message不为成功', '模式': {'message': '成功'}}, {'消息': 'code不为4001', '模式': {'code': '4001'}}], '匹配规则': '键值相等', '检查': 'body'}" WHERE executed_history_id = 20170115173206 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:32:07,896 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:32:07,896 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', 'Traceback (most recent call last):  File E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\\Projects\\interface_project_for_dev\\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true')", runtime="2017-01-15 17:32:07" WHERE executed_history_id = 20170115173206 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:32:07,897 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 17:32:07,897 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', 'Traceback (most recent call last):  File E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\\Projects\\interface_project_for_dev\\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true')
2017-01-15 17:32:07,898 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 17:32:07,898 main.py[line: 115] INFO: 运行指定项目
2017-01-15 17:32:08,141 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 17:32:08,142 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 17:32:08,144 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 17:32:08,144 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 17:32:08,384 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 17:32:08,553 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 17:32:08,553 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 17:32:08,697 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['114', '98', '126', '80', '93', '120', '76', '102', '88', '110', '106'])
2017-01-15 17:32:08,832 testplan.py[line: 45] INFO: 获取测试用例信息 [{'testsuite_id': '113', 'author_login': 'admin', 'active': '1', 'modification_ts': '2016-11-29 17:52:17', 'estimated_exec_duration': '', 'updater_first_name': 'Testlink', 'execution_type': '1', 'is_open': '1', 'full_tc_external_id': 'wecharno-10', 'preconditions': '', 'updater_id': '1', 'updater_login': 'admin', 'author_id': '1', 'steps': [{'step_number': '1', 'active': '1', 'id': '116', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'expected_results': ''}, {'step_number': '2', 'active': '1', 'id': '117', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n'}], 'summary': '', 'updater_last_name': 'Administrator', 'importance': '2', 'node_order': '1000', 'layout': '1', 'tc_external_id': '10', 'author_last_name': 'Administrator', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'status': '1', 'testcase_id': '114', 'id': '115', 'author_first_name': 'Testlink', 'version': '1', 'creation_ts': '2016-07-25 15:02:41'}]
2017-01-15 17:32:08,962 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:32:08,962 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173206', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:32:08,963 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 17:32:08,963 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 17:32:08,963 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:32:08,964 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:32:08,964 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173206', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:32:08,965 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:32:09,130 global_function.py[line: 19] INFO: 获取测试用例信息 [{'testsuite_id': '105', 'author_login': 'admin', 'active': '1', 'modification_ts': '2016-11-29 17:33:09', 'estimated_exec_duration': '', 'updater_first_name': 'Testlink', 'execution_type': '1', 'is_open': '1', 'full_tc_external_id': 'wecharno-8', 'preconditions': '', 'updater_id': '1', 'updater_login': 'admin', 'author_id': '1', 'steps': [{'step_number': '1', 'active': '1', 'id': '108', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n'}], 'summary': '', 'updater_last_name': 'Administrator', 'importance': '2', 'node_order': '1000', 'layout': '1', 'tc_external_id': '8', 'author_last_name': 'Administrator', 'name': 'test-n-创建储值卡支付订单', 'status': '1', 'testcase_id': '106', 'id': '107', 'author_first_name': 'Testlink', 'version': '1', 'creation_ts': '2016-07-21 11:26:32'}]
2017-01-15 17:32:09,285 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 17:32:09,519 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:32:09,519 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173206', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:32:09,520 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:32:09,520 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:32:09,521 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:32:09,521 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:32:09,521 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173206', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:32:09,522 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:32:09,522 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:32:09,523 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:32:09,523 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:32:09,523 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:32:09,523 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:32:09,523 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:32:09,523 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:32:09,524 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:32:09,524 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:32:09,524 httpprotocol.py[line: 76] INFO: 请求头为：{'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:32:09,571 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:32:09,571 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:32:09,571 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:32:07 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:32:09,572 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:32:09,572 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:32:09,573 testcase.py[line: 133] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:32:09,574 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:32:09,574 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:32:09",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '匹配规则': '包含字符串', '检查': 'body'}" WHERE executed_history_id = 20170115173206 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:32:09,579 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:32:09,580 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', 'Traceback (most recent call last):  File E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\\Projects\\interface_project_for_dev\\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True')", runtime="2017-01-15 17:32:09" WHERE executed_history_id = 20170115173206 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:32:09,582 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 17:37:43,981 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 17:37:43,981 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 17:37:43,999 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 17:37:44,003 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 17:37:44,074 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 17:37:44,074 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 17:37:44,076 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 17:37:44,077 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 17:37:44,080 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 17:37:44,083 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 17:37:44,083 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 17:37:44,235 global_function.py[line: 19] INFO: 获取测试用例信息 [{'execution_type': '1', 'importance': '2', 'summary': '', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-27 18:32:10', 'status': '1', 'layout': '1', 'name': 'test-n-登陆掌贝pos机', 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-30 15:41:36', 'updater_first_name': 'Testlink', 'testcase_id': '148', 'id': '149', 'testsuite_id': '147', 'preconditions': '<p>\n\t初始化用例</p>\n', 'author_first_name': 'Testlink', 'tc_external_id': '1', 'version': '1', 'is_open': '1', 'steps': [{'id': '183', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n'}, {'id': '182', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'step_number': '2', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n'}, {'id': '150', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '3', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'pj_pos-1', 'updater_login': 'admin', 'active': '1', 'node_order': '1000', 'estimated_exec_duration': ''}]
2017-01-15 17:37:44,359 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 17:37:45,036 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:45,036 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '')
2017-01-15 17:37:45,037 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 17:37:45,037 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 17:37:45,037 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 17:37:45,037 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:45,038 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:45,039 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:37:45,039 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:45,039 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 17:37:45,042 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 17:37:45,042 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:37:45,042 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 17:37:45,042 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:37:45,042 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:37:45",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115173744 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:37:45,044 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 17:37:45,044 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 17:37:45,044 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:45,044 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:45,045 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:37:45,045 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 17:37:45,045 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 17:37:45,045 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 17:37:45,049 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 17:37:45,049 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:37:45,049 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 17:37:45,049 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:37:45,050 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:37:45",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'device_no': 1, 'serial_no': 2}, '检查': 'body'}" WHERE executed_history_id = 20170115173744 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:37:45,051 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 17:37:45,051 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 17:37:45,051 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:45,051 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:45,052 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:37:45,052 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 17:37:45,053 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:45,053 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:45,053 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 17:37:45,053 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 17:37:45,053 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 17:37:45,053 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 17:37:45,053 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 17:37:45,053 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 17:37:45,054 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 17:37:45,054 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 17:37:45,054 httpprotocol.py[line: 76] INFO: 请求头为：{'DeviceId': '[CaseStep.device_no]', 'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0', 'Content-Type': 'application/json;charset=utf-8'}
2017-01-15 17:37:45,467 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 17:37:45,467 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 17:37:45,467 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:37:43 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:37:45,468 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:37:45,468 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:37:45,468 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:37:45,470 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 17:37:45,470 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:37:45,470 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 17:37:45",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'ProtocolVersion': '4.0', 'ProductVersion': '[global_product_version]', 'SerialNo': '[CaseStep.serial_no]', 'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'匹配规则': '键值相等', '条件': [{'模式': {'success': True}, '消息': '登录失败,success不为true'}, {'模式': {'message': '成功'}, '消息': 'message不为成功'}, {'模式': {'code': '4001'}, '消息': 'code不为4001'}], '输出': {'OperatorId': {'operator': {'id': 'value'}}, 'Token': {'token': 'value'}}, '检查': 'body'}" WHERE executed_history_id = 20170115173744 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:37:45,473 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:37:45,473 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_json>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 126, in test_interface_of_json\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 登录失败,success不为true\n')])", runtime="2017-01-15 17:37:45" WHERE executed_history_id = 20170115173744 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:37:45,474 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py' at line 1
2017-01-15 17:37:45,475 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 17:37:45,475 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_json>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 126, in test_interface_of_json\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 登录失败,success不为true\n')])
2017-01-15 17:37:45,475 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 17:37:45,476 main.py[line: 115] INFO: 运行指定项目
2017-01-15 17:37:45,648 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 17:37:45,648 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 17:37:45,651 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 17:37:45,651 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 17:37:45,843 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 17:37:46,002 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 17:37:46,002 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 17:37:46,140 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['114', '80', '110', '93', '102', '88', '76', '126', '106', '98', '120'])
2017-01-15 17:37:46,272 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'importance': '2', 'summary': '', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-25 15:02:41', 'status': '1', 'layout': '1', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:52:17', 'updater_first_name': 'Testlink', 'testcase_id': '114', 'id': '115', 'testsuite_id': '113', 'preconditions': '', 'author_first_name': 'Testlink', 'tc_external_id': '10', 'version': '1', 'is_open': '1', 'steps': [{'id': '116', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'active': '1', 'expected_results': ''}, {'id': '117', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '2', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'wecharno-10', 'updater_login': 'admin', 'active': '1', 'node_order': '1000', 'estimated_exec_duration': ''}]
2017-01-15 17:37:46,391 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:46,391 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:37:46,393 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 17:37:46,393 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 17:37:46,393 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:37:46,394 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:46,394 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:46,397 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:37:46,536 global_function.py[line: 19] INFO: 获取测试用例信息 [{'execution_type': '1', 'importance': '2', 'summary': '', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-21 11:26:32', 'status': '1', 'layout': '1', 'name': 'test-n-创建储值卡支付订单', 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:33:09', 'updater_first_name': 'Testlink', 'testcase_id': '106', 'id': '107', 'testsuite_id': '105', 'preconditions': '', 'author_first_name': 'Testlink', 'tc_external_id': '8', 'version': '1', 'is_open': '1', 'steps': [{'id': '108', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'wecharno-8', 'updater_login': 'admin', 'active': '1', 'node_order': '1000', 'estimated_exec_duration': ''}]
2017-01-15 17:37:46,696 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 17:37:46,979 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:46,979 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:37:46,980 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:37:46,981 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:37:46,981 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:37:46,981 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:46,981 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:46,982 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:37:46,983 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:37:46,983 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:37:46,983 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:37:46,983 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:37:46,983 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:46,984 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:46,984 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:37:46,985 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:37:46,985 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:37:46,985 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 17:37:47,036 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:37:47,036 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:37:47,036 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:37:44 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:37:47,036 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:37:47,036 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:37:47,037 testcase.py[line: 133] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:37:47,037 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:37:47,037 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:37:46",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}], '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body'}" WHERE executed_history_id = 20170115173744 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:47,039 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:37:47,039 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_urlencode>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 65, in test_interface_of_urlencode\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 65, in assert_result\n    self.assertIn(pattern_str, response_to_check, item[\'消息\'])\nAssertionError: \'"success":true\' not found in \'{"success":false,"message":"系统错误","attach":null}\' : 创建储值卡支付订单失败,success不为True\n')])", runtime="2017-01-15 17:37:46" WHERE executed_history_id = 20170115173744 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:47,039 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py' at line 1
2017-01-15 17:37:47,040 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 17:37:47,040 testcase.py[line: 133] INFO: 步骤[1]执行失败,停止执行用例[id=114, name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 17:37:47,040 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:37:47,040 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="无", runtime="2017-01-15 17:37:46",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 106, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u521b\u5efa\u50a8\u503c\u5361\u652f\u4ed8\u8ba2\u5355'}", expected_results="" WHERE executed_history_id = 20170115173744 AND testcase_id = 114 AND step_id = 116 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:47,041 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:37:47,041 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_urlencode>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 65, in test_interface_of_urlencode\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 65, in assert_result\n    self.assertIn(pattern_str, response_to_check, item[\'消息\'])\nAssertionError: \'"success":true\' not found in \'{"success":false,"message":"系统错误","attach":null}\' : 创建储值卡支付订单失败,success不为True\n')])", runtime="2017-01-15 17:37:46" WHERE executed_history_id = 20170115173744 AND testcase_id = 114 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:47,042 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py' at line 1
2017-01-15 17:37:47,158 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=114]的执行结果
2017-01-15 17:37:47,280 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'importance': '2', 'summary': '', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-20 11:05:03', 'status': '1', 'layout': '1', 'name': 'test-n-点击商品', 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 18:16:14', 'updater_first_name': 'Testlink', 'testcase_id': '80', 'id': '81', 'testsuite_id': '79', 'preconditions': '', 'author_first_name': 'Testlink', 'tc_external_id': '2', 'version': '1', 'is_open': '1', 'steps': [{'id': '82', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'wecharno-2', 'updater_login': 'admin', 'active': '1', 'node_order': '1000', 'estimated_exec_duration': ''}]
2017-01-15 17:37:47,393 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:47,393 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:37:47,395 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2017-01-15 17:37:47,395 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2017-01-15 17:37:47,395 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2017-01-15 17:37:47,395 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:47,395 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:47,396 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:37:47,396 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:37:47,397 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:37:47,397 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('id', 26838), ('serial', '10549840601068216320')])
2017-01-15 17:37:47,397 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:47,397 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:37:47,397 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2017-01-15 17:37:47,397 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:37:47,442 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:37:47,442 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/css/malls/detail.css?v=5.0.0-faae2">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/mall/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320",
			mallConfigSerial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script src="/common/js/request.js?v=5.0.0-faae2"></script>
	<script src="/common/js/extend-number.js?v=5.0.0-faae2"></script>
	<script src="/component/iscroll/js/iscroll.js?v=5.0.0-faae2"></script>
	<script src="/component/swiper/js/swiper.min.js?v=5.0.0-faae2"></script>
	<script src="/js/malls/detail.js?v=5.0.0-faae2"></script>
</body>
</html>
2017-01-15 17:37:47,445 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:37:45 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3983'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=D4E2A0AB4C62753E87986899B042D96A; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 17:37:47,445 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:37:47,445 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2017-01-15 17:37:47,445 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:37:47,445 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:37:47,445 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:37:47",step_action="{'\u65b9\u6cd5': 'get', 'url': '/goods/item?', '\u53c2\u6570': {'id': 26838, 'serial': '10549840601068216320'}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': '立即购买', '消息': '点击商品时无法打开购买页面'}], '检查': 'body'}" WHERE executed_history_id = 20170115173744 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:47,447 testcase.py[line: 165] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2017-01-15 17:37:47,447 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:37:47,447 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Pass', '')", runtime="2017-01-15 17:37:47" WHERE executed_history_id = 20170115173744 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:47,568 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2017-01-15 17:37:47,708 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'importance': '2', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-22 14:48:17', 'status': '1', 'layout': '1', 'name': 'test-n-储值卡支付-不使用优惠，会员账户支付', 'updater_last_name': 'Administrator', 'modification_ts': '2016-07-29 17:13:06', 'updater_first_name': 'Testlink', 'testcase_id': '110', 'id': '111', 'testsuite_id': '109', 'preconditions': '', 'author_first_name': 'Testlink', 'tc_external_id': '9', 'version': '1', 'is_open': '1', 'steps': [{'id': '112', 'actions': '<p>\n\t{<br />\n\t&quot;style&quot;:&quot;testcase&quot;,<br />\n\t<br />\n\t&quot;testcase_id&quot;:114,<br />\n\t<br />\n\t&quot;testcase_name&quot;:&quot;test-n-提交储值卡支付订单-pay5重定向&quot;<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n'}, {'id': '119', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_without_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:-1,&quot;yhCardType&quot;:-1}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '3', 'active': '1', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;}</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'wecharno-9', 'updater_login': 'admin', 'active': '0', 'node_order': '2', 'estimated_exec_duration': ''}]
2017-01-15 17:37:47,858 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:47,859 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 110, 'test-n-储值卡支付-不使用优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:37:47,860 testplan.py[line: 72] INFO: 开始执行测试用例[id=110，name=test-n-储值卡支付-不使用优惠，会员账户支付]
2017-01-15 17:37:47,860 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-不使用优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 17:37:47,861 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:37:47,861 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 17:37:47" WHERE executed_history_id = 20170115173744 AND testcase_id = 110 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:47,994 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=110]的执行结果
2017-01-15 17:37:48,118 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'importance': '2', 'summary': '', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-20 12:25:46', 'status': '1', 'layout': '1', 'name': 'test-n-把商品移出购物车', 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 18:05:21', 'updater_first_name': 'Testlink', 'testcase_id': '93', 'id': '94', 'testsuite_id': '91', 'preconditions': '', 'author_first_name': 'Testlink', 'tc_external_id': '5', 'version': '1', 'is_open': '1', 'steps': [{'id': '95', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,</p>\n<p>\n\t&quot;用例id&quot;:88,</p>\n<p>\n\t&quot;用例名称&quot;:&quot;test-n-把商品加入购物车&quot;<br />\n\t}</p>\n<p>\n\t&nbsp;</p>\n', 'execution_type': '1', 'step_number': '1', 'active': '1', 'expected_results': ''}, {'id': '96', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cart/delfromcart?&quot;,<br />\n\t&quot;参数&quot;:{&quot;strIds&quot;:&quot;[CaseStep.strIds]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '2', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品移出购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n'}, {'id': '178', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'execution_type': '1', 'step_number': '3', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;[]&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'wecharno-5', 'updater_login': 'admin', 'active': '1', 'node_order': '1000', 'estimated_exec_duration': ''}]
2017-01-15 17:37:48,230 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:48,230 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 93, 'test-n-把商品移出购物车', '微商城-把商品移出购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:37:48,231 testplan.py[line: 72] INFO: 开始执行测试用例[id=93，name=test-n-把商品移出购物车]
2017-01-15 17:37:48,231 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} 
2017-01-15 17:37:48,231 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:37:48,231 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:48,231 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 95, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} ', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:48,232 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:37:48,357 global_function.py[line: 19] INFO: 获取测试用例信息 [{'execution_type': '1', 'importance': '2', 'summary': '', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-20 12:07:40', 'status': '1', 'layout': '1', 'name': 'test-n-把商品加入购物车', 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:58:09', 'updater_first_name': 'Testlink', 'testcase_id': '88', 'id': '89', 'testsuite_id': '87', 'preconditions': '', 'author_first_name': 'Testlink', 'tc_external_id': '4', 'version': '1', 'is_open': '1', 'steps': [{'id': '175', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n'}, {'id': '174', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'step_number': '2', 'active': '1', 'expected_results': ''}, {'id': '90', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '3', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n'}, {'id': '176', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'step_number': '4', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n'}, {'id': '177', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'execution_type': '1', 'step_number': '5', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'wecharno-4', 'updater_login': 'admin', 'active': '1', 'node_order': '1000', 'estimated_exec_duration': ''}]
2017-01-15 17:37:48,476 global_function.py[line: 39] INFO: 正在读取套件[id=87]的协议，host，端口配置...
2017-01-15 17:37:48,793 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:48,793 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 88, 'test-n-把商品加入购物车', '把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:37:48,795 global_function.py[line: 71] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 17:37:48,796 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 17:37:48,796 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 17:37:48,796 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:48,796 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:48,798 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:37:48,799 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:37:48,799 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 17:37:48,799 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 17:37:48,802 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2017-01-15 17:37:48,803 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:37:48,803 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}]
2017-01-15 17:37:48,803 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:37:48,803 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:37:48",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115173744 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:48,815 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2017-01-15 17:37:48,816 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:37:48,816 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:48,816 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:48,824 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:37:48,824 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2017-01-15 17:37:48,824 casestep.py[line: 149] INFO: 转换后的参数体为：(167020,)
2017-01-15 17:37:48,824 mydb.py[line: 72] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2017-01-15 17:37:49,317 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:37:49,317 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:37:48",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '\u53c2\u6570': [167020]}", expected_results="" WHERE executed_history_id = 20170115173744 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:49,325 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2017-01-15 17:37:49,326 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2017-01-15 17:37:49,327 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:49,327 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', '80', '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:49,332 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:37:49,332 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:37:49,333 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:37:49,333 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:37:49,333 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', 26838), ('standardId', 'undefined'), ('amount', 1), ('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 17:37:49,333 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:49,333 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:37:49,333 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2017-01-15 17:37:49,334 httpprotocol.py[line: 75] INFO: 参数为：b'mallGoodsId=26838&standardId=undefined&amount=1&serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2017-01-15 17:37:49,334 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:37:49,813 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:37:49,814 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"加入购物车失败","attach":null}
2017-01-15 17:37:49,814 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:37:47 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:37:49,814 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:37:49,814 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:37:49,814 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:37:49,815 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 17:37:49,815 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:37:49,815 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 把商品加如购物车失败,success不为true", protocol_method="post", runtime="2017-01-15 17:37:49",step_action="{'\u65b9\u6cd5': 'post', 'url': '/addtocart', '\u53c2\u6570': {'mallGoodsId': 26838, 'standardId': 'undefined', 'amount': 1, 'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'匹配规则': '键值相等', '条件': [{'模式': {'success': True}, '消息': '把商品加如购物车失败,success不为true'}], '检查': 'body'}" WHERE executed_history_id = 20170115173744 AND testcase_id = 88 AND step_id = 90 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:49,816 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:37:49,817 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_urlencode>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 65, in test_interface_of_urlencode\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 把商品加如购物车失败,success不为true\n')])", runtime="2017-01-15 17:37:48" WHERE executed_history_id = 20170115173744 and testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:49,818 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py' at line 1
2017-01-15 17:37:49,818 global_function.py[line: 82] INFO: 指定用例[88]已执行完
2017-01-15 17:37:49,818 testcase.py[line: 133] INFO: 步骤[1]执行失败,停止执行用例[id=93, name=test-n-把商品移出购物车]
2017-01-15 17:37:49,818 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:37:49,819 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 把商品加如购物车失败,success不为true", protocol_method="无", runtime="2017-01-15 17:37:48",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 88, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u628a\u5546\u54c1\u52a0\u5165\u8d2d\u7269\u8f66'}", expected_results="" WHERE executed_history_id = 20170115173744 AND testcase_id = 93 AND step_id = 95 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:49,821 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:37:49,821 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_urlencode>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 65, in test_interface_of_urlencode\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 把商品加如购物车失败,success不为true\n')])", runtime="2017-01-15 17:37:48" WHERE executed_history_id = 20170115173744 AND testcase_id = 93 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:49,822 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py' at line 1
2017-01-15 17:37:49,937 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=93]的执行结果
2017-01-15 17:37:50,062 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'importance': '2', 'summary': '', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-20 16:48:26', 'status': '1', 'layout': '1', 'name': 'test-n-点击立即购买按钮', 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 18:14:53', 'updater_first_name': 'Testlink', 'testcase_id': '102', 'id': '103', 'testsuite_id': '79', 'preconditions': '', 'author_first_name': 'Testlink', 'tc_external_id': '7', 'version': '1', 'is_open': '1', 'steps': [{'id': '104', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/mall/tobuy/1?&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:&quot;26838&quot;,&quot;amount&quot;:1,&quot;type&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;到店支付&quot;,&quot;消息&quot;:&quot;无法打开商品详情&quot;}]</p>\n<p>\n\t}</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'wecharno-7', 'updater_login': 'admin', 'active': '1', 'node_order': '1001', 'estimated_exec_duration': ''}]
2017-01-15 17:37:50,176 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:50,176 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 102, 'test-n-点击立即购买按钮', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:37:50,177 testplan.py[line: 72] INFO: 开始执行测试用例[id=102，name=test-n-点击立即购买按钮]
2017-01-15 17:37:50,177 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}
2017-01-15 17:37:50,178 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}
2017-01-15 17:37:50,178 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:50,178 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 102, 'test-n-点击立即购买按钮', 'plan1_of_wechatno', 'pj_wechatno', 104, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:50,179 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:37:50,179 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:37:50,179 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:37:50,179 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', '26838'), ('amount', 1), ('type', 1), ('serial', '10549840601068216320')])
2017-01-15 17:37:50,179 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:50,180 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:37:50,180 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/mall/tobuy/1?mallGoodsId=26838&amount=1&type=1&serial=10549840601068216320
2017-01-15 17:37:50,180 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:37:50,987 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:37:50,988 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 
	 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta http-equiv="Expires" CONTENT="0">
<meta http-equiv="Cache-Control" CONTENT="no-cache">
<meta http-equiv="Pragma" CONTENT="no-cache">
<title>微商城</title>
<link rel="stylesheet" href="/css/mall/pure.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/grids-core.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/zepto.alert.css?v=5.0.0-faae2">

<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.ios7.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.animation.css?v=5.0.0-faae2">
</head>
<style type="text/css">
* {
	margin: 0;
	padding: 0;
}

html {
	color: #626262;
	overflow-y: auto;
	overflow-x: hidden;
}

body {
	margin-bottom: 20px;
	overflow-y: auto;
	overflow-x: hidden;
}

a {
	text-decoration: none;
}

ol,ul {
	list-style: outside none none;
}

.left {
	float: left;
}

.right {
	float: right;
}

.in-block {
	display: inline-block;
}

.orange {
	color: #c58d04;
}

.grey {
	color: #adadad;
}

.bg-color {
	background: #ececec;
}

#wrapper {
	width: 100%;
	margin: 0 auto;
}

.header {
	width: 100%;
}

.header ul {
	position:relative;
	overflow: hidden;
}

.header ul li {
	width: 50%;
	float: left;
	height: 2.8em;
	line-height: 2.8em;
	background: #fff;
	text-align: center;
	border-bottom:1px solid #f38b44;
	-moz-box-sizing:border-box; /* Firefox */
     -webkit-box-sizing:border-box; /* Safari */
     box-sizing:border-box;
}
.header ul .lines{
	position: absolute;
	width: 1%;
	height: 2.8em;
	line-height: 2.8em;
	border-right: 1px solid #FDE5D4;
	left: 49%;
	top: -1px;
 } 
.header ul li a {
	color: #8b898a;
}

.tab_content>div {
	height: auto;
	font-size: 0.8em;
	margin: 0.5em 0;
}

.empty-p {
	width: 80%;
	float: left;
	padding: 0.5em 0;
}

.has-p {
    width: 100%;
    margin: 0 auto;
    padding: 0 1em;
    height: auto;
    line-height: 2.5em;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -webkit-box-sizing: -webkit-border-box;
}
.has-p-one{
    background: url(/images/mall/contact.png) no-repeat left center;
    background-size: 12px 12px;
}
.has-p-two{
    background: url(/images/mall/take.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.has-p-three{
    background: url(/images/mall/time.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.input-right{
    position: relative;
}
.input-right-img{
    width: 1em;
    position: absolute;
    right: 0.6em;
    top: 0.3em;
}
#scheduledTime{
    width:11em;
    height: 2em;
    border:1px solid #a0a0a0;
    border-radius:4px;
    color:#a0a0a0;
    text-indent:.5em
}
.hiddens-p{
    text-overflow:ellipsis; 
    overflow:hidden; 
    white-space:nowrap;  
}

.right-dashed {
	border-left: 1px solid #eee;
	margin-top: 1em;
	padding-bottom:1em;
}

#edit {
	padding: 1em 0 1em 2em;
    width: 10px;
}

.header ul li.active{
    border-bottom: 4px solid #f38b44;
}
.header ul li.active a{
    color: #f38b44!important;
}
.buy_title{
	background:#f3f3f3;
	padding:0.3em 1em;
	margin: 0;
}
.content {
	width: 100%;
	background: #fff;
	overflow: hidden;	
	padding-bottom:8%;
}

.selectList {
	border-bottom: 1px solid #efefef;
	margin: 0 auto;
	overflow: hidden;
	padding: 0.5em 1em;
	font-size: 0.8em;
	clear:both;
}

.selectList img {
    display: inline-block;
    float: left;
    width: 25%;
    border-radius: 4px;
    -webkit-border-radius: 4px;
}

.button {
	display:block;	
	width: 99%;	
	height: 3em;
	color: #fff;
	border: none;
	border-radius: 4px;
	margin:0 auto 0.5em auto;
}

.addbtn {
	background: #33CC66;
}

.btn-wrap-5 {
	padding: 0 1em;
}
.buybtn {
	width: 100%;
	background: #f68d3c;
}

.footer {
	width: 100%;
	background: #fff;
	color: #b6b6b6;
	overflow: hidden;
	text-align: left;
	margin-bottom: 1em;
}

.all-end-button {
	width: 90%;
	margin: 1em auto 0.5em;
}

.all-end-button p:first-child {
	text-align: left;
}

.error-page{
	background: #ddd;
    padding-bottom: 2em;
}
.error-page img{
    margin:0 auto;
	padding-top: 2em;
}
.error-page p{
    text-align:center;
    color:#000;
    width:80%;
    margin:1em auto 2em;
}
#deliverFee{
	text-align:left;
	font-size:0.8em;
	color:#acb0af;
}
.order-div{
    margin-left: 26.8%;            
    position: relative;
}
.order-div>p:last-child{
    width: 100%;
    margin: 0;
    position: absolute;
    bottom: 0;
    left: 0;
}
.m-t-n{
    margin-top: 0;
}
.m-t-n>span{
    display: inline-block;
}
.m-t-n>span:first-child{
    width: 70%;
}
.m-t-n>span:last-child{
    width: 30%;
}
.mtn-span{
    float: right;
}
.t-r-span{
	text-align:right;
}
.ccc{
    color: #ccc;
}
.peisong{
    text-align: right;
    margin-bottom: 0;
    padding-right: 1em;
    padding-top: 0.4em;
}
.peisong-detail{
    color:#000;
}
.peisong-detail input{
    border: none;
}
.peisong-detail div>p{
    padding-left: 1.8em;
    padding-top: 0.8em;
    padding-bottom: 0.8em;
    margin: 0;
    clear:both;
}

.weipay{            
    background: url(/images/weixin2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}        
.peisong-detail div>p.pay{
    background: url(/images/money2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.cardpay{
    background: url(/images/cardpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.mdpay{
    background: url(/images/mdpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}

.peisong-detail div[class^="btn-wrap-"] {
	border-bottom: 1px solid #dadada;
	padding: 0 1em;
	height: 3em;
	position: relative;
}

.weipay,.pay,.mdpay,.cardpay{
    position: relative;
}
 .weipay>img,.mdpay>img,.pay>img,.cardpay>img,.zhifu input{
    width: 1.2em;
    height: 1.2em;
    position: absolute;
    right: 0;
    top: 50%;
    transform:translateY(-50%);
}

.pure-img-check {
	background: url(/images/weixuan2.png) no-repeat left center;
    background-size:1.05em 1.05em; 
    float: right;
    height: 1.05em;
    width: 1.05em;
}

.zhifu input{
    display: none;
}
#deliverFeeDiv, #FetchDiv {
	border-bottom: 1px solid #efefef;
    padding: 0.5em 1em;
}
#deliverFeeDiv p, #FetchDiv p{
	text-align:right;
}

#remark {
	padding: 0.5em 1em;
	height: 4em;
	font-size: 1.0em;
}

.tab-adress {
	position: relative;
}
.icon-wrap {
	/*float: right;*/
	position: absolute;
	top: 11px;
	right: 10px;
}
.icon-wrap-spe {
	top: 0;
}

/*toast提示*/
.toastBlock {
    display: none; 
    position: fixed;
    bottom: 50%;
    width: 100%;
    text-align: center;
    transition: opacity 1s ease-out;
    z-index: 19;
}
.toastBlock .toastContent {
    display: inline-block;
    padding: 18px;
    border-radius: 5px;
    font-size: 14px;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.7);
}
</style>
<body>
	<div id="wrapper">
		
			
			
			
				
					
					
						
						
						
						
						
					
					
				
				
			
			<div class="header">
				
					<ul class="tab">
						<li class='active' data='#deliverFeeDiv'><a href="#tab1">快递发货</a></li>						
						<li class=''><a href="#tab2">到店自提</a></li>
						<span class="lines"></span>
					</ul>
				
			</div>
			<p class="buy_title"></p>
			
			<div class="tab_container">
				<div id="tab1" class="tab_content pure-g" style="">
					<div class="pure-u-24-24 tab-adress j-tab-adress">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">17817738178<span>(17817738178)</span></span>
								</div>
								<div class="has-p">
									<span>配送地址：</span>
									<span class="pure-u-3-5">天津市县宁河县详细</span>
                                </div>

                                <span class="icon-wrap">
                                	
                                		
                                		
                                		<a class="url_adress" href="/toaddr/1?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
                                		</a>
                                		
                                	
                                </span>
							
							
						
					</div>
				</div>
				<div id="tab2" class="tab_content pure-g" style="display:none">
					<div class="pure-u-24-24">
						
							
								<div class="tab-adress j-tab-adress">
									<div class="has-p">
										<span>联系方式：</span>
										<span class="pure-u-3-5">452<span>(17817738178)</span></span>
									</div>
	                                <div class="has-p">
	                                	<span>门&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;店：</span>
	                                	<span class="pure-u-3-5">
	                                		广东省深圳市福田区
		                                	
		                                		Biu
		                                	
	                                	</span>
	                                </div>
	                                <span class="icon-wrap">
	                                	
	                                		
	                                		
	                                		<a class="url_adress" href="/toaddr/2?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
	                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
	                                		</a>
	                                		
	                                	
	                                </span>
                                </div>
                               	<div class="has-p">
                               		<span>到店时间：</span>
                               		<span class="input-right">
                               			<input type="text" id="scheduledTime" name="scheduledTime" class="text" placeholder="请选择"/><img src="/images/mall/input-right.png?v=5.0.0-faae2" class="input-right-img">
                               		</span>
                               	</div>
							
							
						
					</div>
				</div>
			</div>
			<p class="buy_title"></p>
			
			<div class="content">
				
					
						
							<div class="selectList">
								<img src="http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg"> 
								
									
									
										<div class="order-div">
											<p class="m-t-n"><span>接口-测试商品1</span><span class="mtn-span t-r-span">￥0.01</span></p>
											<p><span class="ccc mtn-span">X1</span></p>
                                        </div>	
									
								
							</div>
						
					
					
					
				
				<div id="deliverFeeDiv">
					 
						
						
							<p id="deliverFee">含运费：￥0.01</p>
							<p class="orange">合计：￥0.02</p>
						
					 
				</div>
				<div id="FetchDiv" style="display: none;">
					<p class="orange">合计：￥0.01</p>
				</div>
				<div id="remark">
					<span class="beizhu" style="float:left">备注：</span>
                   	<span class="beizhulan">
                   		<textarea rows="3" placeholder="可于此处给卖家留言备注" style="border:0;width: 85%;"></textarea>
                   	</span>
				</div>
			</div>
			<p class="buy_title"></p>
			<div class="footer">
				<div class="peisong-detail zhifu">
                	
                        <div class="btn-wrap-1">
                         	<p class="weipay">微信支付<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="1"/>
                         	</p>
                        </div>
                    
                  	
                  	
                        <div class="btn-wrap-2" style="">
                         	<p class="pay">货到付款<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="3"/>
                         	</p>
                        </div>
                   	
		
                    
                        <div class="btn-wrap-3" style="display:none">
                        	<p class="mdpay">到店支付<span class="pure-img-check"></span>
                        		<input type="radio" name="zhifu" value="2"/>
                        	</p>
                        </div>
                   	
                   	
                   	
                        <div class="btn-wrap-4">
                       		<p class="cardpay">储值卡支付<span class="pure-img-check"></span>
                       			<input type="radio" name="zhifu" value="4"/>
                       		</p>
                        </div>
                   	
                </div>
			</div>
			<div class="btn-wrap-5">
				<input type="button" class="button buybtn submit" value="确认提交" />
			</div>

			<div id="toastId" class="toastBlock">
			    <span class="toastContent"></span>
			</div>
			
		
	</div>
	<script type="text/javascript" src="/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/touch.js?v=5.0.0-faae2"></script>
    
	<script type="text/javascript" src="/js/mall/zepto.alert.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mall.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.zepto.js?v=5.0.0-faae2" ></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.core.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.scroller.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.datetime.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.i18n.zh.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			$("input[name='zhifu']:checked").prev('.pure-img').attr('src','/images/check.png');
			var tab = parseInt("1");
			/* if(tab == 1){
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else if (tab == 0){
			    $("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} else if(parseInt("1") != 0){
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} */
			
			if ("true" == "true" && 1 == 1) {
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else {
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			}
			
			// 控制显示图片比例
			var img_left_heights = $(".selectList img").width()*(0.75);
			$(".selectList img,.order-div").css('height',img_left_heights);
			
			// 取货日期
			var now = new Date();
            $('#scheduledTime').mobiscroll().datetime({
                minDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()+1),
                maxDate: new Date(now.getFullYear(), now.getMonth()+3, now.getDate()),
                stepMinute: 30,
                dateOrder :"yymmdd",
                dateFormat:"yy-mm-dd",
                timeWheels:"HHii",
                timeFormat:"HH:ii",
                //invalid: [{ start: '00:00', end: '08:00' },{ start: '22:00', end: '23:59' }],
                theme: 'ios7',
                lang: 'zh',
                display: 'bottom',
                mode: 'mixed'
            });
            $('#scheduledTime').click(function(){
                $('#scheduledTime').mobiscroll('show'); 
                return false;
            });
            
			$("ul li").click(function() {
				$("ul li").removeClass("active");
				$(this).addClass("active");
				if($(this).attr("data")=="#deliverFeeDiv"){
					$("#deliverFeeDiv").show();
					$("#FetchDiv").hide();
				}else{
					$("#deliverFeeDiv").hide();
					$("#FetchDiv").show();
				}
				$(".tab_content").hide();
				var href = $(this).find("a").attr("href");
				$(href).show();
				
				if(href.endWith("tab1")) {
					$(".btn-wrap-2").show();
					$(".btn-wrap-3").hide();
				} else if(href.endWith("tab2")) {
					$(".btn-wrap-2").hide();
					$(".btn-wrap-3").show();
				}
				//清空已选择的支付方式
				$("input[name='zhifu']").prop("checked", false);
				$(".zhifu .pure-img-check").css('background-image','url(/images/weixuan2.png)');
				return false;
			});
			//商户设置的满额包邮价
			/* var noDeliverFee = toPrice(parseFloat("200")/100);
			var totalFee = parseFloat("0.01");
			if(totalFee > noDeliverFee){
				$("#deliverFeeDiv .orange").text("合计：￥"+ totalFee);
				$("#deliverFee").text("含运费：￥0.00");
			} */
			$('.zhifu>div').click(function(){
	            $("input[name=zhifu]").prop("checked", false);
	            $(".pure-img-check").css('backgroundImage','url(/images/weixuan2.png)');
	            var img_obj = $(this).find('.pure-img-check');
	            var backgroundImage = img_obj.css('background-image');
	            var input_obj = $(this).find('input');
	            if(backgroundImage.indexOf("weixuan2.png") > 0){
	                img_obj.css('background-image','url(/images/check.png)');
	                input_obj.prop("checked", "checked");
	            }else{
	                img_obj.css('background-image','url(/images/weixuan2.png)');
	                input_obj.prop("checked", false);
	            }
	        });


	        $(".j-tab-adress").click(function(event) {
	        	var _url = $(this).find('.url_adress').prop("href");

	        	window.location.href = _url;
	        });
		});
		
		function validateRemark(){
			var text = filtEmoji($('.beizhulan textarea').val());
			if(text != "" && text != undefined){
				if(text.length>30){
					$.dialog({
                        widths : '80%',
                        content : '您输入的备注过长，请不要超过30个字',
                        title : 'no',
                        fullok : function() {
                            return true;
                        },                       
                        lock : true
                    });	
					return false;
				}
				return true;
			}
			return true;
		}
		function filtEmoji (str) {
			return unescape(escape(str).replace(/\%uD.{3}/g, ''));
		}
		
		$(".submit").click(function(event){
			var payType = $("input[name='zhifu']:checked").val();
			if(null == payType || "" == payType || typeof(payType) == "undefined") {
       		 $.dialog({
                    widths : '80%',
                    content : '请选择支付方式',
                    title : 'no',
                    fullok : function() {
                        return true;
                    },                       
                    lock : true
                });
       			return;
       		}
			$.dialog({
                content : "确认提交订单？",
                title : "no",
                okText: '取消',
                cancelText : '确定', 
                ok : function() {
                	$(".ft-right").removeAttr("disabled");
                	return;
                },
                cancel : function() {                        	
               		
               		if(payType == 1){
               			if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				doAlert("no", "无效物流方式");
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@1507774c";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/1", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "id=" + result.attach;
            	    			strParams += "&serial=10549840601068216320";
            	    			if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
            	        	});
            			}
               		}
               		
    				if(payType == 2){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@1507774c";
    					if(shopBranch == "") {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					var _fetchTime = $("#scheduledTime").val();
    					if(null == _fetchTime || "" == _fetchTime) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请选择取货时间',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						
    						var _remark = filtEmoji($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							fetchTime : _fetchTime,
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/2/2", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 3){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑收货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });

    						var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
    						// var _remark = encodeURI($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/1/3", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 4){
    					if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				$.dialog({
        	                    widths : '80%',
        	                    content : '无效物流方式',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@1507774c";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
            			// var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/4", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "?orderId=" + result.attach;
            					if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            					strParams += "&serial=10549840601068216320";
                				window.location.href = "/pay/5"+strParams;
            	        	});
            			}
            			
    				}
    				
                },
                lock : true
            });
		});
		
		//微信支付
		/* $(".payUseWX").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			var type = 0;
			$(".tab_content").each(function(){
				if($(this).css("display") != "none") {
					var attrId = $(this).attr("id");
					if(attrId == "tab1") {
						type = 1;//快递取货
					} else if(attrId == "tab2") {
						type = 2;//门店自提
					}
				}
			});
			if(type <= 0) {
				doAlert("no", "无效物流方式");
				return;
			}
			if(type == 1) {
				if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑收货地址");
					return;
				}
			}
			var _fetchTime = "";
			if(type == 2) {
				if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑取货地址");
					return;
				}
				_fetchTime = $("#scheduledTime").val();
				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
					doAlert("no", "请选择取货时间");
					return;
				}
				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@1507774c";
				if(shopBranch == "") {
					doAlert("no", "请编辑取货地址");
					return;
				}
			}
			
			var _remark = encodeURI($(".beizhulan").find("textarea").val());
			var params = {
				serial : "10549840601068216320",
				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
				fm : "1",
				mallGoodsId : "26838",
				amount : "1",
				cartIds : "",
				fetchTime : _fetchTime,
				remark : _remark
			};
			if(parseInt("1") == 1 && parseInt("1") == 2){
				var standardId = "";
				if(standardId != null && standardId != undefined){
					params.standardId = standardId;
				}
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				$.post("/cmorder/" + type+ "/1", params, function(result){
					dialog.close();
					
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					
					var strParams = "id=" + result.attach;
	    			strParams += "&serial=10549840601068216320";
	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
	        	});
			}
		}); */
		//货到付款
		/* $(".payAfrecv").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑收货地址");
				return;
			}
			
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				var _remark = encodeURI($(".beizhulan").find("textarea").val());
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/1/3", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
	        	});
			}
		}); */
		//到店支付
		// $(".payInshop").click(function(event) {
			/* if($(this).prop("disabled") == true)
        		return false;
			
			var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@1507774c";
			if(shopBranch == "") {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			var _fetchTime = $("#scheduledTime").val();
			if(null == _fetchTime || "" == _fetchTime) {
				doAlert("no", "请选择取货时间");
				return;
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				
				var _remark = $(".beizhulan").find("textarea").val();
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					fetchTime : _fetchTime,
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/2/2", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
	        	});
			} */
		// });
	
		// toast提示
		var toastTime=null;
		var displayTime=null;

		function setToast(html) {
		    if (toastTime != null) {
		        clearTimeout(toastTime);
		        clearTimeout(displayTime);
		    }
		    // $('toastId').style.display = 'block';
		    // $('toastId').style.opacity = 1;
		    $('#toastId').css({
		        display: 'block',
		        opacity: 1
		    });
		    $('#toastId .toastContent').text(html);

		    toastTime = setTimeout(function() {
		        // $('toastId').style.opacity = 0;
		        $('#toastId').css("opacity", 0);
		        displayTime = setTimeout(function() {
		            // $('toastId').style.display='none';
		            $('#toastId').css("display", "none");
		        }, 1000);
		    }, 1000);
		}

		function toastDisplay(str) {
		    setToast(str);
		}
	</script>
</body>
</html>
<!--加入判断用户是否关注公众号功能 add by lipengfei at 2015-11-9  -->
  	
	<script type="text/javascript" src="/js/bind/banner.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			//var SHOP_SERIAL = getCookie("SHOP_SERIAL");
			var SHOP_SERIAL = "10549840601068216320";
			if(null != SHOP_SERIAL && SHOP_SERIAL != ""){
				$.ajax({
					url : '/saofu_mobile/checkUserBindStatus',
					data : {
						"serial" : SHOP_SERIAL
					},
					type : 'post',
					cache : false,
					dataType : 'json',
					success : function(data) {
						if (data != null) {
							var guildFocusStr = data.guildFocusStr;
							if(guildFocusStr != null && guildFocusStr == "1"){
								var hasBindedShop = data.hasBindedShop;
								if(hasBindedShop == "0"){
									var qrName = data.QRPublicName;
									var qrUrl = data.QRCodeURL;
									if(qrName != "" && qrUrl != ""){
										var params = qrName+"**"+qrUrl;
										followModule(params);
									}
								}
							}
						} 
					},
					error : function() {
					}
				});
			}
		});
				
	</script>

2017-01-15 17:37:50,992 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:37:48 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=E94188DA11ABE8D30BCB09F78D52FEFD; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 17:37:50,992 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:37:50,992 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：到店支付
2017-01-15 17:37:50,992 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:37:50,993 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:37:50,993 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:37:50",step_action="{'\u65b9\u6cd5': 'get', 'url': '/mall/tobuy/1?', '\u53c2\u6570': {'mallGoodsId': '26838', 'amount': 1, 'type': 1, 'serial': '10549840601068216320'}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': '到店支付', '消息': '无法打开商品详情'}], '检查': 'body'}" WHERE executed_history_id = 20170115173744 AND testcase_id = 102 AND step_id = 104 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:50,996 testcase.py[line: 165] INFO: 测试用例[id=102, name=test-n-点击立即购买按钮]执行成功
2017-01-15 17:37:50,996 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:37:50,996 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Pass', '')", runtime="2017-01-15 17:37:50" WHERE executed_history_id = 20170115173744 AND testcase_id = 102 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:51,117 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=102]的执行结果
2017-01-15 17:37:51,237 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'importance': '2', 'summary': '', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-20 12:07:40', 'status': '1', 'layout': '1', 'name': 'test-n-把商品加入购物车', 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:58:09', 'updater_first_name': 'Testlink', 'testcase_id': '88', 'id': '89', 'testsuite_id': '87', 'preconditions': '', 'author_first_name': 'Testlink', 'tc_external_id': '4', 'version': '1', 'is_open': '1', 'steps': [{'id': '175', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n'}, {'id': '174', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'step_number': '2', 'active': '1', 'expected_results': ''}, {'id': '90', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '3', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n'}, {'id': '176', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'step_number': '4', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n'}, {'id': '177', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'execution_type': '1', 'step_number': '5', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'wecharno-4', 'updater_login': 'admin', 'active': '1', 'node_order': '1000', 'estimated_exec_duration': ''}]
2017-01-15 17:37:51,351 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:51,351 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:37:51,352 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 17:37:51,352 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 17:37:51,352 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 17:37:51,353 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:51,353 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:51,354 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:37:51,354 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:37:51,354 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 17:37:51,354 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 17:37:51,357 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2017-01-15 17:37:51,357 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:37:51,357 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}]
2017-01-15 17:37:51,357 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:37:51,357 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:37:51",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115173744 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:51,359 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2017-01-15 17:37:51,359 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:37:51,359 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:51,359 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:51,360 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:37:51,360 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2017-01-15 17:37:51,360 casestep.py[line: 149] INFO: 转换后的参数体为：(167020,)
2017-01-15 17:37:51,361 mydb.py[line: 72] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2017-01-15 17:37:51,553 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:37:51,553 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:37:51",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '\u53c2\u6570': [167020]}", expected_results="" WHERE executed_history_id = 20170115173744 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:51,556 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2017-01-15 17:37:51,557 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2017-01-15 17:37:51,557 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:51,557 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:51,559 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:37:51,560 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:37:51,560 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:37:51,560 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:37:51,560 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', 26838), ('standardId', 'undefined'), ('amount', 1), ('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 17:37:51,561 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:51,561 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:37:51,561 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2017-01-15 17:37:51,562 httpprotocol.py[line: 75] INFO: 参数为：b'mallGoodsId=26838&standardId=undefined&amount=1&serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2017-01-15 17:37:51,562 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:37:51,808 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:37:51,808 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"加入购物车失败","attach":null}
2017-01-15 17:37:51,808 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:37:49 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:37:51,808 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:37:51,808 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:37:51,808 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:37:51,809 testcase.py[line: 133] INFO: 步骤[3]执行失败,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 17:37:51,809 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:37:51,809 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 把商品加如购物车失败,success不为true", protocol_method="post", runtime="2017-01-15 17:37:51",step_action="{'\u65b9\u6cd5': 'post', 'url': '/addtocart', '\u53c2\u6570': {'mallGoodsId': 26838, 'standardId': 'undefined', 'amount': 1, 'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'匹配规则': '键值相等', '条件': [{'模式': {'success': True}, '消息': '把商品加如购物车失败,success不为true'}], '检查': 'body'}" WHERE executed_history_id = 20170115173744 AND testcase_id = 88 AND step_id = 90 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:51,812 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:37:51,812 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_urlencode>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 65, in test_interface_of_urlencode\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 把商品加如购物车失败,success不为true\n')])", runtime="2017-01-15 17:37:51" WHERE executed_history_id = 20170115173744 AND testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:51,813 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py' at line 1
2017-01-15 17:37:51,949 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=88]的执行结果
2017-01-15 17:37:52,080 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '2', 'importance': '2', 'summary': '', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-18 15:52:00', 'status': '1', 'layout': '1', 'name': 'test-n-显示默认页面', 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 18:17:12', 'updater_first_name': 'Testlink', 'testcase_id': '76', 'id': '77', 'testsuite_id': '75', 'preconditions': '', 'author_first_name': 'Testlink', 'tc_external_id': '1', 'version': '1', 'is_open': '1', 'steps': [{'id': '78', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/plist&quot;,<br />\n\t&quot;参数&quot;:{&quot;page_size&quot;:&quot;10&quot;,&quot;page_no&quot;:&quot;1&quot;,&quot;cateIds&quot;:&quot;&quot;,&quot;orderBy&quot;:&quot;&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;name&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '2', 'step_number': '1', 'active': '1', 'expected_results': '<p>\n\t｛&ldquo;检查&rdquo;:&ldquo;BODY&rdquo;，</p>\n<p>\n\t&ldquo;匹配规则&rdquo;：&ldquo;包含字符串&rdquo;，</p>\n<p>\n\t&ldquo;条件&rdquo;：【｛&ldquo;模式&rdquo;：&ldquo;\\&quot;currentPage\\&quot;:1&rdquo;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝，｛&ldquo;模式&rdquo;：&ldquo;\\&quot;pageStartRow\\&quot;:0&quot;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝】</p>\n<p>\n\t｝</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'wecharno-1', 'updater_login': 'admin', 'active': '1', 'node_order': '1000', 'estimated_exec_duration': ''}]
2017-01-15 17:37:52,220 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:52,220 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 76, 'test-n-显示默认页面', '微商城-显示商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:37:52,222 testplan.py[line: 72] INFO: 开始执行测试用例[id=76，name=test-n-显示默认页面]
2017-01-15 17:37:52,223 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}
2017-01-15 17:37:52,223 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\"currentPage\":1","消息":"接口返回错误"},{"模式":"\"pageStartRow\":0","消息":"接口返回错误"}]}
2017-01-15 17:37:52,223 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:52,223 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 76, 'test-n-显示默认页面', 'plan1_of_wechatno', 'pj_wechatno', 78, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}', '{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\\"currentPage\\":1","消息":"接口返回错误"},{"模式":"\\"pageStartRow\\":0","消息":"接口返回错误"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:52,225 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:37:52,225 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:37:52,226 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:37:52,226 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('page_size', '10'), ('page_no', '1'), ('cateIds', ''), ('orderBy', ''), ('serial', '10549840601068216320'), ('name', '')])
2017-01-15 17:37:52,226 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:52,227 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:37:52,227 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/plist
2017-01-15 17:37:52,227 httpprotocol.py[line: 75] INFO: 参数为：b'page_size=10&page_no=1&cateIds=&orderBy=&serial=10549840601068216320&name='
2017-01-15 17:37:52,227 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:37:52,447 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:37:52,447 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"dataList":[{"id":27105,"name":"微信支付测试-二级","privateSerial":null,"price":0,"oriPrice":0,"description":"微信支付测试-二级","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/30/b9e21dc4-6cf2-4923-9ec7-4259ecea09c1.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":39,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27090,"name":"测试1222-3","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ea123913-89df-4384-929e-158617f67cbe.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":60,"standardLowPrice":980.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27072,"name":"二级规格1129-2","privateSerial":null,"price":0,"oriPrice":0,"description":"二级规格1129-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/29/9ecf031d-e9bd-427e-b147-cb4a1f8fe5d3.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":25,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27087,"name":"1221-1","privateSerial":null,"price":0,"oriPrice":0,"description":"1221-1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/21/1e844fc5-ee37-4393-97af-2a220971ef1f.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":48,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27040,"name":"一级变三级（改bug前）","privateSerial":null,"price":0,"oriPrice":0,"description":"一级规格1109-2一级规格1109-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/09/23b306d5-384d-4b3b-a4f7-a757d9fc0635.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":135,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27088,"name":"测试1222","privateSerial":null,"price":8,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ca612435-f6e1-4f0d-bc18-61e558e8f720.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":2341,"istop":0,"soldCount":4,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":7,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27089,"name":"测试1222-2","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/37bc7e08-1a2f-4c88-9542-ec5613686d7e.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":26,"standardLowPrice":2100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26955,"name":"乐视超级电视","privateSerial":null,"price":0,"oriPrice":0,"description":"乐视超级电视","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/10/31/3d3ca77e-d010-42f3-804f-bc8a563ec753.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":88,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26971,"name":"多级规格测试010","privateSerial":null,"price":0,"oriPrice":0,"description":"多级规格测试010","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/01/fface01c-5d06-400e-bf7b-2ae2fd64c858.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":15,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27057,"name":"裙子","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/13dbced7-faae-4e13-aebe-6f69d72dc7e0.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":101,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false}],"pageInfo":{"pageSize":10,"currentPage":1,"totalPages":5,"totalRows":47,"pageStartRow":0,"pageEndRow":10,"pagination":true,"hasNextPage":true,"hasPreviousPage":false,"params":null,"needCount":true}}
2017-01-15 17:37:52,451 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:37:50 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:37:52,451 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:37:52,451 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2017-01-15 17:37:52,451 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2017-01-15 17:37:52,451 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:37:52,451 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:37:52,451 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2017-01-15 17:37:52",step_action="{'\u65b9\u6cd5': 'post', 'url': '/goods/plist', '\u53c2\u6570': {'page_size': '10', 'page_no': '1', 'cateIds': '', 'orderBy': '', 'serial': '10549840601068216320', 'name': ''}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': ''currentPage':1', '消息': '接口返回错误'}, {'模式': ''pageStartRow':0', '消息': '接口返回错误'}], '检查': 'BODY'}" WHERE executed_history_id = 20170115173744 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:52,453 testcase.py[line: 165] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2017-01-15 17:37:52,453 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:37:52,453 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Pass', '')", runtime="2017-01-15 17:37:52" WHERE executed_history_id = 20170115173744 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:52,579 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2017-01-15 17:37:52,705 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'importance': '2', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-26 15:06:38', 'status': '1', 'layout': '1', 'name': 'test-n-免费领取优惠券', 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 19:43:22', 'updater_first_name': 'Testlink', 'testcase_id': '126', 'id': '127', 'testsuite_id': '125', 'preconditions': '', 'author_first_name': 'Testlink', 'tc_external_id': '12', 'version': '1', 'is_open': '1', 'steps': [{'id': '181', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'active': '1', 'expected_results': ''}, {'id': '180', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'step_number': '2', 'active': '1', 'expected_results': ''}, {'id': '128', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '3', 'active': '1', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'wecharno-12', 'updater_login': 'admin', 'active': '1', 'node_order': '1000', 'estimated_exec_duration': ''}]
2017-01-15 17:37:52,838 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:52,839 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:37:52,841 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 17:37:52,841 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 17:37:52,842 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:37:52,842 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:37:52,842 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:52,842 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 17:37:52,848 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:37:52,848 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:37:52",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115173744 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:52,851 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 17:37:52,851 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:37:52,851 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:52,851 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:52,853 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:37:52,853 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:52,853 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 17:37:52,859 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:37:52,859 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:37:52",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115173744 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:52,861 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 17:37:52,862 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 17:37:52,862 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:52,862 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:52,863 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 17:37:52,864 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:37:52,864 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 17:37:52" WHERE executed_history_id = 20170115173744 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:52,999 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 17:37:53,243 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'importance': '2', 'summary': '', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-21 11:26:32', 'status': '1', 'layout': '1', 'name': 'test-n-创建储值卡支付订单', 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:33:09', 'updater_first_name': 'Testlink', 'testcase_id': '106', 'id': '107', 'testsuite_id': '105', 'preconditions': '', 'author_first_name': 'Testlink', 'tc_external_id': '8', 'version': '1', 'is_open': '1', 'steps': [{'id': '108', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'wecharno-8', 'updater_login': 'admin', 'active': '1', 'node_order': '1000', 'estimated_exec_duration': ''}]
2017-01-15 17:37:53,358 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:53,359 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:37:53,360 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:37:53,361 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:37:53,361 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:37:53,361 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:53,361 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:53,362 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:37:53,362 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:37:53,363 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:37:53,363 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:37:53,363 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:37:53,363 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:53,363 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:53,363 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:37:53,364 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:37:53,364 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:37:53,364 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 17:37:53,406 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:37:53,406 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:37:53,406 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:37:51 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:37:53,407 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:37:53,407 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:37:53,407 testcase.py[line: 133] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:37:53,407 testcase.py[line: 140] INFO: 正在更新步骤执行结果
2017-01-15 17:37:53,407 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:37:53",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}], '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body'}" WHERE executed_history_id = 20170115173744 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:53,409 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:37:53,409 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_urlencode>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 65, in test_interface_of_urlencode\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 65, in assert_result\n    self.assertIn(pattern_str, response_to_check, item[\'消息\'])\nAssertionError: \'"success":true\' not found in \'{"success":false,"message":"系统错误","attach":null}\' : 创建储值卡支付订单失败,success不为True\n')])", runtime="2017-01-15 17:37:53" WHERE executed_history_id = 20170115173744 AND testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:53,411 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py' at line 1
2017-01-15 17:37:53,524 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=106]的执行结果
2017-01-15 17:37:53,646 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'importance': '2', 'summary': '', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-20 15:50:42', 'status': '1', 'layout': '1', 'name': 'test-n-查看购物车商品列表', 'updater_last_name': 'Administrator', 'modification_ts': '2016-11-29 18:13:45', 'updater_first_name': 'Testlink', 'testcase_id': '98', 'id': '99', 'testsuite_id': '97', 'preconditions': '', 'author_first_name': 'Testlink', 'tc_external_id': '6', 'version': '1', 'is_open': '1', 'steps': [{'id': '101', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'execution_type': '1', 'step_number': '2', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;code&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;200&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'wecharno-6', 'updater_login': 'admin', 'active': '1', 'node_order': '1000', 'estimated_exec_duration': ''}]
2017-01-15 17:37:53,806 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:53,806 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 98, 'test-n-查看购物车商品列表', '微商城-查看购物车商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:37:53,808 testplan.py[line: 72] INFO: 开始执行测试用例[id=98，name=test-n-查看购物车商品列表]
2017-01-15 17:37:53,808 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2017-01-15 17:37:53,808 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}
2017-01-15 17:37:53,808 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:37:53,808 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 98, 'test-n-查看购物车商品列表', 'plan1_of_wechatno', 'pj_wechatno', 101, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:37:53,809 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:37:53,810 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:37:53,810 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:37:53,810 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:37:53,810 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 17:37:53,810 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:37:53,811 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:37:53,811 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2017-01-15 17:37:53,811 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:37:53,829 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:37:53,831 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"code":"4000","message":"Server Error"}
2017-01-15 17:37:53,831 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:37:51 GMT'), ('Content-Type', 'application/json;charset=ISO-8859-1'), ('Content-Length', '56'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:37:53,831 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:37:53,831 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：200
2017-01-15 17:37:53,832 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:37:53,832 testcase.py[line: 162] INFO: 正在更新步骤执行结果
2017-01-15 17:37:53,832 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:37:53",step_action="{'\u65b9\u6cd5': 'get', 'url': '/cartlist?', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': '200', '消息': '把商品移出购物车中失败'}], '检查': 'code'}" WHERE executed_history_id = 20170115173744 AND testcase_id = 98 AND step_id = 101 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:53,835 testcase.py[line: 165] INFO: 测试用例[id=98, name=test-n-查看购物车商品列表]执行成功
2017-01-15 17:37:53,835 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:37:53,835 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Pass', '')", runtime="2017-01-15 17:37:53" WHERE executed_history_id = 20170115173744 AND testcase_id = 98 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:53,997 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=98]的执行结果
2017-01-15 17:37:54,155 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'importance': '2', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n<p>\n\tulr中的40758966216286146560取自base_info.serial字段</p>\n', 'author_last_name': 'Administrator', 'creation_ts': '2016-07-26 12:12:10', 'status': '1', 'layout': '1', 'name': 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', 'updater_last_name': 'Administrator', 'modification_ts': '2016-07-29 18:31:36', 'updater_first_name': 'Testlink', 'testcase_id': '120', 'id': '121', 'testsuite_id': '109', 'preconditions': '', 'author_first_name': 'Testlink', 'tc_external_id': '11', 'version': '1', 'is_open': '1', 'steps': [{'id': '122', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CMOrder&quot;,<br />\n\t&quot;function&quot;:&quot;test_create_mall_order&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;params&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:2,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;success&quot;:1,&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n'}, {'id': '123', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;Pay5&quot;,<br />\n\t&quot;function&quot;:&quot;test_pay5&quot;,<br />\n\t&quot;method&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '2', 'active': '1', 'expected_results': '<p>\n\t{&quot;button_name&quot;:&quot;确认支付&quot;, &quot;page_title&quot;:&quot;储值卡&quot;}</p>\n'}, {'id': '124', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;GetInCoupon&quot;,<br />\n\t&quot;function&quot;:&quot;test_get_in_coupon&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;params&quot;:&quot;&quot;<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '3', 'active': '1', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;getByWeixin&quot;: 0, &quot;codeType&quot;: 2, &quot;title&quot;: &quot;动态校验&quot;, &quot;subTitle&quot;: &quot;动态校验&quot;, &quot;notice&quot;: &quot;动态校验&quot;, &quot;description&quot;: &quot;动态校验&quot;,&quot;useLimit&quot;:&quot;动态校验&quot;,&nbsp; &quot;dateInfoType&quot;: &quot;动态校验&quot;, &quot;cardType&quot;: 1,&quot;listing&quot;: 1, &quot;fitAll&quot;: 1,&quot;detailTxt&quot;: &quot;动态校验&quot;,&quot;servicePhone&quot;:&quot;动态校验&quot;,&quot;cashLeastCost&quot;: &quot;动态校验&quot;,&quot;cashReduceCost&quot;: &quot;动态校验&quot;,&quot;discount&quot;: 0,&quot;channel&quot;: -1,&quot;branchId&quot;: -1,&quot;success&quot;: 1, &quot;skuQuantity&quot;:&quot;动态校验&quot;,&quot;output_arg1&quot;:&quot;GetInCoupon.card_code&quot;</p>\n<p>\n\t}</p>\n'}, {'id': '129', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_with_cash_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:&quot;[GetInCoupon.card_code]&quot;,&quot;yhCardType&quot;:&quot;CASH&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'step_number': '4', 'active': '1', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;,&quot;coupon_weixin_verification_record&quot;:1}</p>\n'}], 'updater_id': '1', 'author_login': 'admin', 'author_id': '1', 'full_tc_external_id': 'wecharno-11', 'updater_login': 'admin', 'active': '0', 'node_order': '3', 'estimated_exec_duration': ''}]
2017-01-15 17:37:54,270 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:37:54,270 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115173744', 120, 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:37:54,271 testplan.py[line: 72] INFO: 开始执行测试用例[id=120，name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]
2017-01-15 17:37:54,271 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 17:37:54,271 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:37:54,271 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 17:37:54" WHERE executed_history_id = 20170115173744 AND testcase_id = 120 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:37:54,383 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=120]的执行结果
2017-01-15 17:37:54,383 testplan.py[line: 97] INFO: 测试计划[project=pj_wechatno ,testplan=plan1_of_wechatno]已执行完
2017-01-15 17:37:54,383 main.py[line: 242] INFO: 接口测试已执行完成，正在关闭数据库连接
2017-01-15 17:37:54,384 htmlreporter.py[line: 37] INFO: 正在查询测试用例总数
2017-01-15 17:37:54,384 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE executed_history_id = %s  data：('20170115173744',)
2017-01-15 17:37:54,386 htmlreporter.py[line: 43] INFO: 正在查询执行通过的用例数
2017-01-15 17:37:54,386 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Pass', '20170115173744')
2017-01-15 17:37:54,387 htmlreporter.py[line: 49] INFO: 正在查询执行失败的用例数
2017-01-15 17:37:54,387 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Fail', '20170115173744')
2017-01-15 17:37:54,388 htmlreporter.py[line: 55] INFO: 正在查询执行出错的用例数
2017-01-15 17:37:54,388 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Error', '20170115173744')
2017-01-15 17:37:54,389 htmlreporter.py[line: 61] INFO: 正在查询未执行的用例数
2017-01-15 17:37:54,389 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Block', '20170115173744')
2017-01-15 17:37:54,390 htmlreporter.py[line: 88] INFO: 正在查询已运的测试计划
2017-01-15 17:37:54,390 mydb.py[line: 104] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20170115173744',)
2017-01-15 17:37:54,391 htmlreporter.py[line: 114] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]的测试用例执行结果
2017-01-15 17:37:54,392 mydb.py[line: 104] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20170115173744')
2017-01-15 17:37:54,419 htmlreporter.py[line: 121] INFO: 正在记录测试测试计划[project：pj_pos, testplan：无计划]的测试用例运行结果到测试报告
2017-01-15 17:37:54,419 htmlreporter.py[line: 114] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例执行结果
2017-01-15 17:37:54,419 mydb.py[line: 104] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20170115173744')
2017-01-15 17:37:54,421 htmlreporter.py[line: 121] INFO: 正在记录测试测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例运行结果到测试报告
2017-01-15 17:37:54,423 htmlreporter.py[line: 135] INFO: 正在查询已运的测试计划
2017-01-15 17:37:54,423 mydb.py[line: 104] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20170115173744',)
2017-01-15 17:37:54,425 htmlreporter.py[line: 147] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]已运行的测试用例
2017-01-15 17:37:54,425 mydb.py[line: 104] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20170115173744')
2017-01-15 17:37:54,426 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=148]步骤运行结果
2017-01-15 17:37:54,426 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_pos', '无计划', 148, '20170115173744')
2017-01-15 17:37:54,428 htmlreporter.py[line: 147] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]已运行的测试用例
2017-01-15 17:37:54,428 mydb.py[line: 104] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20170115173744')
2017-01-15 17:37:54,430 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=114]步骤运行结果
2017-01-15 17:37:54,430 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 114, '20170115173744')
2017-01-15 17:37:54,431 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=106]步骤运行结果
2017-01-15 17:37:54,432 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 106, '20170115173744')
2017-01-15 17:37:54,433 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=80]步骤运行结果
2017-01-15 17:37:54,433 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 80, '20170115173744')
2017-01-15 17:37:54,435 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=110]步骤运行结果
2017-01-15 17:37:54,435 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 110, '20170115173744')
2017-01-15 17:37:54,437 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=93]步骤运行结果
2017-01-15 17:37:54,437 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 93, '20170115173744')
2017-01-15 17:37:54,439 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=88]步骤运行结果
2017-01-15 17:37:54,440 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 88, '20170115173744')
2017-01-15 17:37:54,442 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=102]步骤运行结果
2017-01-15 17:37:54,442 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 102, '20170115173744')
2017-01-15 17:37:54,444 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=76]步骤运行结果
2017-01-15 17:37:54,444 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 76, '20170115173744')
2017-01-15 17:37:54,446 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=126]步骤运行结果
2017-01-15 17:37:54,446 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 126, '20170115173744')
2017-01-15 17:37:54,448 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=98]步骤运行结果
2017-01-15 17:37:54,448 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 98, '20170115173744')
2017-01-15 17:37:54,449 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=120]步骤运行结果
2017-01-15 17:37:54,449 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 120, '20170115173744')
2017-01-15 17:37:54,450 htmlreporter.py[line: 207] INFO: 正在设置测试报告结果文件名
2017-01-15 17:37:54,451 htmlreporter.py[line: 217] INFO: 测试报告文件名所在路径为：E:\\Projects\\report\\test_report20170115173744.html
2017-01-15 17:37:54,451 htmlreporter.py[line: 210] INFO: 正在生成测试报告
2017-01-15 17:37:54,454 main.py[line: 265] INFO: 生成测试报告成功
2017-01-15 17:37:54,674 main.py[line: 272] INFO: E:\\Projects\\report\\test_report20170115173744.html
2017-01-15 17:37:54,674 main.py[line: 275] INFO: 正在发送测试报告邮件...
2017-01-15 17:37:55,347 main.py[line: 279] INFO: 发送邮件成功
2017-01-15 17:46:57,917 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 17:46:57,917 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 17:46:57,932 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 17:46:57,934 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 17:46:57,997 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 17:46:57,997 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 17:46:58,003 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 17:46:58,004 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 17:46:58,014 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 17:46:58,016 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 17:46:58,016 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 17:46:58,185 global_function.py[line: 19] INFO: 获取测试用例信息 [{'summary': '', 'author_id': '1', 'testsuite_id': '147', 'importance': '2', 'layout': '1', 'author_first_name': 'Testlink', 'tc_external_id': '1', 'active': '1', 'creation_ts': '2016-07-27 18:32:10', 'updater_login': 'admin', 'estimated_exec_duration': '', 'node_order': '1000', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-30 15:41:36', 'updater_last_name': 'Administrator', 'is_open': '1', 'execution_type': '1', 'name': 'test-n-登陆掌贝pos机', 'version': '1', 'status': '1', 'full_tc_external_id': 'pj_pos-1', 'author_last_name': 'Administrator', 'updater_id': '1', 'steps': [{'active': '1', 'execution_type': '1', 'id': '183', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'id': '182', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'id': '150', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n'}], 'id': '149', 'author_login': 'admin', 'preconditions': '<p>\n\t初始化用例</p>\n', 'testcase_id': '148'}]
2017-01-15 17:46:58,342 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 17:46:59,064 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:46:59,064 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '')
2017-01-15 17:46:59,066 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 17:46:59,066 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 17:46:59,066 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 17:46:59,066 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:46:59,066 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:46:59,068 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:46:59,068 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:46:59,068 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 17:46:59,071 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 17:46:59,071 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:46:59,071 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 17:46:59,071 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:46:59,071 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:46:59",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115174657 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:46:59,074 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 17:46:59,074 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 17:46:59,074 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:46:59,074 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:46:59,076 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:46:59,076 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 17:46:59,076 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 17:46:59,076 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 17:46:59,080 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 17:46:59,081 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:46:59,081 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 17:46:59,081 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:46:59,081 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:46:59",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'device_no': 1, 'serial_no': 2}, '检查': 'body'}" WHERE executed_history_id = 20170115174657 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:46:59,084 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 17:46:59,084 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 17:46:59,084 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:46:59,084 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:46:59,085 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:46:59,085 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 17:46:59,085 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:46:59,086 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:46:59,086 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 17:46:59,086 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 17:46:59,086 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 17:46:59,086 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 17:46:59,086 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 17:46:59,086 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 17:46:59,087 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 17:46:59,087 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 17:46:59,087 httpprotocol.py[line: 76] INFO: 请求头为：{'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0', 'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8'}
2017-01-15 17:46:59,525 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 17:46:59,525 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 17:46:59,525 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:46:57 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:46:59,525 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:46:59,525 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:46:59,526 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:46:59,527 testcase.py[line: 130] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 17:46:59,528 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 17:46:59,528 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 17:46:59",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0', 'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'匹配规则': '键值相等', '输出': {'OperatorId': {'operator': {'id': 'value'}}, 'Token': {'token': 'value'}}, '条件': [{'模式': {'success': True}, '消息': '登录失败,success不为true'}, {'模式': {'message': '成功'}, '消息': 'message不为成功'}, {'模式': {'code': '4001'}, '消息': 'code不为4001'}], '检查': 'body'}" WHERE executed_history_id = 20170115174657 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:46:59,531 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:46:59,531 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_json>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 126, in test_interface_of_json\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 登录失败,success不为true\n')])", runtime="2017-01-15 17:46:59" WHERE executed_history_id = 20170115174657 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:46:59,533 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py' at line 1
2017-01-15 17:46:59,533 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 17:46:59,534 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_json>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 126, in test_interface_of_json\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 登录失败,success不为true\n')])
2017-01-15 17:46:59,534 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 17:46:59,534 main.py[line: 115] INFO: 运行指定项目
2017-01-15 17:46:59,669 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 17:46:59,669 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 17:46:59,670 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 17:46:59,670 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 17:46:59,816 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 17:46:59,934 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 17:46:59,934 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 17:47:00,071 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['114', '106', '80', '98', '102', '120', '126', '76', '88', '110', '93'])
2017-01-15 17:47:00,206 testplan.py[line: 45] INFO: 获取测试用例信息 [{'summary': '', 'author_id': '1', 'testsuite_id': '113', 'importance': '2', 'layout': '1', 'author_first_name': 'Testlink', 'tc_external_id': '10', 'active': '1', 'creation_ts': '2016-07-25 15:02:41', 'updater_login': 'admin', 'estimated_exec_duration': '', 'node_order': '1000', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 17:52:17', 'updater_last_name': 'Administrator', 'is_open': '1', 'execution_type': '1', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'version': '1', 'status': '1', 'full_tc_external_id': 'wecharno-10', 'author_last_name': 'Administrator', 'updater_id': '1', 'steps': [{'active': '1', 'execution_type': '1', 'id': '116', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': ''}, {'active': '1', 'execution_type': '1', 'id': '117', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n'}], 'id': '115', 'author_login': 'admin', 'preconditions': '', 'testcase_id': '114'}]
2017-01-15 17:47:00,354 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:47:00,354 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:47:00,355 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 17:47:00,355 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 17:47:00,356 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:47:00,356 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:47:00,356 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:47:00,357 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:47:00,521 global_function.py[line: 19] INFO: 获取测试用例信息 [{'summary': '', 'author_id': '1', 'testsuite_id': '105', 'importance': '2', 'layout': '1', 'author_first_name': 'Testlink', 'tc_external_id': '8', 'active': '1', 'creation_ts': '2016-07-21 11:26:32', 'updater_login': 'admin', 'estimated_exec_duration': '', 'node_order': '1000', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 17:33:09', 'updater_last_name': 'Administrator', 'is_open': '1', 'execution_type': '1', 'name': 'test-n-创建储值卡支付订单', 'version': '1', 'status': '1', 'full_tc_external_id': 'wecharno-8', 'author_last_name': 'Administrator', 'updater_id': '1', 'steps': [{'active': '1', 'execution_type': '1', 'id': '108', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n'}], 'id': '107', 'author_login': 'admin', 'preconditions': '', 'testcase_id': '106'}]
2017-01-15 17:47:00,664 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 17:47:00,902 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:47:00,902 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:47:00,903 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:47:00,904 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:47:00,904 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:47:00,904 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:47:00,904 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:47:00,905 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:47:00,905 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:47:00,906 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:47:00,906 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:47:00,906 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:47:00,906 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:47:00,906 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:47:00,906 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:47:00,907 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:47:00,907 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:47:00,907 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 17:47:00,976 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:47:00,976 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:47:00,976 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:46:58 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:47:00,976 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:47:00,976 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:47:00,977 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:47:00,977 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 17:47:00,977 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:47:00",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'匹配规则': '包含字符串', '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}], '检查': 'body'}" WHERE executed_history_id = 20170115174657 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:00,979 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:47:00,979 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_urlencode>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 65, in test_interface_of_urlencode\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 65, in assert_result\n    self.assertIn(pattern_str, response_to_check, item[\'消息\'])\nAssertionError: \'"success":true\' not found in \'{"success":false,"message":"系统错误","attach":null}\' : 创建储值卡支付订单失败,success不为True\n')])", runtime="2017-01-15 17:47:00" WHERE executed_history_id = 20170115174657 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:00,979 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py' at line 1
2017-01-15 17:47:00,980 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 17:47:00,980 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=114, name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 17:47:00,980 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 17:47:00,980 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="无", runtime="2017-01-15 17:47:00",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 106, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u521b\u5efa\u50a8\u503c\u5361\u652f\u4ed8\u8ba2\u5355'}", expected_results="" WHERE executed_history_id = 20170115174657 AND testcase_id = 114 AND step_id = 116 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:00,981 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:47:00,981 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_urlencode>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 65, in test_interface_of_urlencode\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 65, in assert_result\n    self.assertIn(pattern_str, response_to_check, item[\'消息\'])\nAssertionError: \'"success":true\' not found in \'{"success":false,"message":"系统错误","attach":null}\' : 创建储值卡支付订单失败,success不为True\n')])", runtime="2017-01-15 17:47:00" WHERE executed_history_id = 20170115174657 AND testcase_id = 114 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:00,982 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py' at line 1
2017-01-15 17:47:01,092 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=114]的执行结果
2017-01-15 17:47:01,218 testplan.py[line: 45] INFO: 获取测试用例信息 [{'summary': '', 'author_id': '1', 'testsuite_id': '105', 'importance': '2', 'layout': '1', 'author_first_name': 'Testlink', 'tc_external_id': '8', 'active': '1', 'creation_ts': '2016-07-21 11:26:32', 'updater_login': 'admin', 'estimated_exec_duration': '', 'node_order': '1000', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 17:33:09', 'updater_last_name': 'Administrator', 'is_open': '1', 'execution_type': '1', 'name': 'test-n-创建储值卡支付订单', 'version': '1', 'status': '1', 'full_tc_external_id': 'wecharno-8', 'author_last_name': 'Administrator', 'updater_id': '1', 'steps': [{'active': '1', 'execution_type': '1', 'id': '108', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n'}], 'id': '107', 'author_login': 'admin', 'preconditions': '', 'testcase_id': '106'}]
2017-01-15 17:47:01,389 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:47:01,389 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:47:01,391 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:47:01,391 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:47:01,391 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:47:01,391 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:47:01,392 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:47:01,393 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:47:01,394 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:47:01,394 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:47:01,394 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:47:01,395 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:47:01,395 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:47:01,395 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:47:01,395 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:47:01,396 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:47:01,396 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:47:01,396 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 17:47:01,448 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:47:01,449 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:47:01,449 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:46:59 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:47:01,449 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:47:01,449 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:47:01,450 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:47:01,450 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 17:47:01,451 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:47:01",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'匹配规则': '包含字符串', '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}], '检查': 'body'}" WHERE executed_history_id = 20170115174657 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:01,453 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:47:01,454 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_urlencode>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 65, in test_interface_of_urlencode\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 65, in assert_result\n    self.assertIn(pattern_str, response_to_check, item[\'消息\'])\nAssertionError: \'"success":true\' not found in \'{"success":false,"message":"系统错误","attach":null}\' : 创建储值卡支付订单失败,success不为True\n')])", runtime="2017-01-15 17:47:01" WHERE executed_history_id = 20170115174657 AND testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:01,455 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py' at line 1
2017-01-15 17:47:01,635 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=106]的执行结果
2017-01-15 17:47:01,795 testplan.py[line: 45] INFO: 获取测试用例信息 [{'summary': '', 'author_id': '1', 'testsuite_id': '79', 'importance': '2', 'layout': '1', 'author_first_name': 'Testlink', 'tc_external_id': '2', 'active': '1', 'creation_ts': '2016-07-20 11:05:03', 'updater_login': 'admin', 'estimated_exec_duration': '', 'node_order': '1000', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 18:16:14', 'updater_last_name': 'Administrator', 'is_open': '1', 'execution_type': '1', 'name': 'test-n-点击商品', 'version': '1', 'status': '1', 'full_tc_external_id': 'wecharno-2', 'author_last_name': 'Administrator', 'updater_id': '1', 'steps': [{'active': '1', 'execution_type': '1', 'id': '82', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n'}], 'id': '81', 'author_login': 'admin', 'preconditions': '', 'testcase_id': '80'}]
2017-01-15 17:47:01,913 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:47:01,913 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:47:01,914 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2017-01-15 17:47:01,915 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2017-01-15 17:47:01,915 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2017-01-15 17:47:01,915 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:47:01,915 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:47:01,917 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:47:01,917 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:47:01,917 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:47:01,918 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('id', 26838), ('serial', '10549840601068216320')])
2017-01-15 17:47:01,918 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:47:01,918 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:47:01,918 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2017-01-15 17:47:01,918 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:47:01,964 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:47:01,964 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/css/malls/detail.css?v=5.0.0-faae2">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/mall/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320",
			mallConfigSerial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script src="/common/js/request.js?v=5.0.0-faae2"></script>
	<script src="/common/js/extend-number.js?v=5.0.0-faae2"></script>
	<script src="/component/iscroll/js/iscroll.js?v=5.0.0-faae2"></script>
	<script src="/component/swiper/js/swiper.min.js?v=5.0.0-faae2"></script>
	<script src="/js/malls/detail.js?v=5.0.0-faae2"></script>
</body>
</html>
2017-01-15 17:47:01,967 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:46:59 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3983'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=B1FB1E885953D9CE7830855D70AE5F32; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 17:47:01,967 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:47:01,967 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2017-01-15 17:47:01,967 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:47:01,968 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:47:01,968 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:47:01",step_action="{'\u65b9\u6cd5': 'get', 'url': '/goods/item?', '\u53c2\u6570': {'id': 26838, 'serial': '10549840601068216320'}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': '立即购买', '消息': '点击商品时无法打开购买页面'}], '检查': 'body'}" WHERE executed_history_id = 20170115174657 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:01,969 testcase.py[line: 162] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2017-01-15 17:47:01,970 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:47:01,970 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Pass', '')", runtime="2017-01-15 17:47:01" WHERE executed_history_id = 20170115174657 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:02,091 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2017-01-15 17:47:02,220 testplan.py[line: 45] INFO: 获取测试用例信息 [{'summary': '', 'author_id': '1', 'testsuite_id': '97', 'importance': '2', 'layout': '1', 'author_first_name': 'Testlink', 'tc_external_id': '6', 'active': '1', 'creation_ts': '2016-07-20 15:50:42', 'updater_login': 'admin', 'estimated_exec_duration': '', 'node_order': '1000', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 18:13:45', 'updater_last_name': 'Administrator', 'is_open': '1', 'execution_type': '1', 'name': 'test-n-查看购物车商品列表', 'version': '1', 'status': '1', 'full_tc_external_id': 'wecharno-6', 'author_last_name': 'Administrator', 'updater_id': '1', 'steps': [{'active': '1', 'execution_type': '1', 'id': '101', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;code&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;200&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n'}], 'id': '99', 'author_login': 'admin', 'preconditions': '', 'testcase_id': '98'}]
2017-01-15 17:47:02,374 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:47:02,374 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 98, 'test-n-查看购物车商品列表', '微商城-查看购物车商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:47:02,375 testplan.py[line: 72] INFO: 开始执行测试用例[id=98，name=test-n-查看购物车商品列表]
2017-01-15 17:47:02,375 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2017-01-15 17:47:02,375 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}
2017-01-15 17:47:02,375 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:47:02,376 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 98, 'test-n-查看购物车商品列表', 'plan1_of_wechatno', 'pj_wechatno', 101, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:47:02,377 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:47:02,377 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:47:02,377 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:47:02,377 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:47:02,378 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 17:47:02,378 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:47:02,378 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:47:02,378 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2017-01-15 17:47:02,378 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:47:02,396 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:47:02,397 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"code":"4000","message":"Server Error"}
2017-01-15 17:47:02,397 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:47:00 GMT'), ('Content-Type', 'application/json;charset=ISO-8859-1'), ('Content-Length', '56'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:47:02,397 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:47:02,397 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：200
2017-01-15 17:47:02,398 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:47:02,398 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:47:02,398 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:47:02",step_action="{'\u65b9\u6cd5': 'get', 'url': '/cartlist?', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': '200', '消息': '把商品移出购物车中失败'}], '检查': 'code'}" WHERE executed_history_id = 20170115174657 AND testcase_id = 98 AND step_id = 101 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:02,400 testcase.py[line: 162] INFO: 测试用例[id=98, name=test-n-查看购物车商品列表]执行成功
2017-01-15 17:47:02,400 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:47:02,400 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Pass', '')", runtime="2017-01-15 17:47:02" WHERE executed_history_id = 20170115174657 AND testcase_id = 98 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:02,547 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=98]的执行结果
2017-01-15 17:47:02,680 testplan.py[line: 45] INFO: 获取测试用例信息 [{'summary': '', 'author_id': '1', 'testsuite_id': '79', 'importance': '2', 'layout': '1', 'author_first_name': 'Testlink', 'tc_external_id': '7', 'active': '1', 'creation_ts': '2016-07-20 16:48:26', 'updater_login': 'admin', 'estimated_exec_duration': '', 'node_order': '1001', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 18:14:53', 'updater_last_name': 'Administrator', 'is_open': '1', 'execution_type': '1', 'name': 'test-n-点击立即购买按钮', 'version': '1', 'status': '1', 'full_tc_external_id': 'wecharno-7', 'author_last_name': 'Administrator', 'updater_id': '1', 'steps': [{'active': '1', 'execution_type': '1', 'id': '104', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/mall/tobuy/1?&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:&quot;26838&quot;,&quot;amount&quot;:1,&quot;type&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;到店支付&quot;,&quot;消息&quot;:&quot;无法打开商品详情&quot;}]</p>\n<p>\n\t}</p>\n'}], 'id': '103', 'author_login': 'admin', 'preconditions': '', 'testcase_id': '102'}]
2017-01-15 17:47:02,802 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:47:02,802 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 102, 'test-n-点击立即购买按钮', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:47:02,803 testplan.py[line: 72] INFO: 开始执行测试用例[id=102，name=test-n-点击立即购买按钮]
2017-01-15 17:47:02,804 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}
2017-01-15 17:47:02,804 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}
2017-01-15 17:47:02,804 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:47:02,804 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 102, 'test-n-点击立即购买按钮', 'plan1_of_wechatno', 'pj_wechatno', 104, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:47:02,806 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:47:02,806 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:47:02,806 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:47:02,806 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', '26838'), ('amount', 1), ('type', 1), ('serial', '10549840601068216320')])
2017-01-15 17:47:02,806 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:47:02,806 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:47:02,806 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/mall/tobuy/1?mallGoodsId=26838&amount=1&type=1&serial=10549840601068216320
2017-01-15 17:47:02,807 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:47:03,202 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:47:03,203 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 
	 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta http-equiv="Expires" CONTENT="0">
<meta http-equiv="Cache-Control" CONTENT="no-cache">
<meta http-equiv="Pragma" CONTENT="no-cache">
<title>微商城</title>
<link rel="stylesheet" href="/css/mall/pure.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/grids-core.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/zepto.alert.css?v=5.0.0-faae2">

<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.ios7.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.animation.css?v=5.0.0-faae2">
</head>
<style type="text/css">
* {
	margin: 0;
	padding: 0;
}

html {
	color: #626262;
	overflow-y: auto;
	overflow-x: hidden;
}

body {
	margin-bottom: 20px;
	overflow-y: auto;
	overflow-x: hidden;
}

a {
	text-decoration: none;
}

ol,ul {
	list-style: outside none none;
}

.left {
	float: left;
}

.right {
	float: right;
}

.in-block {
	display: inline-block;
}

.orange {
	color: #c58d04;
}

.grey {
	color: #adadad;
}

.bg-color {
	background: #ececec;
}

#wrapper {
	width: 100%;
	margin: 0 auto;
}

.header {
	width: 100%;
}

.header ul {
	position:relative;
	overflow: hidden;
}

.header ul li {
	width: 50%;
	float: left;
	height: 2.8em;
	line-height: 2.8em;
	background: #fff;
	text-align: center;
	border-bottom:1px solid #f38b44;
	-moz-box-sizing:border-box; /* Firefox */
     -webkit-box-sizing:border-box; /* Safari */
     box-sizing:border-box;
}
.header ul .lines{
	position: absolute;
	width: 1%;
	height: 2.8em;
	line-height: 2.8em;
	border-right: 1px solid #FDE5D4;
	left: 49%;
	top: -1px;
 } 
.header ul li a {
	color: #8b898a;
}

.tab_content>div {
	height: auto;
	font-size: 0.8em;
	margin: 0.5em 0;
}

.empty-p {
	width: 80%;
	float: left;
	padding: 0.5em 0;
}

.has-p {
    width: 100%;
    margin: 0 auto;
    padding: 0 1em;
    height: auto;
    line-height: 2.5em;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -webkit-box-sizing: -webkit-border-box;
}
.has-p-one{
    background: url(/images/mall/contact.png) no-repeat left center;
    background-size: 12px 12px;
}
.has-p-two{
    background: url(/images/mall/take.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.has-p-three{
    background: url(/images/mall/time.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.input-right{
    position: relative;
}
.input-right-img{
    width: 1em;
    position: absolute;
    right: 0.6em;
    top: 0.3em;
}
#scheduledTime{
    width:11em;
    height: 2em;
    border:1px solid #a0a0a0;
    border-radius:4px;
    color:#a0a0a0;
    text-indent:.5em
}
.hiddens-p{
    text-overflow:ellipsis; 
    overflow:hidden; 
    white-space:nowrap;  
}

.right-dashed {
	border-left: 1px solid #eee;
	margin-top: 1em;
	padding-bottom:1em;
}

#edit {
	padding: 1em 0 1em 2em;
    width: 10px;
}

.header ul li.active{
    border-bottom: 4px solid #f38b44;
}
.header ul li.active a{
    color: #f38b44!important;
}
.buy_title{
	background:#f3f3f3;
	padding:0.3em 1em;
	margin: 0;
}
.content {
	width: 100%;
	background: #fff;
	overflow: hidden;	
	padding-bottom:8%;
}

.selectList {
	border-bottom: 1px solid #efefef;
	margin: 0 auto;
	overflow: hidden;
	padding: 0.5em 1em;
	font-size: 0.8em;
	clear:both;
}

.selectList img {
    display: inline-block;
    float: left;
    width: 25%;
    border-radius: 4px;
    -webkit-border-radius: 4px;
}

.button {
	display:block;	
	width: 99%;	
	height: 3em;
	color: #fff;
	border: none;
	border-radius: 4px;
	margin:0 auto 0.5em auto;
}

.addbtn {
	background: #33CC66;
}

.btn-wrap-5 {
	padding: 0 1em;
}
.buybtn {
	width: 100%;
	background: #f68d3c;
}

.footer {
	width: 100%;
	background: #fff;
	color: #b6b6b6;
	overflow: hidden;
	text-align: left;
	margin-bottom: 1em;
}

.all-end-button {
	width: 90%;
	margin: 1em auto 0.5em;
}

.all-end-button p:first-child {
	text-align: left;
}

.error-page{
	background: #ddd;
    padding-bottom: 2em;
}
.error-page img{
    margin:0 auto;
	padding-top: 2em;
}
.error-page p{
    text-align:center;
    color:#000;
    width:80%;
    margin:1em auto 2em;
}
#deliverFee{
	text-align:left;
	font-size:0.8em;
	color:#acb0af;
}
.order-div{
    margin-left: 26.8%;            
    position: relative;
}
.order-div>p:last-child{
    width: 100%;
    margin: 0;
    position: absolute;
    bottom: 0;
    left: 0;
}
.m-t-n{
    margin-top: 0;
}
.m-t-n>span{
    display: inline-block;
}
.m-t-n>span:first-child{
    width: 70%;
}
.m-t-n>span:last-child{
    width: 30%;
}
.mtn-span{
    float: right;
}
.t-r-span{
	text-align:right;
}
.ccc{
    color: #ccc;
}
.peisong{
    text-align: right;
    margin-bottom: 0;
    padding-right: 1em;
    padding-top: 0.4em;
}
.peisong-detail{
    color:#000;
}
.peisong-detail input{
    border: none;
}
.peisong-detail div>p{
    padding-left: 1.8em;
    padding-top: 0.8em;
    padding-bottom: 0.8em;
    margin: 0;
    clear:both;
}

.weipay{            
    background: url(/images/weixin2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}        
.peisong-detail div>p.pay{
    background: url(/images/money2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.cardpay{
    background: url(/images/cardpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.mdpay{
    background: url(/images/mdpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}

.peisong-detail div[class^="btn-wrap-"] {
	border-bottom: 1px solid #dadada;
	padding: 0 1em;
	height: 3em;
	position: relative;
}

.weipay,.pay,.mdpay,.cardpay{
    position: relative;
}
 .weipay>img,.mdpay>img,.pay>img,.cardpay>img,.zhifu input{
    width: 1.2em;
    height: 1.2em;
    position: absolute;
    right: 0;
    top: 50%;
    transform:translateY(-50%);
}

.pure-img-check {
	background: url(/images/weixuan2.png) no-repeat left center;
    background-size:1.05em 1.05em; 
    float: right;
    height: 1.05em;
    width: 1.05em;
}

.zhifu input{
    display: none;
}
#deliverFeeDiv, #FetchDiv {
	border-bottom: 1px solid #efefef;
    padding: 0.5em 1em;
}
#deliverFeeDiv p, #FetchDiv p{
	text-align:right;
}

#remark {
	padding: 0.5em 1em;
	height: 4em;
	font-size: 1.0em;
}

.tab-adress {
	position: relative;
}
.icon-wrap {
	/*float: right;*/
	position: absolute;
	top: 11px;
	right: 10px;
}
.icon-wrap-spe {
	top: 0;
}

/*toast提示*/
.toastBlock {
    display: none; 
    position: fixed;
    bottom: 50%;
    width: 100%;
    text-align: center;
    transition: opacity 1s ease-out;
    z-index: 19;
}
.toastBlock .toastContent {
    display: inline-block;
    padding: 18px;
    border-radius: 5px;
    font-size: 14px;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.7);
}
</style>
<body>
	<div id="wrapper">
		
			
			
			
				
					
					
						
						
						
						
						
					
					
				
				
			
			<div class="header">
				
					<ul class="tab">
						<li class='active' data='#deliverFeeDiv'><a href="#tab1">快递发货</a></li>						
						<li class=''><a href="#tab2">到店自提</a></li>
						<span class="lines"></span>
					</ul>
				
			</div>
			<p class="buy_title"></p>
			
			<div class="tab_container">
				<div id="tab1" class="tab_content pure-g" style="">
					<div class="pure-u-24-24 tab-adress j-tab-adress">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">17817738178<span>(17817738178)</span></span>
								</div>
								<div class="has-p">
									<span>配送地址：</span>
									<span class="pure-u-3-5">天津市县宁河县详细</span>
                                </div>

                                <span class="icon-wrap">
                                	
                                		
                                		
                                		<a class="url_adress" href="/toaddr/1?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
                                		</a>
                                		
                                	
                                </span>
							
							
						
					</div>
				</div>
				<div id="tab2" class="tab_content pure-g" style="display:none">
					<div class="pure-u-24-24">
						
							
								<div class="tab-adress j-tab-adress">
									<div class="has-p">
										<span>联系方式：</span>
										<span class="pure-u-3-5">452<span>(17817738178)</span></span>
									</div>
	                                <div class="has-p">
	                                	<span>门&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;店：</span>
	                                	<span class="pure-u-3-5">
	                                		广东省深圳市福田区
		                                	
		                                		Biu
		                                	
	                                	</span>
	                                </div>
	                                <span class="icon-wrap">
	                                	
	                                		
	                                		
	                                		<a class="url_adress" href="/toaddr/2?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
	                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
	                                		</a>
	                                		
	                                	
	                                </span>
                                </div>
                               	<div class="has-p">
                               		<span>到店时间：</span>
                               		<span class="input-right">
                               			<input type="text" id="scheduledTime" name="scheduledTime" class="text" placeholder="请选择"/><img src="/images/mall/input-right.png?v=5.0.0-faae2" class="input-right-img">
                               		</span>
                               	</div>
							
							
						
					</div>
				</div>
			</div>
			<p class="buy_title"></p>
			
			<div class="content">
				
					
						
							<div class="selectList">
								<img src="http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg"> 
								
									
									
										<div class="order-div">
											<p class="m-t-n"><span>接口-测试商品1</span><span class="mtn-span t-r-span">￥0.01</span></p>
											<p><span class="ccc mtn-span">X1</span></p>
                                        </div>	
									
								
							</div>
						
					
					
					
				
				<div id="deliverFeeDiv">
					 
						
						
							<p id="deliverFee">含运费：￥0.01</p>
							<p class="orange">合计：￥0.02</p>
						
					 
				</div>
				<div id="FetchDiv" style="display: none;">
					<p class="orange">合计：￥0.01</p>
				</div>
				<div id="remark">
					<span class="beizhu" style="float:left">备注：</span>
                   	<span class="beizhulan">
                   		<textarea rows="3" placeholder="可于此处给卖家留言备注" style="border:0;width: 85%;"></textarea>
                   	</span>
				</div>
			</div>
			<p class="buy_title"></p>
			<div class="footer">
				<div class="peisong-detail zhifu">
                	
                        <div class="btn-wrap-1">
                         	<p class="weipay">微信支付<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="1"/>
                         	</p>
                        </div>
                    
                  	
                  	
                        <div class="btn-wrap-2" style="">
                         	<p class="pay">货到付款<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="3"/>
                         	</p>
                        </div>
                   	
		
                    
                        <div class="btn-wrap-3" style="display:none">
                        	<p class="mdpay">到店支付<span class="pure-img-check"></span>
                        		<input type="radio" name="zhifu" value="2"/>
                        	</p>
                        </div>
                   	
                   	
                   	
                        <div class="btn-wrap-4">
                       		<p class="cardpay">储值卡支付<span class="pure-img-check"></span>
                       			<input type="radio" name="zhifu" value="4"/>
                       		</p>
                        </div>
                   	
                </div>
			</div>
			<div class="btn-wrap-5">
				<input type="button" class="button buybtn submit" value="确认提交" />
			</div>

			<div id="toastId" class="toastBlock">
			    <span class="toastContent"></span>
			</div>
			
		
	</div>
	<script type="text/javascript" src="/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/touch.js?v=5.0.0-faae2"></script>
    
	<script type="text/javascript" src="/js/mall/zepto.alert.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mall.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.zepto.js?v=5.0.0-faae2" ></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.core.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.scroller.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.datetime.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.i18n.zh.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			$("input[name='zhifu']:checked").prev('.pure-img').attr('src','/images/check.png');
			var tab = parseInt("1");
			/* if(tab == 1){
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else if (tab == 0){
			    $("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} else if(parseInt("1") != 0){
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} */
			
			if ("true" == "true" && 1 == 1) {
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else {
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			}
			
			// 控制显示图片比例
			var img_left_heights = $(".selectList img").width()*(0.75);
			$(".selectList img,.order-div").css('height',img_left_heights);
			
			// 取货日期
			var now = new Date();
            $('#scheduledTime').mobiscroll().datetime({
                minDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()+1),
                maxDate: new Date(now.getFullYear(), now.getMonth()+3, now.getDate()),
                stepMinute: 30,
                dateOrder :"yymmdd",
                dateFormat:"yy-mm-dd",
                timeWheels:"HHii",
                timeFormat:"HH:ii",
                //invalid: [{ start: '00:00', end: '08:00' },{ start: '22:00', end: '23:59' }],
                theme: 'ios7',
                lang: 'zh',
                display: 'bottom',
                mode: 'mixed'
            });
            $('#scheduledTime').click(function(){
                $('#scheduledTime').mobiscroll('show'); 
                return false;
            });
            
			$("ul li").click(function() {
				$("ul li").removeClass("active");
				$(this).addClass("active");
				if($(this).attr("data")=="#deliverFeeDiv"){
					$("#deliverFeeDiv").show();
					$("#FetchDiv").hide();
				}else{
					$("#deliverFeeDiv").hide();
					$("#FetchDiv").show();
				}
				$(".tab_content").hide();
				var href = $(this).find("a").attr("href");
				$(href).show();
				
				if(href.endWith("tab1")) {
					$(".btn-wrap-2").show();
					$(".btn-wrap-3").hide();
				} else if(href.endWith("tab2")) {
					$(".btn-wrap-2").hide();
					$(".btn-wrap-3").show();
				}
				//清空已选择的支付方式
				$("input[name='zhifu']").prop("checked", false);
				$(".zhifu .pure-img-check").css('background-image','url(/images/weixuan2.png)');
				return false;
			});
			//商户设置的满额包邮价
			/* var noDeliverFee = toPrice(parseFloat("200")/100);
			var totalFee = parseFloat("0.01");
			if(totalFee > noDeliverFee){
				$("#deliverFeeDiv .orange").text("合计：￥"+ totalFee);
				$("#deliverFee").text("含运费：￥0.00");
			} */
			$('.zhifu>div').click(function(){
	            $("input[name=zhifu]").prop("checked", false);
	            $(".pure-img-check").css('backgroundImage','url(/images/weixuan2.png)');
	            var img_obj = $(this).find('.pure-img-check');
	            var backgroundImage = img_obj.css('background-image');
	            var input_obj = $(this).find('input');
	            if(backgroundImage.indexOf("weixuan2.png") > 0){
	                img_obj.css('background-image','url(/images/check.png)');
	                input_obj.prop("checked", "checked");
	            }else{
	                img_obj.css('background-image','url(/images/weixuan2.png)');
	                input_obj.prop("checked", false);
	            }
	        });


	        $(".j-tab-adress").click(function(event) {
	        	var _url = $(this).find('.url_adress').prop("href");

	        	window.location.href = _url;
	        });
		});
		
		function validateRemark(){
			var text = filtEmoji($('.beizhulan textarea').val());
			if(text != "" && text != undefined){
				if(text.length>30){
					$.dialog({
                        widths : '80%',
                        content : '您输入的备注过长，请不要超过30个字',
                        title : 'no',
                        fullok : function() {
                            return true;
                        },                       
                        lock : true
                    });	
					return false;
				}
				return true;
			}
			return true;
		}
		function filtEmoji (str) {
			return unescape(escape(str).replace(/\%uD.{3}/g, ''));
		}
		
		$(".submit").click(function(event){
			var payType = $("input[name='zhifu']:checked").val();
			if(null == payType || "" == payType || typeof(payType) == "undefined") {
       		 $.dialog({
                    widths : '80%',
                    content : '请选择支付方式',
                    title : 'no',
                    fullok : function() {
                        return true;
                    },                       
                    lock : true
                });
       			return;
       		}
			$.dialog({
                content : "确认提交订单？",
                title : "no",
                okText: '取消',
                cancelText : '确定', 
                ok : function() {
                	$(".ft-right").removeAttr("disabled");
                	return;
                },
                cancel : function() {                        	
               		
               		if(payType == 1){
               			if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				doAlert("no", "无效物流方式");
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@544ca932";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/1", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "id=" + result.attach;
            	    			strParams += "&serial=10549840601068216320";
            	    			if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
            	        	});
            			}
               		}
               		
    				if(payType == 2){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@544ca932";
    					if(shopBranch == "") {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					var _fetchTime = $("#scheduledTime").val();
    					if(null == _fetchTime || "" == _fetchTime) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请选择取货时间',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						
    						var _remark = filtEmoji($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							fetchTime : _fetchTime,
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/2/2", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 3){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑收货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });

    						var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
    						// var _remark = encodeURI($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/1/3", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 4){
    					if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				$.dialog({
        	                    widths : '80%',
        	                    content : '无效物流方式',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@544ca932";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
            			// var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/4", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "?orderId=" + result.attach;
            					if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            					strParams += "&serial=10549840601068216320";
                				window.location.href = "/pay/5"+strParams;
            	        	});
            			}
            			
    				}
    				
                },
                lock : true
            });
		});
		
		//微信支付
		/* $(".payUseWX").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			var type = 0;
			$(".tab_content").each(function(){
				if($(this).css("display") != "none") {
					var attrId = $(this).attr("id");
					if(attrId == "tab1") {
						type = 1;//快递取货
					} else if(attrId == "tab2") {
						type = 2;//门店自提
					}
				}
			});
			if(type <= 0) {
				doAlert("no", "无效物流方式");
				return;
			}
			if(type == 1) {
				if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑收货地址");
					return;
				}
			}
			var _fetchTime = "";
			if(type == 2) {
				if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑取货地址");
					return;
				}
				_fetchTime = $("#scheduledTime").val();
				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
					doAlert("no", "请选择取货时间");
					return;
				}
				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@544ca932";
				if(shopBranch == "") {
					doAlert("no", "请编辑取货地址");
					return;
				}
			}
			
			var _remark = encodeURI($(".beizhulan").find("textarea").val());
			var params = {
				serial : "10549840601068216320",
				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
				fm : "1",
				mallGoodsId : "26838",
				amount : "1",
				cartIds : "",
				fetchTime : _fetchTime,
				remark : _remark
			};
			if(parseInt("1") == 1 && parseInt("1") == 2){
				var standardId = "";
				if(standardId != null && standardId != undefined){
					params.standardId = standardId;
				}
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				$.post("/cmorder/" + type+ "/1", params, function(result){
					dialog.close();
					
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					
					var strParams = "id=" + result.attach;
	    			strParams += "&serial=10549840601068216320";
	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
	        	});
			}
		}); */
		//货到付款
		/* $(".payAfrecv").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑收货地址");
				return;
			}
			
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				var _remark = encodeURI($(".beizhulan").find("textarea").val());
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/1/3", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
	        	});
			}
		}); */
		//到店支付
		// $(".payInshop").click(function(event) {
			/* if($(this).prop("disabled") == true)
        		return false;
			
			var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@544ca932";
			if(shopBranch == "") {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			var _fetchTime = $("#scheduledTime").val();
			if(null == _fetchTime || "" == _fetchTime) {
				doAlert("no", "请选择取货时间");
				return;
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				
				var _remark = $(".beizhulan").find("textarea").val();
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					fetchTime : _fetchTime,
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/2/2", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
	        	});
			} */
		// });
	
		// toast提示
		var toastTime=null;
		var displayTime=null;

		function setToast(html) {
		    if (toastTime != null) {
		        clearTimeout(toastTime);
		        clearTimeout(displayTime);
		    }
		    // $('toastId').style.display = 'block';
		    // $('toastId').style.opacity = 1;
		    $('#toastId').css({
		        display: 'block',
		        opacity: 1
		    });
		    $('#toastId .toastContent').text(html);

		    toastTime = setTimeout(function() {
		        // $('toastId').style.opacity = 0;
		        $('#toastId').css("opacity", 0);
		        displayTime = setTimeout(function() {
		            // $('toastId').style.display='none';
		            $('#toastId').css("display", "none");
		        }, 1000);
		    }, 1000);
		}

		function toastDisplay(str) {
		    setToast(str);
		}
	</script>
</body>
</html>
<!--加入判断用户是否关注公众号功能 add by lipengfei at 2015-11-9  -->
  	
	<script type="text/javascript" src="/js/bind/banner.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			//var SHOP_SERIAL = getCookie("SHOP_SERIAL");
			var SHOP_SERIAL = "10549840601068216320";
			if(null != SHOP_SERIAL && SHOP_SERIAL != ""){
				$.ajax({
					url : '/saofu_mobile/checkUserBindStatus',
					data : {
						"serial" : SHOP_SERIAL
					},
					type : 'post',
					cache : false,
					dataType : 'json',
					success : function(data) {
						if (data != null) {
							var guildFocusStr = data.guildFocusStr;
							if(guildFocusStr != null && guildFocusStr == "1"){
								var hasBindedShop = data.hasBindedShop;
								if(hasBindedShop == "0"){
									var qrName = data.QRPublicName;
									var qrUrl = data.QRCodeURL;
									if(qrName != "" && qrUrl != ""){
										var params = qrName+"**"+qrUrl;
										followModule(params);
									}
								}
							}
						} 
					},
					error : function() {
					}
				});
			}
		});
				
	</script>

2017-01-15 17:47:03,206 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:47:00 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=7AA9BC083AF99081CB4CF952FFD58730; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 17:47:03,206 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:47:03,207 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：到店支付
2017-01-15 17:47:03,207 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:47:03,207 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:47:03,207 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:47:02",step_action="{'\u65b9\u6cd5': 'get', 'url': '/mall/tobuy/1?', '\u53c2\u6570': {'mallGoodsId': '26838', 'amount': 1, 'type': 1, 'serial': '10549840601068216320'}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': '到店支付', '消息': '无法打开商品详情'}], '检查': 'body'}" WHERE executed_history_id = 20170115174657 AND testcase_id = 102 AND step_id = 104 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:03,209 testcase.py[line: 162] INFO: 测试用例[id=102, name=test-n-点击立即购买按钮]执行成功
2017-01-15 17:47:03,209 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:47:03,209 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Pass', '')", runtime="2017-01-15 17:47:02" WHERE executed_history_id = 20170115174657 AND testcase_id = 102 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:03,349 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=102]的执行结果
2017-01-15 17:47:03,507 testplan.py[line: 45] INFO: 获取测试用例信息 [{'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n<p>\n\tulr中的40758966216286146560取自base_info.serial字段</p>\n', 'author_id': '1', 'testsuite_id': '109', 'importance': '2', 'layout': '1', 'author_first_name': 'Testlink', 'tc_external_id': '11', 'active': '0', 'creation_ts': '2016-07-26 12:12:10', 'updater_login': 'admin', 'estimated_exec_duration': '', 'node_order': '3', 'updater_first_name': 'Testlink', 'modification_ts': '2016-07-29 18:31:36', 'updater_last_name': 'Administrator', 'is_open': '1', 'execution_type': '1', 'name': 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', 'version': '1', 'status': '1', 'full_tc_external_id': 'wecharno-11', 'author_last_name': 'Administrator', 'updater_id': '1', 'steps': [{'active': '1', 'execution_type': '1', 'id': '122', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CMOrder&quot;,<br />\n\t&quot;function&quot;:&quot;test_create_mall_order&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;params&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:2,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;success&quot;:1,&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n'}, {'active': '1', 'execution_type': '1', 'id': '123', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;Pay5&quot;,<br />\n\t&quot;function&quot;:&quot;test_pay5&quot;,<br />\n\t&quot;method&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;button_name&quot;:&quot;确认支付&quot;, &quot;page_title&quot;:&quot;储值卡&quot;}</p>\n'}, {'active': '1', 'execution_type': '1', 'id': '124', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;GetInCoupon&quot;,<br />\n\t&quot;function&quot;:&quot;test_get_in_coupon&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;params&quot;:&quot;&quot;<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;getByWeixin&quot;: 0, &quot;codeType&quot;: 2, &quot;title&quot;: &quot;动态校验&quot;, &quot;subTitle&quot;: &quot;动态校验&quot;, &quot;notice&quot;: &quot;动态校验&quot;, &quot;description&quot;: &quot;动态校验&quot;,&quot;useLimit&quot;:&quot;动态校验&quot;,&nbsp; &quot;dateInfoType&quot;: &quot;动态校验&quot;, &quot;cardType&quot;: 1,&quot;listing&quot;: 1, &quot;fitAll&quot;: 1,&quot;detailTxt&quot;: &quot;动态校验&quot;,&quot;servicePhone&quot;:&quot;动态校验&quot;,&quot;cashLeastCost&quot;: &quot;动态校验&quot;,&quot;cashReduceCost&quot;: &quot;动态校验&quot;,&quot;discount&quot;: 0,&quot;channel&quot;: -1,&quot;branchId&quot;: -1,&quot;success&quot;: 1, &quot;skuQuantity&quot;:&quot;动态校验&quot;,&quot;output_arg1&quot;:&quot;GetInCoupon.card_code&quot;</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'id': '129', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_with_cash_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:&quot;[GetInCoupon.card_code]&quot;,&quot;yhCardType&quot;:&quot;CASH&quot;}<br />\n\t}</p>\n', 'step_number': '4', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;,&quot;coupon_weixin_verification_record&quot;:1}</p>\n'}], 'id': '121', 'author_login': 'admin', 'preconditions': '', 'testcase_id': '120'}]
2017-01-15 17:47:03,635 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:47:03,635 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 120, 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:47:03,637 testplan.py[line: 72] INFO: 开始执行测试用例[id=120，name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]
2017-01-15 17:47:03,637 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 17:47:03,637 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:47:03,637 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 17:47:03" WHERE executed_history_id = 20170115174657 AND testcase_id = 120 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:03,753 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=120]的执行结果
2017-01-15 17:47:03,876 testplan.py[line: 45] INFO: 获取测试用例信息 [{'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'author_id': '1', 'testsuite_id': '125', 'importance': '2', 'layout': '1', 'author_first_name': 'Testlink', 'tc_external_id': '12', 'active': '1', 'creation_ts': '2016-07-26 15:06:38', 'updater_login': 'admin', 'estimated_exec_duration': '', 'node_order': '1000', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 19:43:22', 'updater_last_name': 'Administrator', 'is_open': '1', 'execution_type': '1', 'name': 'test-n-免费领取优惠券', 'version': '1', 'status': '1', 'full_tc_external_id': 'wecharno-12', 'author_last_name': 'Administrator', 'updater_id': '1', 'steps': [{'active': '1', 'execution_type': '1', 'id': '181', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'expected_results': ''}, {'active': '1', 'execution_type': '1', 'id': '180', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'expected_results': ''}, {'active': '1', 'execution_type': '1', 'id': '128', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n'}], 'id': '127', 'author_login': 'admin', 'preconditions': '', 'testcase_id': '126'}]
2017-01-15 17:47:03,990 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:47:03,991 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:47:03,991 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 17:47:03,992 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 17:47:03,992 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:47:03,992 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:47:03,992 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:47:03,992 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 17:47:03,998 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:47:03,998 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:47:03",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115174657 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:03,999 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 17:47:04,000 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:47:04,000 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:47:04,000 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:47:04,001 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:47:04,001 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:47:04,001 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 17:47:04,007 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:47:04,007 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:47:04",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115174657 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:04,009 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 17:47:04,009 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 17:47:04,009 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:47:04,009 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:47:04,010 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 17:47:04,010 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:47:04,010 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 17:47:03" WHERE executed_history_id = 20170115174657 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:04,124 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 17:47:04,402 testplan.py[line: 45] INFO: 获取测试用例信息 [{'summary': '', 'author_id': '1', 'testsuite_id': '75', 'importance': '2', 'layout': '1', 'author_first_name': 'Testlink', 'tc_external_id': '1', 'active': '1', 'creation_ts': '2016-07-18 15:52:00', 'updater_login': 'admin', 'estimated_exec_duration': '', 'node_order': '1000', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 18:17:12', 'updater_last_name': 'Administrator', 'is_open': '1', 'execution_type': '2', 'name': 'test-n-显示默认页面', 'version': '1', 'status': '1', 'full_tc_external_id': 'wecharno-1', 'author_last_name': 'Administrator', 'updater_id': '1', 'steps': [{'active': '1', 'execution_type': '2', 'id': '78', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/plist&quot;,<br />\n\t&quot;参数&quot;:{&quot;page_size&quot;:&quot;10&quot;,&quot;page_no&quot;:&quot;1&quot;,&quot;cateIds&quot;:&quot;&quot;,&quot;orderBy&quot;:&quot;&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;name&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t｛&ldquo;检查&rdquo;:&ldquo;BODY&rdquo;，</p>\n<p>\n\t&ldquo;匹配规则&rdquo;：&ldquo;包含字符串&rdquo;，</p>\n<p>\n\t&ldquo;条件&rdquo;：【｛&ldquo;模式&rdquo;：&ldquo;\\&quot;currentPage\\&quot;:1&rdquo;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝，｛&ldquo;模式&rdquo;：&ldquo;\\&quot;pageStartRow\\&quot;:0&quot;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝】</p>\n<p>\n\t｝</p>\n'}], 'id': '77', 'author_login': 'admin', 'preconditions': '', 'testcase_id': '76'}]
2017-01-15 17:47:04,555 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:47:04,555 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 76, 'test-n-显示默认页面', '微商城-显示商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:47:04,557 testplan.py[line: 72] INFO: 开始执行测试用例[id=76，name=test-n-显示默认页面]
2017-01-15 17:47:04,557 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}
2017-01-15 17:47:04,557 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\"currentPage\":1","消息":"接口返回错误"},{"模式":"\"pageStartRow\":0","消息":"接口返回错误"}]}
2017-01-15 17:47:04,557 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:47:04,558 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 76, 'test-n-显示默认页面', 'plan1_of_wechatno', 'pj_wechatno', 78, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}', '{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\\"currentPage\\":1","消息":"接口返回错误"},{"模式":"\\"pageStartRow\\":0","消息":"接口返回错误"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:47:04,560 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:47:04,560 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:47:04,560 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:47:04,560 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('page_size', '10'), ('page_no', '1'), ('cateIds', ''), ('orderBy', ''), ('serial', '10549840601068216320'), ('name', '')])
2017-01-15 17:47:04,560 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:47:04,560 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:47:04,561 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/plist
2017-01-15 17:47:04,561 httpprotocol.py[line: 75] INFO: 参数为：b'page_size=10&page_no=1&cateIds=&orderBy=&serial=10549840601068216320&name='
2017-01-15 17:47:04,561 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:47:04,903 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:47:04,903 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"dataList":[{"id":27105,"name":"微信支付测试-二级","privateSerial":null,"price":0,"oriPrice":0,"description":"微信支付测试-二级","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/30/b9e21dc4-6cf2-4923-9ec7-4259ecea09c1.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":39,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27090,"name":"测试1222-3","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ea123913-89df-4384-929e-158617f67cbe.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":60,"standardLowPrice":980.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27072,"name":"二级规格1129-2","privateSerial":null,"price":0,"oriPrice":0,"description":"二级规格1129-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/29/9ecf031d-e9bd-427e-b147-cb4a1f8fe5d3.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":25,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27087,"name":"1221-1","privateSerial":null,"price":0,"oriPrice":0,"description":"1221-1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/21/1e844fc5-ee37-4393-97af-2a220971ef1f.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":48,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27040,"name":"一级变三级（改bug前）","privateSerial":null,"price":0,"oriPrice":0,"description":"一级规格1109-2一级规格1109-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/09/23b306d5-384d-4b3b-a4f7-a757d9fc0635.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":135,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27088,"name":"测试1222","privateSerial":null,"price":8,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ca612435-f6e1-4f0d-bc18-61e558e8f720.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":2341,"istop":0,"soldCount":4,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":7,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27089,"name":"测试1222-2","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/37bc7e08-1a2f-4c88-9542-ec5613686d7e.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":26,"standardLowPrice":2100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26955,"name":"乐视超级电视","privateSerial":null,"price":0,"oriPrice":0,"description":"乐视超级电视","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/10/31/3d3ca77e-d010-42f3-804f-bc8a563ec753.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":88,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26971,"name":"多级规格测试010","privateSerial":null,"price":0,"oriPrice":0,"description":"多级规格测试010","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/01/fface01c-5d06-400e-bf7b-2ae2fd64c858.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":15,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27057,"name":"裙子","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/13dbced7-faae-4e13-aebe-6f69d72dc7e0.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":101,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false}],"pageInfo":{"pageSize":10,"currentPage":1,"totalPages":5,"totalRows":47,"pageStartRow":0,"pageEndRow":10,"pagination":true,"hasNextPage":true,"hasPreviousPage":false,"params":null,"needCount":true}}
2017-01-15 17:47:04,904 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:47:02 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:47:04,904 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:47:04,904 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2017-01-15 17:47:04,905 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2017-01-15 17:47:04,905 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:47:04,905 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:47:04,906 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2017-01-15 17:47:04",step_action="{'\u65b9\u6cd5': 'post', 'url': '/goods/plist', '\u53c2\u6570': {'page_size': '10', 'page_no': '1', 'cateIds': '', 'orderBy': '', 'serial': '10549840601068216320', 'name': ''}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': ''currentPage':1', '消息': '接口返回错误'}, {'模式': ''pageStartRow':0', '消息': '接口返回错误'}], '检查': 'BODY'}" WHERE executed_history_id = 20170115174657 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:04,909 testcase.py[line: 162] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2017-01-15 17:47:04,909 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:47:04,909 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Pass', '')", runtime="2017-01-15 17:47:04" WHERE executed_history_id = 20170115174657 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:47:05,024 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2017-01-15 17:47:05,146 testplan.py[line: 45] INFO: 获取测试用例信息 [{'summary': '', 'author_id': '1', 'testsuite_id': '87', 'importance': '2', 'layout': '1', 'author_first_name': 'Testlink', 'tc_external_id': '4', 'active': '1', 'creation_ts': '2016-07-20 12:07:40', 'updater_login': 'admin', 'estimated_exec_duration': '', 'node_order': '1000', 'updater_first_name': 'Testlink', 'modification_ts': '2017-01-15 17:46:37', 'updater_last_name': 'Administrator', 'is_open': '1', 'execution_type': '1', 'name': 'test-n-把商品加入购物车', 'version': '1', 'status': '1', 'full_tc_external_id': 'wecharno-4', 'author_last_name': 'Administrator', 'updater_id': '1', 'steps': [{'active': '1', 'execution_type': '1', 'id': '175', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'id': '174', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'expected_results': ''}, {'active': '1', 'execution_type': '1', 'id': '90', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'id': '176', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '4', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n'}, {'active': '1', 'execution_type': '1', 'id': '177', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '5', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n'}], 'id': '89', 'author_login': 'admin', 'preconditions': '', 'testcase_id': '88'}]
2017-01-15 17:47:05,266 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:47:05,266 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:47:05,268 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 17:47:05,268 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 17:47:05,268 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 17:47:05,268 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:47:05,269 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115174657', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:47:05,270 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:47:05,270 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:47:05,270 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 17:47:05,270 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 17:47:05,273 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 17:47:05,273 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 17:59:38,265 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 17:59:38,265 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 17:59:38,277 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 17:59:38,281 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 17:59:38,345 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 17:59:38,345 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 17:59:38,346 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 17:59:38,346 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 17:59:38,347 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 17:59:38,349 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 17:59:38,349 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 17:59:38,596 global_function.py[line: 19] INFO: 获取测试用例信息 [{'execution_type': '1', 'summary': '', 'full_tc_external_id': 'pj_pos-1', 'name': 'test-n-登陆掌贝pos机', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '148', 'preconditions': '<p>\n\t初始化用例</p>\n', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '1', 'testsuite_id': '147', 'node_order': '1000', 'active': '1', 'modification_ts': '2016-11-30 15:41:36', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-27 18:32:10', 'status': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '183'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '182'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'id': '150'}], 'id': '149'}]
2017-01-15 17:59:38,743 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 17:59:39,401 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:39,401 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '')
2017-01-15 17:59:39,403 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 17:59:39,403 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 17:59:39,403 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 17:59:39,403 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:39,403 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:39,404 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:59:39,405 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:59:39,405 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 17:59:39,408 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 17:59:39,408 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:59:39,408 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 17:59:39,409 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:59:39,409 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:59:39",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'检查': 'body', '输出': {'branch_id': 1}}" WHERE executed_history_id = 20170115175938 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:59:39,410 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 17:59:39,411 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 17:59:39,411 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:39,411 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:39,412 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:59:39,412 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 17:59:39,412 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 17:59:39,412 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 17:59:39,415 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 17:59:39,415 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 17:59:39,415 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 17:59:39,415 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:59:39,415 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:59:39",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'检查': 'body', '输出': {'serial_no': 2, 'device_no': 1}}" WHERE executed_history_id = 20170115175938 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:59:39,417 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 17:59:39,417 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 17:59:39,417 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:39,417 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:39,418 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 17:59:39,419 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 17:59:39,419 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:59:39,419 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:59:39,419 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 17:59:39,419 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 17:59:39,419 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 17:59:39,419 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 17:59:39,419 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 17:59:39,420 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 17:59:39,420 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 17:59:39,420 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 17:59:39,420 httpprotocol.py[line: 76] INFO: 请求头为：{'SerialNo': '[CaseStep.serial_no]', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'ProtocolVersion': '4.0', 'ProductVersion': '[global_product_version]'}
2017-01-15 17:59:39,900 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 17:59:39,900 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 17:59:39,901 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:59:37 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:59:39,901 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:59:39,901 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 17:59:39,901 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 17:59:39,903 testcase.py[line: 130] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 17:59:39,903 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 17:59:39,903 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 17:59:39",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0', 'SerialNo': '[CaseStep.serial_no]'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'检查': 'body', '输出': {'Token': {'token': 'value'}, 'OperatorId': {'operator': {'id': 'value'}}}, '匹配规则': '键值相等', '条件': [{'消息': '登录失败,success不为true', '模式': {'success': True}}, {'消息': 'message不为成功', '模式': {'message': '成功'}}, {'消息': 'code不为4001', '模式': {'code': '4001'}}]}" WHERE executed_history_id = 20170115175938 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:59:39,908 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:59:39,909 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:59:39" WHERE executed_history_id = 20170115175938 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 17:59:39,911 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 17:59:39,911 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_json>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 126, in test_interface_of_json\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 登录失败,success不为true\n')])
2017-01-15 17:59:39,911 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 17:59:39,911 main.py[line: 115] INFO: 运行指定项目
2017-01-15 17:59:40,200 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 17:59:40,200 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 17:59:40,202 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 17:59:40,203 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 17:59:40,380 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 17:59:40,508 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 17:59:40,508 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 17:59:40,657 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['120', '76', '88', '98', '93', '126', '102', '110', '80', '106', '114'])
2017-01-15 17:59:40,795 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n<p>\n\tulr中的40758966216286146560取自base_info.serial字段</p>\n', 'full_tc_external_id': 'wecharno-11', 'name': 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '120', 'preconditions': '', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '11', 'testsuite_id': '109', 'node_order': '3', 'active': '0', 'modification_ts': '2016-07-29 18:31:36', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-26 12:12:10', 'status': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;success&quot;:1,&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CMOrder&quot;,<br />\n\t&quot;function&quot;:&quot;test_create_mall_order&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;params&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:2,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'id': '122'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;button_name&quot;:&quot;确认支付&quot;, &quot;page_title&quot;:&quot;储值卡&quot;}</p>\n', 'step_number': '2', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;Pay5&quot;,<br />\n\t&quot;function&quot;:&quot;test_pay5&quot;,<br />\n\t&quot;method&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '123'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;getByWeixin&quot;: 0, &quot;codeType&quot;: 2, &quot;title&quot;: &quot;动态校验&quot;, &quot;subTitle&quot;: &quot;动态校验&quot;, &quot;notice&quot;: &quot;动态校验&quot;, &quot;description&quot;: &quot;动态校验&quot;,&quot;useLimit&quot;:&quot;动态校验&quot;,&nbsp; &quot;dateInfoType&quot;: &quot;动态校验&quot;, &quot;cardType&quot;: 1,&quot;listing&quot;: 1, &quot;fitAll&quot;: 1,&quot;detailTxt&quot;: &quot;动态校验&quot;,&quot;servicePhone&quot;:&quot;动态校验&quot;,&quot;cashLeastCost&quot;: &quot;动态校验&quot;,&quot;cashReduceCost&quot;: &quot;动态校验&quot;,&quot;discount&quot;: 0,&quot;channel&quot;: -1,&quot;branchId&quot;: -1,&quot;success&quot;: 1, &quot;skuQuantity&quot;:&quot;动态校验&quot;,&quot;output_arg1&quot;:&quot;GetInCoupon.card_code&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;GetInCoupon&quot;,<br />\n\t&quot;function&quot;:&quot;test_get_in_coupon&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;params&quot;:&quot;&quot;<br />\n\t}</p>\n', 'id': '124'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;,&quot;coupon_weixin_verification_record&quot;:1}</p>\n', 'step_number': '4', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_with_cash_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:&quot;[GetInCoupon.card_code]&quot;,&quot;yhCardType&quot;:&quot;CASH&quot;}<br />\n\t}</p>\n', 'id': '129'}], 'id': '121'}]
2017-01-15 17:59:40,952 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:40,952 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 120, 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:59:40,954 testplan.py[line: 72] INFO: 开始执行测试用例[id=120，name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]
2017-01-15 17:59:40,954 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 17:59:40,954 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:59:40,954 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 17:59:40" WHERE executed_history_id = 20170115175938 AND testcase_id = 120 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:41,098 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=120]的执行结果
2017-01-15 17:59:41,219 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '2', 'summary': '', 'full_tc_external_id': 'wecharno-1', 'name': 'test-n-显示默认页面', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '76', 'preconditions': '', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '1', 'testsuite_id': '75', 'node_order': '1000', 'active': '1', 'modification_ts': '2016-11-29 18:17:12', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-18 15:52:00', 'status': '1', 'steps': [{'execution_type': '2', 'active': '1', 'expected_results': '<p>\n\t｛&ldquo;检查&rdquo;:&ldquo;BODY&rdquo;，</p>\n<p>\n\t&ldquo;匹配规则&rdquo;：&ldquo;包含字符串&rdquo;，</p>\n<p>\n\t&ldquo;条件&rdquo;：【｛&ldquo;模式&rdquo;：&ldquo;\\&quot;currentPage\\&quot;:1&rdquo;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝，｛&ldquo;模式&rdquo;：&ldquo;\\&quot;pageStartRow\\&quot;:0&quot;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝】</p>\n<p>\n\t｝</p>\n', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/plist&quot;,<br />\n\t&quot;参数&quot;:{&quot;page_size&quot;:&quot;10&quot;,&quot;page_no&quot;:&quot;1&quot;,&quot;cateIds&quot;:&quot;&quot;,&quot;orderBy&quot;:&quot;&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;name&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'id': '78'}], 'id': '77'}]
2017-01-15 17:59:41,346 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:41,346 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 76, 'test-n-显示默认页面', '微商城-显示商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:59:41,348 testplan.py[line: 72] INFO: 开始执行测试用例[id=76，name=test-n-显示默认页面]
2017-01-15 17:59:41,348 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}
2017-01-15 17:59:41,348 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\"currentPage\":1","消息":"接口返回错误"},{"模式":"\"pageStartRow\":0","消息":"接口返回错误"}]}
2017-01-15 17:59:41,348 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:41,348 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 76, 'test-n-显示默认页面', 'plan1_of_wechatno', 'pj_wechatno', 78, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}', '{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\\"currentPage\\":1","消息":"接口返回错误"},{"模式":"\\"pageStartRow\\":0","消息":"接口返回错误"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:41,350 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:59:41,350 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:59:41,350 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:59:41,350 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('page_size', '10'), ('page_no', '1'), ('cateIds', ''), ('orderBy', ''), ('serial', '10549840601068216320'), ('name', '')])
2017-01-15 17:59:41,350 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:59:41,351 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:59:41,351 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/plist
2017-01-15 17:59:41,351 httpprotocol.py[line: 75] INFO: 参数为：b'page_size=10&page_no=1&cateIds=&orderBy=&serial=10549840601068216320&name='
2017-01-15 17:59:41,351 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:59:41,596 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:59:41,596 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"dataList":[{"id":27105,"name":"微信支付测试-二级","privateSerial":null,"price":0,"oriPrice":0,"description":"微信支付测试-二级","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/30/b9e21dc4-6cf2-4923-9ec7-4259ecea09c1.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":39,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27090,"name":"测试1222-3","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ea123913-89df-4384-929e-158617f67cbe.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":60,"standardLowPrice":980.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27072,"name":"二级规格1129-2","privateSerial":null,"price":0,"oriPrice":0,"description":"二级规格1129-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/29/9ecf031d-e9bd-427e-b147-cb4a1f8fe5d3.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":25,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27087,"name":"1221-1","privateSerial":null,"price":0,"oriPrice":0,"description":"1221-1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/21/1e844fc5-ee37-4393-97af-2a220971ef1f.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":48,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27040,"name":"一级变三级（改bug前）","privateSerial":null,"price":0,"oriPrice":0,"description":"一级规格1109-2一级规格1109-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/09/23b306d5-384d-4b3b-a4f7-a757d9fc0635.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":135,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27088,"name":"测试1222","privateSerial":null,"price":8,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ca612435-f6e1-4f0d-bc18-61e558e8f720.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":2341,"istop":0,"soldCount":4,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":7,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27089,"name":"测试1222-2","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/37bc7e08-1a2f-4c88-9542-ec5613686d7e.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":26,"standardLowPrice":2100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26955,"name":"乐视超级电视","privateSerial":null,"price":0,"oriPrice":0,"description":"乐视超级电视","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/10/31/3d3ca77e-d010-42f3-804f-bc8a563ec753.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":88,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26971,"name":"多级规格测试010","privateSerial":null,"price":0,"oriPrice":0,"description":"多级规格测试010","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/01/fface01c-5d06-400e-bf7b-2ae2fd64c858.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":15,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27057,"name":"裙子","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/13dbced7-faae-4e13-aebe-6f69d72dc7e0.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":101,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false}],"pageInfo":{"pageSize":10,"currentPage":1,"totalPages":5,"totalRows":47,"pageStartRow":0,"pageEndRow":10,"pagination":true,"hasNextPage":true,"hasPreviousPage":false,"params":null,"needCount":true}}
2017-01-15 17:59:41,601 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:59:39 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:59:41,601 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:59:41,601 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2017-01-15 17:59:41,601 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2017-01-15 17:59:41,602 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:59:41,602 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:59:41,602 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2017-01-15 17:59:41",step_action="{'\u65b9\u6cd5': 'post', 'url': '/goods/plist', '\u53c2\u6570': {'page_size': '10', 'page_no': '1', 'cateIds': '', 'orderBy': '', 'serial': '10549840601068216320', 'name': ''}}", expected_results="{'检查': 'BODY', '匹配规则': '包含字符串', '条件': [{'消息': '接口返回错误', '模式': ''currentPage':1'}, {'消息': '接口返回错误', '模式': ''pageStartRow':0'}]}" WHERE executed_history_id = 20170115175938 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:41,604 testcase.py[line: 162] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2017-01-15 17:59:41,604 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:59:41,604 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Pass', '')", runtime="2017-01-15 17:59:41" WHERE executed_history_id = 20170115175938 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:41,732 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2017-01-15 17:59:41,876 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'summary': '', 'full_tc_external_id': 'wecharno-4', 'name': 'test-n-把商品加入购物车', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '88', 'preconditions': '', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '4', 'testsuite_id': '87', 'node_order': '1000', 'active': '1', 'modification_ts': '2017-01-15 17:46:37', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-20 12:07:40', 'status': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '175'}, {'execution_type': '1', 'active': '1', 'expected_results': '', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '174'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'id': '90'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'step_number': '4', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'id': '176'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '5', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '177'}], 'id': '89'}]
2017-01-15 17:59:42,035 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:42,035 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:59:42,036 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 17:59:42,037 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 17:59:42,037 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 17:59:42,037 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:42,037 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:42,038 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:59:42,038 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:59:42,039 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 17:59:42,039 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 17:59:42,042 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 17:59:42,042 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 17:59:42,043 testcase.py[line: 115] ERROR: 步骤[1]执行出错,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 17:59:42,043 testcase.py[line: 122] INFO: 正在更新步骤执行结果
2017-01-15 17:59:42,043 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="CaseStep", protocol_method="无", runtime="2017-01-15 17:59:42",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial1=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'检查': 'body', '输出': {'customer_id': 1}}" WHERE executed_history_id = 20170115175938 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:42,046 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:59:42,046 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Error', [('CaseStep', ProgrammingError(1054, "1054 (42S22): Unknown column 'channel_serial1' in 'where clause'", '42S22'))])", runtime="2017-01-15 17:59:42" WHERE executed_history_id = 20170115175938 AND testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:42,047 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1054 (42S22): Unknown column 'channel_serial1' in 'where clause'", '42S22'))])",' at line 1
2017-01-15 17:59:42,198 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=88]的执行结果
2017-01-15 17:59:42,340 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'summary': '', 'full_tc_external_id': 'wecharno-6', 'name': 'test-n-查看购物车商品列表', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '98', 'preconditions': '', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '6', 'testsuite_id': '97', 'node_order': '1000', 'active': '1', 'modification_ts': '2016-11-29 18:13:45', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-20 15:50:42', 'status': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;code&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;200&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '101'}], 'id': '99'}]
2017-01-15 17:59:42,456 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:42,456 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 98, 'test-n-查看购物车商品列表', '微商城-查看购物车商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:59:42,458 testplan.py[line: 72] INFO: 开始执行测试用例[id=98，name=test-n-查看购物车商品列表]
2017-01-15 17:59:42,458 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2017-01-15 17:59:42,458 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}
2017-01-15 17:59:42,458 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:42,458 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 98, 'test-n-查看购物车商品列表', 'plan1_of_wechatno', 'pj_wechatno', 101, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:42,459 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:59:42,459 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:59:42,459 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:59:42,460 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:59:42,460 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 17:59:42,460 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:59:42,460 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:59:42,460 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2017-01-15 17:59:42,460 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:59:42,479 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:59:42,480 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"code":"4000","message":"Server Error"}
2017-01-15 17:59:42,480 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:59:40 GMT'), ('Content-Type', 'application/json;charset=ISO-8859-1'), ('Content-Length', '56'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:59:42,480 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:59:42,480 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：200
2017-01-15 17:59:42,480 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:59:42,480 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:59:42,481 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:59:42",step_action="{'\u65b9\u6cd5': 'get', 'url': '/cartlist?', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'检查': 'code', '匹配规则': '包含字符串', '条件': [{'消息': '把商品移出购物车中失败', '模式': '200'}]}" WHERE executed_history_id = 20170115175938 AND testcase_id = 98 AND step_id = 101 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:42,482 testcase.py[line: 162] INFO: 测试用例[id=98, name=test-n-查看购物车商品列表]执行成功
2017-01-15 17:59:42,482 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:59:42,483 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Pass', '')", runtime="2017-01-15 17:59:42" WHERE executed_history_id = 20170115175938 AND testcase_id = 98 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:42,608 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=98]的执行结果
2017-01-15 17:59:42,754 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'summary': '', 'full_tc_external_id': 'wecharno-5', 'name': 'test-n-把商品移出购物车', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '93', 'preconditions': '', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '5', 'testsuite_id': '91', 'node_order': '1000', 'active': '1', 'modification_ts': '2016-11-29 18:05:21', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-20 12:25:46', 'status': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,</p>\n<p>\n\t&quot;用例id&quot;:88,</p>\n<p>\n\t&quot;用例名称&quot;:&quot;test-n-把商品加入购物车&quot;<br />\n\t}</p>\n<p>\n\t&nbsp;</p>\n', 'id': '95'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品移出购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cart/delfromcart?&quot;,<br />\n\t&quot;参数&quot;:{&quot;strIds&quot;:&quot;[CaseStep.strIds]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '96'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;[]&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '178'}], 'id': '94'}]
2017-01-15 17:59:42,903 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:42,903 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 93, 'test-n-把商品移出购物车', '微商城-把商品移出购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:59:42,904 testplan.py[line: 72] INFO: 开始执行测试用例[id=93，name=test-n-把商品移出购物车]
2017-01-15 17:59:42,904 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} 
2017-01-15 17:59:42,904 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:59:42,904 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:42,905 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 95, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} ', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:42,906 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:59:43,069 global_function.py[line: 19] INFO: 获取测试用例信息 [{'execution_type': '1', 'summary': '', 'full_tc_external_id': 'wecharno-4', 'name': 'test-n-把商品加入购物车', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '88', 'preconditions': '', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '4', 'testsuite_id': '87', 'node_order': '1000', 'active': '1', 'modification_ts': '2017-01-15 17:46:37', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-20 12:07:40', 'status': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '175'}, {'execution_type': '1', 'active': '1', 'expected_results': '', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '174'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'id': '90'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'step_number': '4', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'id': '176'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '5', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '177'}], 'id': '89'}]
2017-01-15 17:59:43,200 global_function.py[line: 39] INFO: 正在读取套件[id=87]的协议，host，端口配置...
2017-01-15 17:59:43,424 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:43,424 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 88, 'test-n-把商品加入购物车', '把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:59:43,425 global_function.py[line: 71] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 17:59:43,425 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 17:59:43,426 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 17:59:43,426 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:43,426 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:43,427 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:59:43,427 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:59:43,427 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 17:59:43,427 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 17:59:43,431 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 17:59:43,431 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 17:59:43,432 testcase.py[line: 115] ERROR: 步骤[1]执行出错,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 17:59:43,432 testcase.py[line: 122] INFO: 正在更新步骤执行结果
2017-01-15 17:59:43,432 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="CaseStep", protocol_method="无", runtime="2017-01-15 17:59:43",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial1=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'检查': 'body', '输出': {'customer_id': 1}}" WHERE executed_history_id = 20170115175938 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:43,433 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:59:43,434 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 17:59:43" WHERE executed_history_id = 20170115175938 and testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:43,435 global_function.py[line: 82] INFO: 指定用例[88]已执行完
2017-01-15 17:59:43,435 testcase.py[line: 115] ERROR: 步骤[1]执行出错,停止执行用例[id=93, name=test-n-把商品移出购物车]
2017-01-15 17:59:43,435 testcase.py[line: 122] INFO: 正在更新步骤执行结果
2017-01-15 17:59:43,435 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="CaseStep", protocol_method="无", runtime="2017-01-15 17:59:42",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 88, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u628a\u5546\u54c1\u52a0\u5165\u8d2d\u7269\u8f66'}", expected_results="" WHERE executed_history_id = 20170115175938 AND testcase_id = 93 AND step_id = 95 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:43,437 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:59:43,437 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Error', [('CaseStep', ProgrammingError(1054, "1054 (42S22): Unknown column 'channel_serial1' in 'where clause'", '42S22'))])", runtime="2017-01-15 17:59:42" WHERE executed_history_id = 20170115175938 AND testcase_id = 93 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:43,438 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1054 (42S22): Unknown column 'channel_serial1' in 'where clause'", '42S22'))])",' at line 1
2017-01-15 17:59:43,550 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=93]的执行结果
2017-01-15 17:59:43,679 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'full_tc_external_id': 'wecharno-12', 'name': 'test-n-免费领取优惠券', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '126', 'preconditions': '', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '12', 'testsuite_id': '125', 'node_order': '1000', 'active': '1', 'modification_ts': '2016-11-29 19:43:22', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-26 15:06:38', 'status': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '181'}, {'execution_type': '1', 'active': '1', 'expected_results': '', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '180'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n', 'id': '128'}], 'id': '127'}]
2017-01-15 17:59:43,827 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:43,828 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:59:43,829 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 17:59:43,830 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 17:59:43,830 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:59:43,830 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:59:43,830 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:59:43,830 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 17:59:43,836 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:59:43,836 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:59:43",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115175938 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:43,839 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 17:59:43,839 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:59:43,839 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:43,839 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:43,840 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 17:59:43,841 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:59:43,841 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 17:59:43,846 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:59:43,847 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 17:59:43",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115175938 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:43,849 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 17:59:43,849 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 17:59:43,849 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:43,850 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:43,851 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 17:59:43,851 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:59:43,851 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 17:59:43" WHERE executed_history_id = 20170115175938 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:44,001 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 17:59:44,281 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'summary': '', 'full_tc_external_id': 'wecharno-7', 'name': 'test-n-点击立即购买按钮', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '102', 'preconditions': '', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '7', 'testsuite_id': '79', 'node_order': '1001', 'active': '1', 'modification_ts': '2016-11-29 18:14:53', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-20 16:48:26', 'status': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;到店支付&quot;,&quot;消息&quot;:&quot;无法打开商品详情&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/mall/tobuy/1?&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:&quot;26838&quot;,&quot;amount&quot;:1,&quot;type&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '104'}], 'id': '103'}]
2017-01-15 17:59:44,417 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:44,417 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 102, 'test-n-点击立即购买按钮', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:59:44,419 testplan.py[line: 72] INFO: 开始执行测试用例[id=102，name=test-n-点击立即购买按钮]
2017-01-15 17:59:44,420 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}
2017-01-15 17:59:44,420 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}
2017-01-15 17:59:44,420 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:44,420 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 102, 'test-n-点击立即购买按钮', 'plan1_of_wechatno', 'pj_wechatno', 104, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:44,421 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:59:44,421 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:59:44,422 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:59:44,422 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', '26838'), ('amount', 1), ('type', 1), ('serial', '10549840601068216320')])
2017-01-15 17:59:44,422 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:59:44,422 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:59:44,422 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/mall/tobuy/1?mallGoodsId=26838&amount=1&type=1&serial=10549840601068216320
2017-01-15 17:59:44,422 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:59:44,819 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:59:44,820 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 
	 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta http-equiv="Expires" CONTENT="0">
<meta http-equiv="Cache-Control" CONTENT="no-cache">
<meta http-equiv="Pragma" CONTENT="no-cache">
<title>微商城</title>
<link rel="stylesheet" href="/css/mall/pure.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/grids-core.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/zepto.alert.css?v=5.0.0-faae2">

<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.ios7.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.animation.css?v=5.0.0-faae2">
</head>
<style type="text/css">
* {
	margin: 0;
	padding: 0;
}

html {
	color: #626262;
	overflow-y: auto;
	overflow-x: hidden;
}

body {
	margin-bottom: 20px;
	overflow-y: auto;
	overflow-x: hidden;
}

a {
	text-decoration: none;
}

ol,ul {
	list-style: outside none none;
}

.left {
	float: left;
}

.right {
	float: right;
}

.in-block {
	display: inline-block;
}

.orange {
	color: #c58d04;
}

.grey {
	color: #adadad;
}

.bg-color {
	background: #ececec;
}

#wrapper {
	width: 100%;
	margin: 0 auto;
}

.header {
	width: 100%;
}

.header ul {
	position:relative;
	overflow: hidden;
}

.header ul li {
	width: 50%;
	float: left;
	height: 2.8em;
	line-height: 2.8em;
	background: #fff;
	text-align: center;
	border-bottom:1px solid #f38b44;
	-moz-box-sizing:border-box; /* Firefox */
     -webkit-box-sizing:border-box; /* Safari */
     box-sizing:border-box;
}
.header ul .lines{
	position: absolute;
	width: 1%;
	height: 2.8em;
	line-height: 2.8em;
	border-right: 1px solid #FDE5D4;
	left: 49%;
	top: -1px;
 } 
.header ul li a {
	color: #8b898a;
}

.tab_content>div {
	height: auto;
	font-size: 0.8em;
	margin: 0.5em 0;
}

.empty-p {
	width: 80%;
	float: left;
	padding: 0.5em 0;
}

.has-p {
    width: 100%;
    margin: 0 auto;
    padding: 0 1em;
    height: auto;
    line-height: 2.5em;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -webkit-box-sizing: -webkit-border-box;
}
.has-p-one{
    background: url(/images/mall/contact.png) no-repeat left center;
    background-size: 12px 12px;
}
.has-p-two{
    background: url(/images/mall/take.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.has-p-three{
    background: url(/images/mall/time.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.input-right{
    position: relative;
}
.input-right-img{
    width: 1em;
    position: absolute;
    right: 0.6em;
    top: 0.3em;
}
#scheduledTime{
    width:11em;
    height: 2em;
    border:1px solid #a0a0a0;
    border-radius:4px;
    color:#a0a0a0;
    text-indent:.5em
}
.hiddens-p{
    text-overflow:ellipsis; 
    overflow:hidden; 
    white-space:nowrap;  
}

.right-dashed {
	border-left: 1px solid #eee;
	margin-top: 1em;
	padding-bottom:1em;
}

#edit {
	padding: 1em 0 1em 2em;
    width: 10px;
}

.header ul li.active{
    border-bottom: 4px solid #f38b44;
}
.header ul li.active a{
    color: #f38b44!important;
}
.buy_title{
	background:#f3f3f3;
	padding:0.3em 1em;
	margin: 0;
}
.content {
	width: 100%;
	background: #fff;
	overflow: hidden;	
	padding-bottom:8%;
}

.selectList {
	border-bottom: 1px solid #efefef;
	margin: 0 auto;
	overflow: hidden;
	padding: 0.5em 1em;
	font-size: 0.8em;
	clear:both;
}

.selectList img {
    display: inline-block;
    float: left;
    width: 25%;
    border-radius: 4px;
    -webkit-border-radius: 4px;
}

.button {
	display:block;	
	width: 99%;	
	height: 3em;
	color: #fff;
	border: none;
	border-radius: 4px;
	margin:0 auto 0.5em auto;
}

.addbtn {
	background: #33CC66;
}

.btn-wrap-5 {
	padding: 0 1em;
}
.buybtn {
	width: 100%;
	background: #f68d3c;
}

.footer {
	width: 100%;
	background: #fff;
	color: #b6b6b6;
	overflow: hidden;
	text-align: left;
	margin-bottom: 1em;
}

.all-end-button {
	width: 90%;
	margin: 1em auto 0.5em;
}

.all-end-button p:first-child {
	text-align: left;
}

.error-page{
	background: #ddd;
    padding-bottom: 2em;
}
.error-page img{
    margin:0 auto;
	padding-top: 2em;
}
.error-page p{
    text-align:center;
    color:#000;
    width:80%;
    margin:1em auto 2em;
}
#deliverFee{
	text-align:left;
	font-size:0.8em;
	color:#acb0af;
}
.order-div{
    margin-left: 26.8%;            
    position: relative;
}
.order-div>p:last-child{
    width: 100%;
    margin: 0;
    position: absolute;
    bottom: 0;
    left: 0;
}
.m-t-n{
    margin-top: 0;
}
.m-t-n>span{
    display: inline-block;
}
.m-t-n>span:first-child{
    width: 70%;
}
.m-t-n>span:last-child{
    width: 30%;
}
.mtn-span{
    float: right;
}
.t-r-span{
	text-align:right;
}
.ccc{
    color: #ccc;
}
.peisong{
    text-align: right;
    margin-bottom: 0;
    padding-right: 1em;
    padding-top: 0.4em;
}
.peisong-detail{
    color:#000;
}
.peisong-detail input{
    border: none;
}
.peisong-detail div>p{
    padding-left: 1.8em;
    padding-top: 0.8em;
    padding-bottom: 0.8em;
    margin: 0;
    clear:both;
}

.weipay{            
    background: url(/images/weixin2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}        
.peisong-detail div>p.pay{
    background: url(/images/money2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.cardpay{
    background: url(/images/cardpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.mdpay{
    background: url(/images/mdpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}

.peisong-detail div[class^="btn-wrap-"] {
	border-bottom: 1px solid #dadada;
	padding: 0 1em;
	height: 3em;
	position: relative;
}

.weipay,.pay,.mdpay,.cardpay{
    position: relative;
}
 .weipay>img,.mdpay>img,.pay>img,.cardpay>img,.zhifu input{
    width: 1.2em;
    height: 1.2em;
    position: absolute;
    right: 0;
    top: 50%;
    transform:translateY(-50%);
}

.pure-img-check {
	background: url(/images/weixuan2.png) no-repeat left center;
    background-size:1.05em 1.05em; 
    float: right;
    height: 1.05em;
    width: 1.05em;
}

.zhifu input{
    display: none;
}
#deliverFeeDiv, #FetchDiv {
	border-bottom: 1px solid #efefef;
    padding: 0.5em 1em;
}
#deliverFeeDiv p, #FetchDiv p{
	text-align:right;
}

#remark {
	padding: 0.5em 1em;
	height: 4em;
	font-size: 1.0em;
}

.tab-adress {
	position: relative;
}
.icon-wrap {
	/*float: right;*/
	position: absolute;
	top: 11px;
	right: 10px;
}
.icon-wrap-spe {
	top: 0;
}

/*toast提示*/
.toastBlock {
    display: none; 
    position: fixed;
    bottom: 50%;
    width: 100%;
    text-align: center;
    transition: opacity 1s ease-out;
    z-index: 19;
}
.toastBlock .toastContent {
    display: inline-block;
    padding: 18px;
    border-radius: 5px;
    font-size: 14px;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.7);
}
</style>
<body>
	<div id="wrapper">
		
			
			
			
				
					
					
						
						
						
						
						
					
					
				
				
			
			<div class="header">
				
					<ul class="tab">
						<li class='active' data='#deliverFeeDiv'><a href="#tab1">快递发货</a></li>						
						<li class=''><a href="#tab2">到店自提</a></li>
						<span class="lines"></span>
					</ul>
				
			</div>
			<p class="buy_title"></p>
			
			<div class="tab_container">
				<div id="tab1" class="tab_content pure-g" style="">
					<div class="pure-u-24-24 tab-adress j-tab-adress">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">17817738178<span>(17817738178)</span></span>
								</div>
								<div class="has-p">
									<span>配送地址：</span>
									<span class="pure-u-3-5">天津市县宁河县详细</span>
                                </div>

                                <span class="icon-wrap">
                                	
                                		
                                		
                                		<a class="url_adress" href="/toaddr/1?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
                                		</a>
                                		
                                	
                                </span>
							
							
						
					</div>
				</div>
				<div id="tab2" class="tab_content pure-g" style="display:none">
					<div class="pure-u-24-24">
						
							
								<div class="tab-adress j-tab-adress">
									<div class="has-p">
										<span>联系方式：</span>
										<span class="pure-u-3-5">452<span>(17817738178)</span></span>
									</div>
	                                <div class="has-p">
	                                	<span>门&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;店：</span>
	                                	<span class="pure-u-3-5">
	                                		广东省深圳市福田区
		                                	
		                                		Biu
		                                	
	                                	</span>
	                                </div>
	                                <span class="icon-wrap">
	                                	
	                                		
	                                		
	                                		<a class="url_adress" href="/toaddr/2?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
	                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
	                                		</a>
	                                		
	                                	
	                                </span>
                                </div>
                               	<div class="has-p">
                               		<span>到店时间：</span>
                               		<span class="input-right">
                               			<input type="text" id="scheduledTime" name="scheduledTime" class="text" placeholder="请选择"/><img src="/images/mall/input-right.png?v=5.0.0-faae2" class="input-right-img">
                               		</span>
                               	</div>
							
							
						
					</div>
				</div>
			</div>
			<p class="buy_title"></p>
			
			<div class="content">
				
					
						
							<div class="selectList">
								<img src="http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg"> 
								
									
									
										<div class="order-div">
											<p class="m-t-n"><span>接口-测试商品1</span><span class="mtn-span t-r-span">￥0.01</span></p>
											<p><span class="ccc mtn-span">X1</span></p>
                                        </div>	
									
								
							</div>
						
					
					
					
				
				<div id="deliverFeeDiv">
					 
						
						
							<p id="deliverFee">含运费：￥0.01</p>
							<p class="orange">合计：￥0.02</p>
						
					 
				</div>
				<div id="FetchDiv" style="display: none;">
					<p class="orange">合计：￥0.01</p>
				</div>
				<div id="remark">
					<span class="beizhu" style="float:left">备注：</span>
                   	<span class="beizhulan">
                   		<textarea rows="3" placeholder="可于此处给卖家留言备注" style="border:0;width: 85%;"></textarea>
                   	</span>
				</div>
			</div>
			<p class="buy_title"></p>
			<div class="footer">
				<div class="peisong-detail zhifu">
                	
                        <div class="btn-wrap-1">
                         	<p class="weipay">微信支付<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="1"/>
                         	</p>
                        </div>
                    
                  	
                  	
                        <div class="btn-wrap-2" style="">
                         	<p class="pay">货到付款<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="3"/>
                         	</p>
                        </div>
                   	
		
                    
                        <div class="btn-wrap-3" style="display:none">
                        	<p class="mdpay">到店支付<span class="pure-img-check"></span>
                        		<input type="radio" name="zhifu" value="2"/>
                        	</p>
                        </div>
                   	
                   	
                   	
                        <div class="btn-wrap-4">
                       		<p class="cardpay">储值卡支付<span class="pure-img-check"></span>
                       			<input type="radio" name="zhifu" value="4"/>
                       		</p>
                        </div>
                   	
                </div>
			</div>
			<div class="btn-wrap-5">
				<input type="button" class="button buybtn submit" value="确认提交" />
			</div>

			<div id="toastId" class="toastBlock">
			    <span class="toastContent"></span>
			</div>
			
		
	</div>
	<script type="text/javascript" src="/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/touch.js?v=5.0.0-faae2"></script>
    
	<script type="text/javascript" src="/js/mall/zepto.alert.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mall.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.zepto.js?v=5.0.0-faae2" ></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.core.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.scroller.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.datetime.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.i18n.zh.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			$("input[name='zhifu']:checked").prev('.pure-img').attr('src','/images/check.png');
			var tab = parseInt("1");
			/* if(tab == 1){
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else if (tab == 0){
			    $("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} else if(parseInt("1") != 0){
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} */
			
			if ("true" == "true" && 1 == 1) {
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else {
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			}
			
			// 控制显示图片比例
			var img_left_heights = $(".selectList img").width()*(0.75);
			$(".selectList img,.order-div").css('height',img_left_heights);
			
			// 取货日期
			var now = new Date();
            $('#scheduledTime').mobiscroll().datetime({
                minDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()+1),
                maxDate: new Date(now.getFullYear(), now.getMonth()+3, now.getDate()),
                stepMinute: 30,
                dateOrder :"yymmdd",
                dateFormat:"yy-mm-dd",
                timeWheels:"HHii",
                timeFormat:"HH:ii",
                //invalid: [{ start: '00:00', end: '08:00' },{ start: '22:00', end: '23:59' }],
                theme: 'ios7',
                lang: 'zh',
                display: 'bottom',
                mode: 'mixed'
            });
            $('#scheduledTime').click(function(){
                $('#scheduledTime').mobiscroll('show'); 
                return false;
            });
            
			$("ul li").click(function() {
				$("ul li").removeClass("active");
				$(this).addClass("active");
				if($(this).attr("data")=="#deliverFeeDiv"){
					$("#deliverFeeDiv").show();
					$("#FetchDiv").hide();
				}else{
					$("#deliverFeeDiv").hide();
					$("#FetchDiv").show();
				}
				$(".tab_content").hide();
				var href = $(this).find("a").attr("href");
				$(href).show();
				
				if(href.endWith("tab1")) {
					$(".btn-wrap-2").show();
					$(".btn-wrap-3").hide();
				} else if(href.endWith("tab2")) {
					$(".btn-wrap-2").hide();
					$(".btn-wrap-3").show();
				}
				//清空已选择的支付方式
				$("input[name='zhifu']").prop("checked", false);
				$(".zhifu .pure-img-check").css('background-image','url(/images/weixuan2.png)');
				return false;
			});
			//商户设置的满额包邮价
			/* var noDeliverFee = toPrice(parseFloat("200")/100);
			var totalFee = parseFloat("0.01");
			if(totalFee > noDeliverFee){
				$("#deliverFeeDiv .orange").text("合计：￥"+ totalFee);
				$("#deliverFee").text("含运费：￥0.00");
			} */
			$('.zhifu>div').click(function(){
	            $("input[name=zhifu]").prop("checked", false);
	            $(".pure-img-check").css('backgroundImage','url(/images/weixuan2.png)');
	            var img_obj = $(this).find('.pure-img-check');
	            var backgroundImage = img_obj.css('background-image');
	            var input_obj = $(this).find('input');
	            if(backgroundImage.indexOf("weixuan2.png") > 0){
	                img_obj.css('background-image','url(/images/check.png)');
	                input_obj.prop("checked", "checked");
	            }else{
	                img_obj.css('background-image','url(/images/weixuan2.png)');
	                input_obj.prop("checked", false);
	            }
	        });


	        $(".j-tab-adress").click(function(event) {
	        	var _url = $(this).find('.url_adress').prop("href");

	        	window.location.href = _url;
	        });
		});
		
		function validateRemark(){
			var text = filtEmoji($('.beizhulan textarea').val());
			if(text != "" && text != undefined){
				if(text.length>30){
					$.dialog({
                        widths : '80%',
                        content : '您输入的备注过长，请不要超过30个字',
                        title : 'no',
                        fullok : function() {
                            return true;
                        },                       
                        lock : true
                    });	
					return false;
				}
				return true;
			}
			return true;
		}
		function filtEmoji (str) {
			return unescape(escape(str).replace(/\%uD.{3}/g, ''));
		}
		
		$(".submit").click(function(event){
			var payType = $("input[name='zhifu']:checked").val();
			if(null == payType || "" == payType || typeof(payType) == "undefined") {
       		 $.dialog({
                    widths : '80%',
                    content : '请选择支付方式',
                    title : 'no',
                    fullok : function() {
                        return true;
                    },                       
                    lock : true
                });
       			return;
       		}
			$.dialog({
                content : "确认提交订单？",
                title : "no",
                okText: '取消',
                cancelText : '确定', 
                ok : function() {
                	$(".ft-right").removeAttr("disabled");
                	return;
                },
                cancel : function() {                        	
               		
               		if(payType == 1){
               			if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				doAlert("no", "无效物流方式");
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@10cdc6eb";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/1", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "id=" + result.attach;
            	    			strParams += "&serial=10549840601068216320";
            	    			if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
            	        	});
            			}
               		}
               		
    				if(payType == 2){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@10cdc6eb";
    					if(shopBranch == "") {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					var _fetchTime = $("#scheduledTime").val();
    					if(null == _fetchTime || "" == _fetchTime) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请选择取货时间',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						
    						var _remark = filtEmoji($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							fetchTime : _fetchTime,
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/2/2", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 3){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑收货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });

    						var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
    						// var _remark = encodeURI($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/1/3", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 4){
    					if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				$.dialog({
        	                    widths : '80%',
        	                    content : '无效物流方式',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@10cdc6eb";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
            			// var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/4", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "?orderId=" + result.attach;
            					if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            					strParams += "&serial=10549840601068216320";
                				window.location.href = "/pay/5"+strParams;
            	        	});
            			}
            			
    				}
    				
                },
                lock : true
            });
		});
		
		//微信支付
		/* $(".payUseWX").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			var type = 0;
			$(".tab_content").each(function(){
				if($(this).css("display") != "none") {
					var attrId = $(this).attr("id");
					if(attrId == "tab1") {
						type = 1;//快递取货
					} else if(attrId == "tab2") {
						type = 2;//门店自提
					}
				}
			});
			if(type <= 0) {
				doAlert("no", "无效物流方式");
				return;
			}
			if(type == 1) {
				if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑收货地址");
					return;
				}
			}
			var _fetchTime = "";
			if(type == 2) {
				if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑取货地址");
					return;
				}
				_fetchTime = $("#scheduledTime").val();
				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
					doAlert("no", "请选择取货时间");
					return;
				}
				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@10cdc6eb";
				if(shopBranch == "") {
					doAlert("no", "请编辑取货地址");
					return;
				}
			}
			
			var _remark = encodeURI($(".beizhulan").find("textarea").val());
			var params = {
				serial : "10549840601068216320",
				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
				fm : "1",
				mallGoodsId : "26838",
				amount : "1",
				cartIds : "",
				fetchTime : _fetchTime,
				remark : _remark
			};
			if(parseInt("1") == 1 && parseInt("1") == 2){
				var standardId = "";
				if(standardId != null && standardId != undefined){
					params.standardId = standardId;
				}
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				$.post("/cmorder/" + type+ "/1", params, function(result){
					dialog.close();
					
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					
					var strParams = "id=" + result.attach;
	    			strParams += "&serial=10549840601068216320";
	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
	        	});
			}
		}); */
		//货到付款
		/* $(".payAfrecv").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑收货地址");
				return;
			}
			
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				var _remark = encodeURI($(".beizhulan").find("textarea").val());
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/1/3", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
	        	});
			}
		}); */
		//到店支付
		// $(".payInshop").click(function(event) {
			/* if($(this).prop("disabled") == true)
        		return false;
			
			var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@10cdc6eb";
			if(shopBranch == "") {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			var _fetchTime = $("#scheduledTime").val();
			if(null == _fetchTime || "" == _fetchTime) {
				doAlert("no", "请选择取货时间");
				return;
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				
				var _remark = $(".beizhulan").find("textarea").val();
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					fetchTime : _fetchTime,
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/2/2", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
	        	});
			} */
		// });
	
		// toast提示
		var toastTime=null;
		var displayTime=null;

		function setToast(html) {
		    if (toastTime != null) {
		        clearTimeout(toastTime);
		        clearTimeout(displayTime);
		    }
		    // $('toastId').style.display = 'block';
		    // $('toastId').style.opacity = 1;
		    $('#toastId').css({
		        display: 'block',
		        opacity: 1
		    });
		    $('#toastId .toastContent').text(html);

		    toastTime = setTimeout(function() {
		        // $('toastId').style.opacity = 0;
		        $('#toastId').css("opacity", 0);
		        displayTime = setTimeout(function() {
		            // $('toastId').style.display='none';
		            $('#toastId').css("display", "none");
		        }, 1000);
		    }, 1000);
		}

		function toastDisplay(str) {
		    setToast(str);
		}
	</script>
</body>
</html>
<!--加入判断用户是否关注公众号功能 add by lipengfei at 2015-11-9  -->
  	
	<script type="text/javascript" src="/js/bind/banner.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			//var SHOP_SERIAL = getCookie("SHOP_SERIAL");
			var SHOP_SERIAL = "10549840601068216320";
			if(null != SHOP_SERIAL && SHOP_SERIAL != ""){
				$.ajax({
					url : '/saofu_mobile/checkUserBindStatus',
					data : {
						"serial" : SHOP_SERIAL
					},
					type : 'post',
					cache : false,
					dataType : 'json',
					success : function(data) {
						if (data != null) {
							var guildFocusStr = data.guildFocusStr;
							if(guildFocusStr != null && guildFocusStr == "1"){
								var hasBindedShop = data.hasBindedShop;
								if(hasBindedShop == "0"){
									var qrName = data.QRPublicName;
									var qrUrl = data.QRCodeURL;
									if(qrName != "" && qrUrl != ""){
										var params = qrName+"**"+qrUrl;
										followModule(params);
									}
								}
							}
						} 
					},
					error : function() {
					}
				});
			}
		});
				
	</script>

2017-01-15 17:59:44,824 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:59:42 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=0176D3F5E1CD6EE76DEF0FA9DBEA5210; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 17:59:44,824 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:59:44,824 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：到店支付
2017-01-15 17:59:44,824 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:59:44,824 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:59:44,824 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:59:44",step_action="{'\u65b9\u6cd5': 'get', 'url': '/mall/tobuy/1?', '\u53c2\u6570': {'mallGoodsId': '26838', 'amount': 1, 'type': 1, 'serial': '10549840601068216320'}}", expected_results="{'检查': 'body', '匹配规则': '包含字符串', '条件': [{'消息': '无法打开商品详情', '模式': '到店支付'}]}" WHERE executed_history_id = 20170115175938 AND testcase_id = 102 AND step_id = 104 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:44,826 testcase.py[line: 162] INFO: 测试用例[id=102, name=test-n-点击立即购买按钮]执行成功
2017-01-15 17:59:44,826 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:59:44,827 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Pass', '')", runtime="2017-01-15 17:59:44" WHERE executed_history_id = 20170115175938 AND testcase_id = 102 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:44,979 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=102]的执行结果
2017-01-15 17:59:45,132 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n', 'full_tc_external_id': 'wecharno-9', 'name': 'test-n-储值卡支付-不使用优惠，会员账户支付', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '110', 'preconditions': '', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '9', 'testsuite_id': '109', 'node_order': '2', 'active': '0', 'modification_ts': '2016-07-29 17:13:06', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-22 14:48:17', 'status': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;style&quot;:&quot;testcase&quot;,<br />\n\t<br />\n\t&quot;testcase_id&quot;:114,<br />\n\t<br />\n\t&quot;testcase_name&quot;:&quot;test-n-提交储值卡支付订单-pay5重定向&quot;<br />\n\t}</p>\n', 'id': '112'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;}</p>\n', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_without_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:-1,&quot;yhCardType&quot;:-1}<br />\n\t}</p>\n', 'id': '119'}], 'id': '111'}]
2017-01-15 17:59:45,259 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:45,259 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 110, 'test-n-储值卡支付-不使用优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:59:45,261 testplan.py[line: 72] INFO: 开始执行测试用例[id=110，name=test-n-储值卡支付-不使用优惠，会员账户支付]
2017-01-15 17:59:45,261 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-不使用优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 17:59:45,261 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:59:45,261 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 17:59:45" WHERE executed_history_id = 20170115175938 AND testcase_id = 110 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:45,381 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=110]的执行结果
2017-01-15 17:59:45,506 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'summary': '', 'full_tc_external_id': 'wecharno-2', 'name': 'test-n-点击商品', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '80', 'preconditions': '', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '2', 'testsuite_id': '79', 'node_order': '1000', 'active': '1', 'modification_ts': '2016-11-29 18:16:14', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-20 11:05:03', 'status': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '82'}], 'id': '81'}]
2017-01-15 17:59:45,618 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:45,618 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:59:45,619 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2017-01-15 17:59:45,619 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2017-01-15 17:59:45,619 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2017-01-15 17:59:45,620 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:45,620 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:45,621 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:59:45,621 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:59:45,621 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:59:45,621 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('id', 26838), ('serial', '10549840601068216320')])
2017-01-15 17:59:45,621 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:59:45,621 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 17:59:45,622 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2017-01-15 17:59:45,622 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:59:45,666 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:59:45,667 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/css/malls/detail.css?v=5.0.0-faae2">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/mall/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320",
			mallConfigSerial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script src="/common/js/request.js?v=5.0.0-faae2"></script>
	<script src="/common/js/extend-number.js?v=5.0.0-faae2"></script>
	<script src="/component/iscroll/js/iscroll.js?v=5.0.0-faae2"></script>
	<script src="/component/swiper/js/swiper.min.js?v=5.0.0-faae2"></script>
	<script src="/js/malls/detail.js?v=5.0.0-faae2"></script>
</body>
</html>
2017-01-15 17:59:45,668 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:59:43 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3983'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=8E4A693800ECD9D9F0D68AC649CE3DE8; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 17:59:45,668 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:59:45,668 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2017-01-15 17:59:45,668 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 17:59:45,669 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 17:59:45,669 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 17:59:45",step_action="{'\u65b9\u6cd5': 'get', 'url': '/goods/item?', '\u53c2\u6570': {'id': 26838, 'serial': '10549840601068216320'}}", expected_results="{'检查': 'body', '匹配规则': '包含字符串', '条件': [{'消息': '点击商品时无法打开购买页面', '模式': '立即购买'}]}" WHERE executed_history_id = 20170115175938 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:45,670 testcase.py[line: 162] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2017-01-15 17:59:45,671 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:59:45,671 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Pass', '')", runtime="2017-01-15 17:59:45" WHERE executed_history_id = 20170115175938 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:45,790 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2017-01-15 17:59:45,957 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'summary': '', 'full_tc_external_id': 'wecharno-8', 'name': 'test-n-创建储值卡支付订单', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '106', 'preconditions': '', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '8', 'testsuite_id': '105', 'node_order': '1000', 'active': '1', 'modification_ts': '2016-11-29 17:33:09', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-21 11:26:32', 'status': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'id': '108'}], 'id': '107'}]
2017-01-15 17:59:46,092 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:46,092 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:59:46,094 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:59:46,095 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:59:46,095 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:59:46,095 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:46,095 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:46,097 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:59:46,097 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:59:46,097 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:59:46,097 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:59:46,097 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:59:46,097 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:59:46,098 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:59:46,098 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:59:46,098 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:59:46,098 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:59:46,098 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:59:46,140 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:59:46,141 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:59:46,141 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:59:43 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:59:46,141 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:59:46,141 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:59:46,141 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:59:46,142 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 17:59:46,142 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:59:46",step_action="{'\u8bf7\u6c42\u5934': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'检查': 'body', '输出': {'success': ''success':(.+?),', 'attach': 'attach':'(.+?)''}, '匹配规则': '包含字符串', '条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}]}" WHERE executed_history_id = 20170115175938 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:46,144 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:59:46,144 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_urlencode>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 65, in test_interface_of_urlencode\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 65, in assert_result\n    self.assertIn(pattern_str, response_to_check, item[\'消息\'])\nAssertionError: \'"success":true\' not found in \'{"success":false,"message":"系统错误","attach":null}\' : 创建储值卡支付订单失败,success不为True\n')])", runtime="2017-01-15 17:59:46" WHERE executed_history_id = 20170115175938 AND testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:46,145 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py' at line 1
2017-01-15 17:59:46,254 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=106]的执行结果
2017-01-15 17:59:46,375 testplan.py[line: 45] INFO: 获取测试用例信息 [{'execution_type': '1', 'summary': '', 'full_tc_external_id': 'wecharno-10', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '114', 'preconditions': '', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '10', 'testsuite_id': '113', 'node_order': '1000', 'active': '1', 'modification_ts': '2016-11-29 17:52:17', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-25 15:02:41', 'status': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'id': '116'}, {'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '117'}], 'id': '115'}]
2017-01-15 17:59:46,498 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:46,498 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:59:46,500 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 17:59:46,500 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 17:59:46,501 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 17:59:46,501 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:46,501 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:46,503 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:59:46,648 global_function.py[line: 19] INFO: 获取测试用例信息 [{'execution_type': '1', 'summary': '', 'full_tc_external_id': 'wecharno-8', 'name': 'test-n-创建储值卡支付订单', 'author_last_name': 'Administrator', 'author_login': 'admin', 'updater_login': 'admin', 'version': '1', 'layout': '1', 'author_first_name': 'Testlink', 'is_open': '1', 'importance': '2', 'author_id': '1', 'testcase_id': '106', 'preconditions': '', 'updater_last_name': 'Administrator', 'updater_id': '1', 'estimated_exec_duration': '', 'tc_external_id': '8', 'testsuite_id': '105', 'node_order': '1000', 'active': '1', 'modification_ts': '2016-11-29 17:33:09', 'updater_first_name': 'Testlink', 'creation_ts': '2016-07-21 11:26:32', 'status': '1', 'steps': [{'execution_type': '1', 'active': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'id': '108'}], 'id': '107'}]
2017-01-15 17:59:46,777 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 17:59:47,184 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 17:59:47,184 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 17:59:47,187 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 17:59:47,187 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 17:59:47,188 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 17:59:47,188 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 17:59:47,188 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115175938', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 17:59:47,192 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 17:59:47,192 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 17:59:47,193 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 17:59:47,193 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 17:59:47,193 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 17:59:47,193 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:59:47,193 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 17:59:47,194 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 17:59:47,194 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 17:59:47,194 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 17:59:47,194 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 17:59:47,241 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 17:59:47,241 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 17:59:47,242 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 09:59:45 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 17:59:47,242 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 17:59:47,242 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 17:59:47,243 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 17:59:47,243 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 17:59:47,243 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 17:59:47",step_action="{'\u8bf7\u6c42\u5934': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'检查': 'body', '输出': {'success': ''success':(.+?),', 'attach': 'attach':'(.+?)''}, '匹配规则': '包含字符串', '条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}]}" WHERE executed_history_id = 20170115175938 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:47,246 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 17:59:47,246 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 17:59:47" WHERE executed_history_id = 20170115175938 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:47,248 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 17:59:47,249 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=114, name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 17:59:47,249 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 17:59:47,249 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="无", runtime="2017-01-15 17:59:46",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 106, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u521b\u5efa\u50a8\u503c\u5361\u652f\u4ed8\u8ba2\u5355'}", expected_results="" WHERE executed_history_id = 20170115175938 AND testcase_id = 114 AND step_id = 116 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:47,251 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 17:59:47,251 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_urlencode>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 65, in test_interface_of_urlencode\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 65, in assert_result\n    self.assertIn(pattern_str, response_to_check, item[\'消息\'])\nAssertionError: \'"success":true\' not found in \'{"success":false,"message":"系统错误","attach":null}\' : 创建储值卡支付订单失败,success不为True\n')])", runtime="2017-01-15 17:59:46" WHERE executed_history_id = 20170115175938 AND testcase_id = 114 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 17:59:47,252 mydb.py[line: 80] ERROR: 执行数据库更新操作失败：1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py' at line 1
2017-01-15 17:59:47,406 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=114]的执行结果
2017-01-15 17:59:47,407 testplan.py[line: 97] INFO: 测试计划[project=pj_wechatno ,testplan=plan1_of_wechatno]已执行完
2017-01-15 17:59:47,407 main.py[line: 242] INFO: 接口测试已执行完成，正在关闭数据库连接
2017-01-15 17:59:47,408 htmlreporter.py[line: 37] INFO: 正在查询测试用例总数
2017-01-15 17:59:47,408 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE executed_history_id = %s  data：('20170115175938',)
2017-01-15 17:59:47,410 htmlreporter.py[line: 43] INFO: 正在查询执行通过的用例数
2017-01-15 17:59:47,410 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Pass', '20170115175938')
2017-01-15 17:59:47,411 htmlreporter.py[line: 49] INFO: 正在查询执行失败的用例数
2017-01-15 17:59:47,412 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Fail', '20170115175938')
2017-01-15 17:59:47,413 htmlreporter.py[line: 55] INFO: 正在查询执行出错的用例数
2017-01-15 17:59:47,413 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Error', '20170115175938')
2017-01-15 17:59:47,414 htmlreporter.py[line: 61] INFO: 正在查询未执行的用例数
2017-01-15 17:59:47,414 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Block', '20170115175938')
2017-01-15 17:59:47,415 htmlreporter.py[line: 87] INFO: 正在查询已运的测试计划
2017-01-15 17:59:47,415 mydb.py[line: 104] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20170115175938',)
2017-01-15 17:59:47,416 htmlreporter.py[line: 113] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]的测试用例执行结果
2017-01-15 17:59:47,417 mydb.py[line: 104] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20170115175938')
2017-01-15 17:59:47,418 htmlreporter.py[line: 120] INFO: 正在记录测试测试计划[project：pj_pos, testplan：无计划]的测试用例运行结果到测试报告
2017-01-15 17:59:47,418 htmlreporter.py[line: 113] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例执行结果
2017-01-15 17:59:47,419 mydb.py[line: 104] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20170115175938')
2017-01-15 17:59:47,420 htmlreporter.py[line: 120] INFO: 正在记录测试测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例运行结果到测试报告
2017-01-15 17:59:47,421 htmlreporter.py[line: 134] INFO: 正在查询已运的测试计划
2017-01-15 17:59:47,421 mydb.py[line: 104] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20170115175938',)
2017-01-15 17:59:47,423 htmlreporter.py[line: 146] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]已运行的测试用例
2017-01-15 17:59:47,423 mydb.py[line: 104] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20170115175938')
2017-01-15 17:59:47,424 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=148]步骤运行结果
2017-01-15 17:59:47,424 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_pos', '无计划', 148, '20170115175938')
2017-01-15 17:59:47,426 htmlreporter.py[line: 146] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]已运行的测试用例
2017-01-15 17:59:47,426 mydb.py[line: 104] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20170115175938')
2017-01-15 17:59:47,427 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=120]步骤运行结果
2017-01-15 17:59:47,427 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 120, '20170115175938')
2017-01-15 17:59:47,429 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=76]步骤运行结果
2017-01-15 17:59:47,429 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 76, '20170115175938')
2017-01-15 17:59:47,431 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=88]步骤运行结果
2017-01-15 17:59:47,432 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 88, '20170115175938')
2017-01-15 17:59:47,433 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=98]步骤运行结果
2017-01-15 17:59:47,433 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 98, '20170115175938')
2017-01-15 17:59:47,436 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=93]步骤运行结果
2017-01-15 17:59:47,436 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 93, '20170115175938')
2017-01-15 17:59:47,440 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=126]步骤运行结果
2017-01-15 17:59:47,440 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 126, '20170115175938')
2017-01-15 17:59:47,443 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=102]步骤运行结果
2017-01-15 17:59:47,443 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 102, '20170115175938')
2017-01-15 17:59:47,445 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=110]步骤运行结果
2017-01-15 17:59:47,446 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 110, '20170115175938')
2017-01-15 17:59:47,447 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=80]步骤运行结果
2017-01-15 17:59:47,448 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 80, '20170115175938')
2017-01-15 17:59:47,449 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=106]步骤运行结果
2017-01-15 17:59:47,449 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 106, '20170115175938')
2017-01-15 17:59:47,451 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=114]步骤运行结果
2017-01-15 17:59:47,451 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 114, '20170115175938')
2017-01-15 17:59:47,453 htmlreporter.py[line: 199] INFO: 正在设置测试报告结果文件名
2017-01-15 17:59:47,453 htmlreporter.py[line: 209] INFO: 测试报告文件名所在路径为：E:\\Projects\\report\\test_report20170115175938.html
2017-01-15 17:59:47,453 htmlreporter.py[line: 202] INFO: 正在生成测试报告
2017-01-15 17:59:47,456 main.py[line: 265] INFO: 生成测试报告成功
2017-01-15 17:59:47,636 main.py[line: 272] INFO: E:\\Projects\\report\\test_report20170115175938.html
2017-01-15 17:59:47,636 main.py[line: 275] INFO: 正在发送测试报告邮件...
2017-01-15 17:59:48,565 main.py[line: 279] INFO: 发送邮件成功
2017-01-15 18:08:00,243 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 18:08:00,243 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 18:08:00,257 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 18:08:00,259 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 18:08:00,313 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 18:08:00,314 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 18:08:00,315 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 18:08:00,316 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 18:08:00,317 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 18:08:00,319 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 18:08:00,319 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 18:08:00,540 global_function.py[line: 19] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'id': '183', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'id': '182', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n'}, {'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'step_number': '3', 'id': '150', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n'}], 'author_id': '1', 'modification_ts': '2016-11-30 15:41:36', 'importance': '2', 'is_open': '1', 'name': 'test-n-登陆掌贝pos机', 'updater_last_name': 'Administrator', 'testcase_id': '148', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '<p>\n\t初始化用例</p>\n', 'id': '149', 'testsuite_id': '147', 'tc_external_id': '1', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-27 18:32:10', 'full_tc_external_id': 'pj_pos-1', 'active': '1', 'version': '1', 'execution_type': '1', 'node_order': '1000'}]
2017-01-15 18:08:00,699 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 18:08:01,492 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:01,493 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '')
2017-01-15 18:08:01,494 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 18:08:01,494 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 18:08:01,494 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 18:08:01,495 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:01,495 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:01,496 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:08:01,496 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:08:01,496 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 18:08:01,499 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 18:08:01,499 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 18:08:01,499 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 18:08:01,500 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:08:01,500 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:08:01",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115180800 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:08:01,503 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 18:08:01,503 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 18:08:01,503 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:01,503 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:01,505 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:08:01,505 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 18:08:01,505 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 18:08:01,505 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 18:08:01,509 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 18:08:01,509 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 18:08:01,509 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 18:08:01,509 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:08:01,509 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:08:01",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'device_no': 1, 'serial_no': 2}, '检查': 'body'}" WHERE executed_history_id = 20170115180800 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:08:01,511 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 18:08:01,511 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 18:08:01,512 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:01,512 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:01,514 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 18:08:01,514 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 18:08:01,514 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:08:01,514 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:08:01,515 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 18:08:01,515 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 18:08:01,515 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 18:08:01,515 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 18:08:01,515 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 18:08:01,515 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 18:08:01,516 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 18:08:01,516 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 18:08:01,516 httpprotocol.py[line: 76] INFO: 请求头为：{'ProtocolVersion': '4.0', 'SerialNo': '[CaseStep.serial_no]', 'DeviceId': '[CaseStep.device_no]', 'ProductVersion': '[global_product_version]', 'Content-Type': 'application/json;charset=utf-8'}
2017-01-15 18:08:01,919 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 18:08:01,919 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 18:08:01,919 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:07:59 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:08:01,919 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:08:01,919 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 18:08:01,919 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 18:08:01,921 testcase.py[line: 130] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 18:08:01,921 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 18:08:01,921 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 18:08:01",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'ProductVersion': '[global_product_version]', 'SerialNo': '[CaseStep.serial_no]', 'DeviceId': '[CaseStep.device_no]', 'Content-Type': 'application/json;charset=utf-8', 'ProtocolVersion': '4.0'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'输出': {'OperatorId': {'operator': {'id': 'value'}}, 'Token': {'token': 'value'}}, '匹配规则': '键值相等', '条件': [{'模式': {'success': True}, '消息': '登录失败,success不为true'}, {'模式': {'message': '成功'}, '消息': 'message不为成功'}, {'模式': {'code': '4001'}, '消息': 'code不为4001'}], '检查': 'body'}" WHERE executed_history_id = 20170115180800 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:08:01,923 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:08:01,923 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:08:01" WHERE executed_history_id = 20170115180800 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:08:01,924 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 18:08:01,925 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_json>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 126, in test_interface_of_json\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 登录失败,success不为true\n')])
2017-01-15 18:08:01,925 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 18:08:01,925 main.py[line: 115] INFO: 运行指定项目
2017-01-15 18:08:02,052 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 18:08:02,052 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 18:08:02,053 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 18:08:02,053 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 18:08:02,177 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 18:08:02,300 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 18:08:02,300 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 18:08:02,428 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['114', '80', '98', '110', '106', '76', '126', '102', '88', '120', '93'])
2017-01-15 18:08:02,545 testplan.py[line: 45] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'step_number': '1', 'id': '116', 'active': '1', 'execution_type': '1', 'expected_results': ''}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2', 'id': '117', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n'}], 'author_id': '1', 'modification_ts': '2016-11-29 17:52:17', 'importance': '2', 'is_open': '1', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'updater_last_name': 'Administrator', 'testcase_id': '114', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '', 'id': '115', 'testsuite_id': '113', 'tc_external_id': '10', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-25 15:02:41', 'full_tc_external_id': 'wecharno-10', 'active': '1', 'version': '1', 'execution_type': '1', 'node_order': '1000'}]
2017-01-15 18:08:02,656 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:02,656 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:08:02,657 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 18:08:02,657 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 18:08:02,657 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:08:02,657 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:02,657 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:02,658 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:08:02,803 global_function.py[line: 19] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'id': '108', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n'}], 'author_id': '1', 'modification_ts': '2016-11-29 17:33:09', 'importance': '2', 'is_open': '1', 'name': 'test-n-创建储值卡支付订单', 'updater_last_name': 'Administrator', 'testcase_id': '106', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '', 'id': '107', 'testsuite_id': '105', 'tc_external_id': '8', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-21 11:26:32', 'full_tc_external_id': 'wecharno-8', 'active': '1', 'version': '1', 'execution_type': '1', 'node_order': '1000'}]
2017-01-15 18:08:02,944 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 18:08:03,177 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:03,178 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:08:03,179 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 18:08:03,179 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 18:08:03,179 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 18:08:03,179 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:03,179 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:03,180 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:08:03,180 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:08:03,180 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:08:03,180 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:08:03,180 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 18:08:03,181 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:08:03,181 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:08:03,181 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:08:03,181 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 18:08:03,181 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 18:08:03,181 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 18:08:03,755 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:08:03,756 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 18:08:03,756 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:08:01 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:08:03,756 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:08:03,757 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 18:08:03,758 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 18:08:03,759 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 18:08:03,759 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 18:08:03",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '匹配规则': '包含字符串', '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}], '检查': 'body'}" WHERE executed_history_id = 20170115180800 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:03,762 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:08:03,762 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:08:03" WHERE executed_history_id = 20170115180800 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:03,765 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 18:08:03,765 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=114, name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 18:08:03,765 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 18:08:03,765 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="无", runtime="2017-01-15 18:08:02",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 106, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u521b\u5efa\u50a8\u503c\u5361\u652f\u4ed8\u8ba2\u5355'}", expected_results="" WHERE executed_history_id = 20170115180800 AND testcase_id = 114 AND step_id = 116 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:03,769 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:08:03,770 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:08:02" WHERE executed_history_id = 20170115180800 AND testcase_id = 114 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:03,955 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=114]的执行结果
2017-01-15 18:08:04,295 testplan.py[line: 45] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'id': '82', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n'}], 'author_id': '1', 'modification_ts': '2016-11-29 18:16:14', 'importance': '2', 'is_open': '1', 'name': 'test-n-点击商品', 'updater_last_name': 'Administrator', 'testcase_id': '80', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '', 'id': '81', 'testsuite_id': '79', 'tc_external_id': '2', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-20 11:05:03', 'full_tc_external_id': 'wecharno-2', 'active': '1', 'version': '1', 'execution_type': '1', 'node_order': '1000'}]
2017-01-15 18:08:04,405 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:04,405 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:08:04,406 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2017-01-15 18:08:04,406 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2017-01-15 18:08:04,406 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2017-01-15 18:08:04,406 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:04,407 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:04,408 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:08:04,408 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:08:04,408 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:08:04,408 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('id', 26838), ('serial', '10549840601068216320')])
2017-01-15 18:08:04,408 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:08:04,408 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:08:04,408 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2017-01-15 18:08:04,408 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:08:04,454 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:08:04,454 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/css/malls/detail.css?v=5.0.0-faae2">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/mall/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320",
			mallConfigSerial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script src="/common/js/request.js?v=5.0.0-faae2"></script>
	<script src="/common/js/extend-number.js?v=5.0.0-faae2"></script>
	<script src="/component/iscroll/js/iscroll.js?v=5.0.0-faae2"></script>
	<script src="/component/swiper/js/swiper.min.js?v=5.0.0-faae2"></script>
	<script src="/js/malls/detail.js?v=5.0.0-faae2"></script>
</body>
</html>
2017-01-15 18:08:04,456 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:08:02 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3983'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=A597F374B98892DD2D6DE1AC23EBAFE2; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 18:08:04,456 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:08:04,456 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2017-01-15 18:08:04,456 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:08:04,456 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:08:04,456 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:08:04",step_action="{'\u65b9\u6cd5': 'get', 'url': '/goods/item?', '\u53c2\u6570': {'id': 26838, 'serial': '10549840601068216320'}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': '立即购买', '消息': '点击商品时无法打开购买页面'}], '检查': 'body'}" WHERE executed_history_id = 20170115180800 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:04,458 testcase.py[line: 162] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2017-01-15 18:08:04,458 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:08:04,458 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:08:04" WHERE executed_history_id = 20170115180800 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:04,570 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2017-01-15 18:08:04,836 testplan.py[line: 45] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '2', 'id': '101', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;code&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;200&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n'}], 'author_id': '1', 'modification_ts': '2016-11-29 18:13:45', 'importance': '2', 'is_open': '1', 'name': 'test-n-查看购物车商品列表', 'updater_last_name': 'Administrator', 'testcase_id': '98', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '', 'id': '99', 'testsuite_id': '97', 'tc_external_id': '6', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-20 15:50:42', 'full_tc_external_id': 'wecharno-6', 'active': '1', 'version': '1', 'execution_type': '1', 'node_order': '1000'}]
2017-01-15 18:08:04,976 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:04,976 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 98, 'test-n-查看购物车商品列表', '微商城-查看购物车商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:08:04,977 testplan.py[line: 72] INFO: 开始执行测试用例[id=98，name=test-n-查看购物车商品列表]
2017-01-15 18:08:04,977 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2017-01-15 18:08:04,977 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}
2017-01-15 18:08:04,978 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:04,978 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 98, 'test-n-查看购物车商品列表', 'plan1_of_wechatno', 'pj_wechatno', 101, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:04,979 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:08:04,979 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:08:04,979 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:08:04,979 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:08:04,980 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 18:08:04,980 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:08:04,980 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:08:04,980 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2017-01-15 18:08:04,980 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:08:05,165 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:08:05,166 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"code":"4000","message":"Server Error"}
2017-01-15 18:08:05,167 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:08:02 GMT'), ('Content-Type', 'application/json;charset=ISO-8859-1'), ('Content-Length', '56'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:08:05,167 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:08:05,167 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：200
2017-01-15 18:08:05,167 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:08:05,168 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:08:05,168 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:08:04",step_action="{'\u65b9\u6cd5': 'get', 'url': '/cartlist?', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': '200', '消息': '把商品移出购物车中失败'}], '检查': 'code'}" WHERE executed_history_id = 20170115180800 AND testcase_id = 98 AND step_id = 101 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:05,171 testcase.py[line: 162] INFO: 测试用例[id=98, name=test-n-查看购物车商品列表]执行成功
2017-01-15 18:08:05,171 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:08:05,172 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:08:04" WHERE executed_history_id = 20170115180800 AND testcase_id = 98 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:05,310 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=98]的执行结果
2017-01-15 18:08:05,560 testplan.py[line: 45] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;style&quot;:&quot;testcase&quot;,<br />\n\t<br />\n\t&quot;testcase_id&quot;:114,<br />\n\t<br />\n\t&quot;testcase_name&quot;:&quot;test-n-提交储值卡支付订单-pay5重定向&quot;<br />\n\t}</p>\n', 'step_number': '1', 'id': '112', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n'}, {'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_without_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:-1,&quot;yhCardType&quot;:-1}<br />\n\t}</p>\n', 'step_number': '3', 'id': '119', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;}</p>\n'}], 'author_id': '1', 'modification_ts': '2016-07-29 17:13:06', 'importance': '2', 'is_open': '1', 'name': 'test-n-储值卡支付-不使用优惠，会员账户支付', 'updater_last_name': 'Administrator', 'testcase_id': '110', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '', 'id': '111', 'testsuite_id': '109', 'tc_external_id': '9', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-22 14:48:17', 'full_tc_external_id': 'wecharno-9', 'active': '0', 'version': '1', 'execution_type': '1', 'node_order': '2'}]
2017-01-15 18:08:05,675 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:05,675 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 110, 'test-n-储值卡支付-不使用优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:08:05,676 testplan.py[line: 72] INFO: 开始执行测试用例[id=110，name=test-n-储值卡支付-不使用优惠，会员账户支付]
2017-01-15 18:08:05,677 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-不使用优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 18:08:05,677 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:08:05,677 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="B", runtime="2017-01-15 18:08:05" WHERE executed_history_id = 20170115180800 AND testcase_id = 110 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:05,800 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=110]的执行结果
2017-01-15 18:08:05,947 testplan.py[line: 45] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'id': '108', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n'}], 'author_id': '1', 'modification_ts': '2016-11-29 17:33:09', 'importance': '2', 'is_open': '1', 'name': 'test-n-创建储值卡支付订单', 'updater_last_name': 'Administrator', 'testcase_id': '106', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '', 'id': '107', 'testsuite_id': '105', 'tc_external_id': '8', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-21 11:26:32', 'full_tc_external_id': 'wecharno-8', 'active': '1', 'version': '1', 'execution_type': '1', 'node_order': '1000'}]
2017-01-15 18:08:06,073 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:06,073 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:08:06,074 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 18:08:06,074 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 18:08:06,074 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 18:08:06,074 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:06,074 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:06,076 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:08:06,076 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:08:06,076 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:08:06,076 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:08:06,076 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 18:08:06,077 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:08:06,077 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:08:06,077 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:08:06,077 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 18:08:06,077 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 18:08:06,077 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 18:08:06,120 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:08:06,120 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 18:08:06,120 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:08:03 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:08:06,120 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:08:06,120 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 18:08:06,120 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 18:08:06,121 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 18:08:06,121 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 18:08:06",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '匹配规则': '包含字符串', '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}], '检查': 'body'}" WHERE executed_history_id = 20170115180800 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:06,122 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:08:06,123 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:08:06" WHERE executed_history_id = 20170115180800 AND testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:06,251 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=106]的执行结果
2017-01-15 18:08:06,507 testplan.py[line: 45] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/plist&quot;,<br />\n\t&quot;参数&quot;:{&quot;page_size&quot;:&quot;10&quot;,&quot;page_no&quot;:&quot;1&quot;,&quot;cateIds&quot;:&quot;&quot;,&quot;orderBy&quot;:&quot;&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;name&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'id': '78', 'active': '1', 'execution_type': '2', 'expected_results': '<p>\n\t｛&ldquo;检查&rdquo;:&ldquo;BODY&rdquo;，</p>\n<p>\n\t&ldquo;匹配规则&rdquo;：&ldquo;包含字符串&rdquo;，</p>\n<p>\n\t&ldquo;条件&rdquo;：【｛&ldquo;模式&rdquo;：&ldquo;\\&quot;currentPage\\&quot;:1&rdquo;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝，｛&ldquo;模式&rdquo;：&ldquo;\\&quot;pageStartRow\\&quot;:0&quot;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝】</p>\n<p>\n\t｝</p>\n'}], 'author_id': '1', 'modification_ts': '2016-11-29 18:17:12', 'importance': '2', 'is_open': '1', 'name': 'test-n-显示默认页面', 'updater_last_name': 'Administrator', 'testcase_id': '76', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '', 'id': '77', 'testsuite_id': '75', 'tc_external_id': '1', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-18 15:52:00', 'full_tc_external_id': 'wecharno-1', 'active': '1', 'version': '1', 'execution_type': '2', 'node_order': '1000'}]
2017-01-15 18:08:06,634 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:06,635 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 76, 'test-n-显示默认页面', '微商城-显示商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:08:06,638 testplan.py[line: 72] INFO: 开始执行测试用例[id=76，name=test-n-显示默认页面]
2017-01-15 18:08:06,638 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}
2017-01-15 18:08:06,638 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\"currentPage\":1","消息":"接口返回错误"},{"模式":"\"pageStartRow\":0","消息":"接口返回错误"}]}
2017-01-15 18:08:06,638 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:06,638 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 76, 'test-n-显示默认页面', 'plan1_of_wechatno', 'pj_wechatno', 78, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}', '{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\\"currentPage\\":1","消息":"接口返回错误"},{"模式":"\\"pageStartRow\\":0","消息":"接口返回错误"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:06,639 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:08:06,639 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:08:06,639 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:08:06,640 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('page_size', '10'), ('page_no', '1'), ('cateIds', ''), ('orderBy', ''), ('serial', '10549840601068216320'), ('name', '')])
2017-01-15 18:08:06,640 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:08:06,640 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:08:06,640 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/plist
2017-01-15 18:08:06,640 httpprotocol.py[line: 75] INFO: 参数为：b'page_size=10&page_no=1&cateIds=&orderBy=&serial=10549840601068216320&name='
2017-01-15 18:08:06,640 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:08:06,862 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:08:06,863 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"dataList":[{"id":27105,"name":"微信支付测试-二级","privateSerial":null,"price":0,"oriPrice":0,"description":"微信支付测试-二级","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/30/b9e21dc4-6cf2-4923-9ec7-4259ecea09c1.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":39,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27090,"name":"测试1222-3","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ea123913-89df-4384-929e-158617f67cbe.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":60,"standardLowPrice":980.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27072,"name":"二级规格1129-2","privateSerial":null,"price":0,"oriPrice":0,"description":"二级规格1129-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/29/9ecf031d-e9bd-427e-b147-cb4a1f8fe5d3.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":25,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27087,"name":"1221-1","privateSerial":null,"price":0,"oriPrice":0,"description":"1221-1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/21/1e844fc5-ee37-4393-97af-2a220971ef1f.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":48,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27040,"name":"一级变三级（改bug前）","privateSerial":null,"price":0,"oriPrice":0,"description":"一级规格1109-2一级规格1109-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/09/23b306d5-384d-4b3b-a4f7-a757d9fc0635.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":135,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27088,"name":"测试1222","privateSerial":null,"price":8,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ca612435-f6e1-4f0d-bc18-61e558e8f720.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":2341,"istop":0,"soldCount":4,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":7,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27089,"name":"测试1222-2","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/37bc7e08-1a2f-4c88-9542-ec5613686d7e.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":26,"standardLowPrice":2100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26955,"name":"乐视超级电视","privateSerial":null,"price":0,"oriPrice":0,"description":"乐视超级电视","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/10/31/3d3ca77e-d010-42f3-804f-bc8a563ec753.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":88,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26971,"name":"多级规格测试010","privateSerial":null,"price":0,"oriPrice":0,"description":"多级规格测试010","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/01/fface01c-5d06-400e-bf7b-2ae2fd64c858.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":15,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27057,"name":"裙子","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/13dbced7-faae-4e13-aebe-6f69d72dc7e0.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":101,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false}],"pageInfo":{"pageSize":10,"currentPage":1,"totalPages":5,"totalRows":47,"pageStartRow":0,"pageEndRow":10,"pagination":true,"hasNextPage":true,"hasPreviousPage":false,"params":null,"needCount":true}}
2017-01-15 18:08:06,865 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:08:04 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:08:06,865 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:08:06,865 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2017-01-15 18:08:06,865 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2017-01-15 18:08:06,865 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:08:06,865 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:08:06,866 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2017-01-15 18:08:06",step_action="{'\u65b9\u6cd5': 'post', 'url': '/goods/plist', '\u53c2\u6570': {'page_size': '10', 'page_no': '1', 'cateIds': '', 'orderBy': '', 'serial': '10549840601068216320', 'name': ''}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': ''currentPage':1', '消息': '接口返回错误'}, {'模式': ''pageStartRow':0', '消息': '接口返回错误'}], '检查': 'BODY'}" WHERE executed_history_id = 20170115180800 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:06,868 testcase.py[line: 162] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2017-01-15 18:08:06,868 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:08:06,868 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:08:06" WHERE executed_history_id = 20170115180800 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:07,009 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2017-01-15 18:08:07,255 testplan.py[line: 45] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'id': '181', 'active': '1', 'execution_type': '1', 'expected_results': ''}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'id': '180', 'active': '1', 'execution_type': '1', 'expected_results': ''}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n', 'step_number': '3', 'id': '128', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n'}], 'author_id': '1', 'modification_ts': '2016-11-29 19:43:22', 'importance': '2', 'is_open': '1', 'name': 'test-n-免费领取优惠券', 'updater_last_name': 'Administrator', 'testcase_id': '126', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '', 'id': '127', 'testsuite_id': '125', 'tc_external_id': '12', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-26 15:06:38', 'full_tc_external_id': 'wecharno-12', 'active': '1', 'version': '1', 'execution_type': '1', 'node_order': '1000'}]
2017-01-15 18:08:07,373 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:07,373 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:08:07,374 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 18:08:07,374 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 18:08:07,374 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:08:07,375 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:08:07,375 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:08:07,375 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 18:08:07,381 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:08:07,381 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:08:07",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115180800 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:07,382 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 18:08:07,383 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:08:07,383 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:07,383 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:07,384 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:08:07,384 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:08:07,384 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 18:08:07,389 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:08:07,390 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:08:07",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115180800 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:07,392 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 18:08:07,392 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 18:08:07,393 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:07,393 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:07,394 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 18:08:07,394 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:08:07,394 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="E", runtime="2017-01-15 18:08:07" WHERE executed_history_id = 20170115180800 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:07,509 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 18:08:07,633 testplan.py[line: 45] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/mall/tobuy/1?&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:&quot;26838&quot;,&quot;amount&quot;:1,&quot;type&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'id': '104', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;到店支付&quot;,&quot;消息&quot;:&quot;无法打开商品详情&quot;}]</p>\n<p>\n\t}</p>\n'}], 'author_id': '1', 'modification_ts': '2016-11-29 18:14:53', 'importance': '2', 'is_open': '1', 'name': 'test-n-点击立即购买按钮', 'updater_last_name': 'Administrator', 'testcase_id': '102', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '', 'id': '103', 'testsuite_id': '79', 'tc_external_id': '7', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-20 16:48:26', 'full_tc_external_id': 'wecharno-7', 'active': '1', 'version': '1', 'execution_type': '1', 'node_order': '1001'}]
2017-01-15 18:08:07,760 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:07,760 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 102, 'test-n-点击立即购买按钮', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:08:07,761 testplan.py[line: 72] INFO: 开始执行测试用例[id=102，name=test-n-点击立即购买按钮]
2017-01-15 18:08:07,761 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}
2017-01-15 18:08:07,762 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}
2017-01-15 18:08:07,762 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:07,762 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 102, 'test-n-点击立即购买按钮', 'plan1_of_wechatno', 'pj_wechatno', 104, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:07,763 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:08:07,763 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:08:07,763 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:08:07,764 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', '26838'), ('amount', 1), ('type', 1), ('serial', '10549840601068216320')])
2017-01-15 18:08:07,764 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:08:07,764 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:08:07,764 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/mall/tobuy/1?mallGoodsId=26838&amount=1&type=1&serial=10549840601068216320
2017-01-15 18:08:07,764 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:08:08,168 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:08:08,169 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 
	 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta http-equiv="Expires" CONTENT="0">
<meta http-equiv="Cache-Control" CONTENT="no-cache">
<meta http-equiv="Pragma" CONTENT="no-cache">
<title>微商城</title>
<link rel="stylesheet" href="/css/mall/pure.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/grids-core.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/zepto.alert.css?v=5.0.0-faae2">

<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.ios7.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.animation.css?v=5.0.0-faae2">
</head>
<style type="text/css">
* {
	margin: 0;
	padding: 0;
}

html {
	color: #626262;
	overflow-y: auto;
	overflow-x: hidden;
}

body {
	margin-bottom: 20px;
	overflow-y: auto;
	overflow-x: hidden;
}

a {
	text-decoration: none;
}

ol,ul {
	list-style: outside none none;
}

.left {
	float: left;
}

.right {
	float: right;
}

.in-block {
	display: inline-block;
}

.orange {
	color: #c58d04;
}

.grey {
	color: #adadad;
}

.bg-color {
	background: #ececec;
}

#wrapper {
	width: 100%;
	margin: 0 auto;
}

.header {
	width: 100%;
}

.header ul {
	position:relative;
	overflow: hidden;
}

.header ul li {
	width: 50%;
	float: left;
	height: 2.8em;
	line-height: 2.8em;
	background: #fff;
	text-align: center;
	border-bottom:1px solid #f38b44;
	-moz-box-sizing:border-box; /* Firefox */
     -webkit-box-sizing:border-box; /* Safari */
     box-sizing:border-box;
}
.header ul .lines{
	position: absolute;
	width: 1%;
	height: 2.8em;
	line-height: 2.8em;
	border-right: 1px solid #FDE5D4;
	left: 49%;
	top: -1px;
 } 
.header ul li a {
	color: #8b898a;
}

.tab_content>div {
	height: auto;
	font-size: 0.8em;
	margin: 0.5em 0;
}

.empty-p {
	width: 80%;
	float: left;
	padding: 0.5em 0;
}

.has-p {
    width: 100%;
    margin: 0 auto;
    padding: 0 1em;
    height: auto;
    line-height: 2.5em;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -webkit-box-sizing: -webkit-border-box;
}
.has-p-one{
    background: url(/images/mall/contact.png) no-repeat left center;
    background-size: 12px 12px;
}
.has-p-two{
    background: url(/images/mall/take.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.has-p-three{
    background: url(/images/mall/time.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.input-right{
    position: relative;
}
.input-right-img{
    width: 1em;
    position: absolute;
    right: 0.6em;
    top: 0.3em;
}
#scheduledTime{
    width:11em;
    height: 2em;
    border:1px solid #a0a0a0;
    border-radius:4px;
    color:#a0a0a0;
    text-indent:.5em
}
.hiddens-p{
    text-overflow:ellipsis; 
    overflow:hidden; 
    white-space:nowrap;  
}

.right-dashed {
	border-left: 1px solid #eee;
	margin-top: 1em;
	padding-bottom:1em;
}

#edit {
	padding: 1em 0 1em 2em;
    width: 10px;
}

.header ul li.active{
    border-bottom: 4px solid #f38b44;
}
.header ul li.active a{
    color: #f38b44!important;
}
.buy_title{
	background:#f3f3f3;
	padding:0.3em 1em;
	margin: 0;
}
.content {
	width: 100%;
	background: #fff;
	overflow: hidden;	
	padding-bottom:8%;
}

.selectList {
	border-bottom: 1px solid #efefef;
	margin: 0 auto;
	overflow: hidden;
	padding: 0.5em 1em;
	font-size: 0.8em;
	clear:both;
}

.selectList img {
    display: inline-block;
    float: left;
    width: 25%;
    border-radius: 4px;
    -webkit-border-radius: 4px;
}

.button {
	display:block;	
	width: 99%;	
	height: 3em;
	color: #fff;
	border: none;
	border-radius: 4px;
	margin:0 auto 0.5em auto;
}

.addbtn {
	background: #33CC66;
}

.btn-wrap-5 {
	padding: 0 1em;
}
.buybtn {
	width: 100%;
	background: #f68d3c;
}

.footer {
	width: 100%;
	background: #fff;
	color: #b6b6b6;
	overflow: hidden;
	text-align: left;
	margin-bottom: 1em;
}

.all-end-button {
	width: 90%;
	margin: 1em auto 0.5em;
}

.all-end-button p:first-child {
	text-align: left;
}

.error-page{
	background: #ddd;
    padding-bottom: 2em;
}
.error-page img{
    margin:0 auto;
	padding-top: 2em;
}
.error-page p{
    text-align:center;
    color:#000;
    width:80%;
    margin:1em auto 2em;
}
#deliverFee{
	text-align:left;
	font-size:0.8em;
	color:#acb0af;
}
.order-div{
    margin-left: 26.8%;            
    position: relative;
}
.order-div>p:last-child{
    width: 100%;
    margin: 0;
    position: absolute;
    bottom: 0;
    left: 0;
}
.m-t-n{
    margin-top: 0;
}
.m-t-n>span{
    display: inline-block;
}
.m-t-n>span:first-child{
    width: 70%;
}
.m-t-n>span:last-child{
    width: 30%;
}
.mtn-span{
    float: right;
}
.t-r-span{
	text-align:right;
}
.ccc{
    color: #ccc;
}
.peisong{
    text-align: right;
    margin-bottom: 0;
    padding-right: 1em;
    padding-top: 0.4em;
}
.peisong-detail{
    color:#000;
}
.peisong-detail input{
    border: none;
}
.peisong-detail div>p{
    padding-left: 1.8em;
    padding-top: 0.8em;
    padding-bottom: 0.8em;
    margin: 0;
    clear:both;
}

.weipay{            
    background: url(/images/weixin2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}        
.peisong-detail div>p.pay{
    background: url(/images/money2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.cardpay{
    background: url(/images/cardpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.mdpay{
    background: url(/images/mdpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}

.peisong-detail div[class^="btn-wrap-"] {
	border-bottom: 1px solid #dadada;
	padding: 0 1em;
	height: 3em;
	position: relative;
}

.weipay,.pay,.mdpay,.cardpay{
    position: relative;
}
 .weipay>img,.mdpay>img,.pay>img,.cardpay>img,.zhifu input{
    width: 1.2em;
    height: 1.2em;
    position: absolute;
    right: 0;
    top: 50%;
    transform:translateY(-50%);
}

.pure-img-check {
	background: url(/images/weixuan2.png) no-repeat left center;
    background-size:1.05em 1.05em; 
    float: right;
    height: 1.05em;
    width: 1.05em;
}

.zhifu input{
    display: none;
}
#deliverFeeDiv, #FetchDiv {
	border-bottom: 1px solid #efefef;
    padding: 0.5em 1em;
}
#deliverFeeDiv p, #FetchDiv p{
	text-align:right;
}

#remark {
	padding: 0.5em 1em;
	height: 4em;
	font-size: 1.0em;
}

.tab-adress {
	position: relative;
}
.icon-wrap {
	/*float: right;*/
	position: absolute;
	top: 11px;
	right: 10px;
}
.icon-wrap-spe {
	top: 0;
}

/*toast提示*/
.toastBlock {
    display: none; 
    position: fixed;
    bottom: 50%;
    width: 100%;
    text-align: center;
    transition: opacity 1s ease-out;
    z-index: 19;
}
.toastBlock .toastContent {
    display: inline-block;
    padding: 18px;
    border-radius: 5px;
    font-size: 14px;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.7);
}
</style>
<body>
	<div id="wrapper">
		
			
			
			
				
					
					
						
						
						
						
						
					
					
				
				
			
			<div class="header">
				
					<ul class="tab">
						<li class='active' data='#deliverFeeDiv'><a href="#tab1">快递发货</a></li>						
						<li class=''><a href="#tab2">到店自提</a></li>
						<span class="lines"></span>
					</ul>
				
			</div>
			<p class="buy_title"></p>
			
			<div class="tab_container">
				<div id="tab1" class="tab_content pure-g" style="">
					<div class="pure-u-24-24 tab-adress j-tab-adress">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">17817738178<span>(17817738178)</span></span>
								</div>
								<div class="has-p">
									<span>配送地址：</span>
									<span class="pure-u-3-5">天津市县宁河县详细</span>
                                </div>

                                <span class="icon-wrap">
                                	
                                		
                                		
                                		<a class="url_adress" href="/toaddr/1?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
                                		</a>
                                		
                                	
                                </span>
							
							
						
					</div>
				</div>
				<div id="tab2" class="tab_content pure-g" style="display:none">
					<div class="pure-u-24-24">
						
							
								<div class="tab-adress j-tab-adress">
									<div class="has-p">
										<span>联系方式：</span>
										<span class="pure-u-3-5">452<span>(17817738178)</span></span>
									</div>
	                                <div class="has-p">
	                                	<span>门&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;店：</span>
	                                	<span class="pure-u-3-5">
	                                		广东省深圳市福田区
		                                	
		                                		Biu
		                                	
	                                	</span>
	                                </div>
	                                <span class="icon-wrap">
	                                	
	                                		
	                                		
	                                		<a class="url_adress" href="/toaddr/2?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
	                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
	                                		</a>
	                                		
	                                	
	                                </span>
                                </div>
                               	<div class="has-p">
                               		<span>到店时间：</span>
                               		<span class="input-right">
                               			<input type="text" id="scheduledTime" name="scheduledTime" class="text" placeholder="请选择"/><img src="/images/mall/input-right.png?v=5.0.0-faae2" class="input-right-img">
                               		</span>
                               	</div>
							
							
						
					</div>
				</div>
			</div>
			<p class="buy_title"></p>
			
			<div class="content">
				
					
						
							<div class="selectList">
								<img src="http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg"> 
								
									
									
										<div class="order-div">
											<p class="m-t-n"><span>接口-测试商品1</span><span class="mtn-span t-r-span">￥0.01</span></p>
											<p><span class="ccc mtn-span">X1</span></p>
                                        </div>	
									
								
							</div>
						
					
					
					
				
				<div id="deliverFeeDiv">
					 
						
						
							<p id="deliverFee">含运费：￥0.01</p>
							<p class="orange">合计：￥0.02</p>
						
					 
				</div>
				<div id="FetchDiv" style="display: none;">
					<p class="orange">合计：￥0.01</p>
				</div>
				<div id="remark">
					<span class="beizhu" style="float:left">备注：</span>
                   	<span class="beizhulan">
                   		<textarea rows="3" placeholder="可于此处给卖家留言备注" style="border:0;width: 85%;"></textarea>
                   	</span>
				</div>
			</div>
			<p class="buy_title"></p>
			<div class="footer">
				<div class="peisong-detail zhifu">
                	
                        <div class="btn-wrap-1">
                         	<p class="weipay">微信支付<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="1"/>
                         	</p>
                        </div>
                    
                  	
                  	
                        <div class="btn-wrap-2" style="">
                         	<p class="pay">货到付款<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="3"/>
                         	</p>
                        </div>
                   	
		
                    
                        <div class="btn-wrap-3" style="display:none">
                        	<p class="mdpay">到店支付<span class="pure-img-check"></span>
                        		<input type="radio" name="zhifu" value="2"/>
                        	</p>
                        </div>
                   	
                   	
                   	
                        <div class="btn-wrap-4">
                       		<p class="cardpay">储值卡支付<span class="pure-img-check"></span>
                       			<input type="radio" name="zhifu" value="4"/>
                       		</p>
                        </div>
                   	
                </div>
			</div>
			<div class="btn-wrap-5">
				<input type="button" class="button buybtn submit" value="确认提交" />
			</div>

			<div id="toastId" class="toastBlock">
			    <span class="toastContent"></span>
			</div>
			
		
	</div>
	<script type="text/javascript" src="/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/touch.js?v=5.0.0-faae2"></script>
    
	<script type="text/javascript" src="/js/mall/zepto.alert.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mall.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.zepto.js?v=5.0.0-faae2" ></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.core.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.scroller.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.datetime.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.i18n.zh.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			$("input[name='zhifu']:checked").prev('.pure-img').attr('src','/images/check.png');
			var tab = parseInt("1");
			/* if(tab == 1){
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else if (tab == 0){
			    $("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} else if(parseInt("1") != 0){
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} */
			
			if ("true" == "true" && 1 == 1) {
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else {
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			}
			
			// 控制显示图片比例
			var img_left_heights = $(".selectList img").width()*(0.75);
			$(".selectList img,.order-div").css('height',img_left_heights);
			
			// 取货日期
			var now = new Date();
            $('#scheduledTime').mobiscroll().datetime({
                minDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()+1),
                maxDate: new Date(now.getFullYear(), now.getMonth()+3, now.getDate()),
                stepMinute: 30,
                dateOrder :"yymmdd",
                dateFormat:"yy-mm-dd",
                timeWheels:"HHii",
                timeFormat:"HH:ii",
                //invalid: [{ start: '00:00', end: '08:00' },{ start: '22:00', end: '23:59' }],
                theme: 'ios7',
                lang: 'zh',
                display: 'bottom',
                mode: 'mixed'
            });
            $('#scheduledTime').click(function(){
                $('#scheduledTime').mobiscroll('show'); 
                return false;
            });
            
			$("ul li").click(function() {
				$("ul li").removeClass("active");
				$(this).addClass("active");
				if($(this).attr("data")=="#deliverFeeDiv"){
					$("#deliverFeeDiv").show();
					$("#FetchDiv").hide();
				}else{
					$("#deliverFeeDiv").hide();
					$("#FetchDiv").show();
				}
				$(".tab_content").hide();
				var href = $(this).find("a").attr("href");
				$(href).show();
				
				if(href.endWith("tab1")) {
					$(".btn-wrap-2").show();
					$(".btn-wrap-3").hide();
				} else if(href.endWith("tab2")) {
					$(".btn-wrap-2").hide();
					$(".btn-wrap-3").show();
				}
				//清空已选择的支付方式
				$("input[name='zhifu']").prop("checked", false);
				$(".zhifu .pure-img-check").css('background-image','url(/images/weixuan2.png)');
				return false;
			});
			//商户设置的满额包邮价
			/* var noDeliverFee = toPrice(parseFloat("200")/100);
			var totalFee = parseFloat("0.01");
			if(totalFee > noDeliverFee){
				$("#deliverFeeDiv .orange").text("合计：￥"+ totalFee);
				$("#deliverFee").text("含运费：￥0.00");
			} */
			$('.zhifu>div').click(function(){
	            $("input[name=zhifu]").prop("checked", false);
	            $(".pure-img-check").css('backgroundImage','url(/images/weixuan2.png)');
	            var img_obj = $(this).find('.pure-img-check');
	            var backgroundImage = img_obj.css('background-image');
	            var input_obj = $(this).find('input');
	            if(backgroundImage.indexOf("weixuan2.png") > 0){
	                img_obj.css('background-image','url(/images/check.png)');
	                input_obj.prop("checked", "checked");
	            }else{
	                img_obj.css('background-image','url(/images/weixuan2.png)');
	                input_obj.prop("checked", false);
	            }
	        });


	        $(".j-tab-adress").click(function(event) {
	        	var _url = $(this).find('.url_adress').prop("href");

	        	window.location.href = _url;
	        });
		});
		
		function validateRemark(){
			var text = filtEmoji($('.beizhulan textarea').val());
			if(text != "" && text != undefined){
				if(text.length>30){
					$.dialog({
                        widths : '80%',
                        content : '您输入的备注过长，请不要超过30个字',
                        title : 'no',
                        fullok : function() {
                            return true;
                        },                       
                        lock : true
                    });	
					return false;
				}
				return true;
			}
			return true;
		}
		function filtEmoji (str) {
			return unescape(escape(str).replace(/\%uD.{3}/g, ''));
		}
		
		$(".submit").click(function(event){
			var payType = $("input[name='zhifu']:checked").val();
			if(null == payType || "" == payType || typeof(payType) == "undefined") {
       		 $.dialog({
                    widths : '80%',
                    content : '请选择支付方式',
                    title : 'no',
                    fullok : function() {
                        return true;
                    },                       
                    lock : true
                });
       			return;
       		}
			$.dialog({
                content : "确认提交订单？",
                title : "no",
                okText: '取消',
                cancelText : '确定', 
                ok : function() {
                	$(".ft-right").removeAttr("disabled");
                	return;
                },
                cancel : function() {                        	
               		
               		if(payType == 1){
               			if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				doAlert("no", "无效物流方式");
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@36234eb1";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/1", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "id=" + result.attach;
            	    			strParams += "&serial=10549840601068216320";
            	    			if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
            	        	});
            			}
               		}
               		
    				if(payType == 2){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@36234eb1";
    					if(shopBranch == "") {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					var _fetchTime = $("#scheduledTime").val();
    					if(null == _fetchTime || "" == _fetchTime) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请选择取货时间',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						
    						var _remark = filtEmoji($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							fetchTime : _fetchTime,
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/2/2", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 3){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑收货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });

    						var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
    						// var _remark = encodeURI($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/1/3", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 4){
    					if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				$.dialog({
        	                    widths : '80%',
        	                    content : '无效物流方式',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@36234eb1";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
            			// var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/4", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "?orderId=" + result.attach;
            					if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            					strParams += "&serial=10549840601068216320";
                				window.location.href = "/pay/5"+strParams;
            	        	});
            			}
            			
    				}
    				
                },
                lock : true
            });
		});
		
		//微信支付
		/* $(".payUseWX").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			var type = 0;
			$(".tab_content").each(function(){
				if($(this).css("display") != "none") {
					var attrId = $(this).attr("id");
					if(attrId == "tab1") {
						type = 1;//快递取货
					} else if(attrId == "tab2") {
						type = 2;//门店自提
					}
				}
			});
			if(type <= 0) {
				doAlert("no", "无效物流方式");
				return;
			}
			if(type == 1) {
				if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑收货地址");
					return;
				}
			}
			var _fetchTime = "";
			if(type == 2) {
				if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑取货地址");
					return;
				}
				_fetchTime = $("#scheduledTime").val();
				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
					doAlert("no", "请选择取货时间");
					return;
				}
				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@36234eb1";
				if(shopBranch == "") {
					doAlert("no", "请编辑取货地址");
					return;
				}
			}
			
			var _remark = encodeURI($(".beizhulan").find("textarea").val());
			var params = {
				serial : "10549840601068216320",
				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
				fm : "1",
				mallGoodsId : "26838",
				amount : "1",
				cartIds : "",
				fetchTime : _fetchTime,
				remark : _remark
			};
			if(parseInt("1") == 1 && parseInt("1") == 2){
				var standardId = "";
				if(standardId != null && standardId != undefined){
					params.standardId = standardId;
				}
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				$.post("/cmorder/" + type+ "/1", params, function(result){
					dialog.close();
					
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					
					var strParams = "id=" + result.attach;
	    			strParams += "&serial=10549840601068216320";
	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
	        	});
			}
		}); */
		//货到付款
		/* $(".payAfrecv").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑收货地址");
				return;
			}
			
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				var _remark = encodeURI($(".beizhulan").find("textarea").val());
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/1/3", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
	        	});
			}
		}); */
		//到店支付
		// $(".payInshop").click(function(event) {
			/* if($(this).prop("disabled") == true)
        		return false;
			
			var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@36234eb1";
			if(shopBranch == "") {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			var _fetchTime = $("#scheduledTime").val();
			if(null == _fetchTime || "" == _fetchTime) {
				doAlert("no", "请选择取货时间");
				return;
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				
				var _remark = $(".beizhulan").find("textarea").val();
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					fetchTime : _fetchTime,
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/2/2", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
	        	});
			} */
		// });
	
		// toast提示
		var toastTime=null;
		var displayTime=null;

		function setToast(html) {
		    if (toastTime != null) {
		        clearTimeout(toastTime);
		        clearTimeout(displayTime);
		    }
		    // $('toastId').style.display = 'block';
		    // $('toastId').style.opacity = 1;
		    $('#toastId').css({
		        display: 'block',
		        opacity: 1
		    });
		    $('#toastId .toastContent').text(html);

		    toastTime = setTimeout(function() {
		        // $('toastId').style.opacity = 0;
		        $('#toastId').css("opacity", 0);
		        displayTime = setTimeout(function() {
		            // $('toastId').style.display='none';
		            $('#toastId').css("display", "none");
		        }, 1000);
		    }, 1000);
		}

		function toastDisplay(str) {
		    setToast(str);
		}
	</script>
</body>
</html>
<!--加入判断用户是否关注公众号功能 add by lipengfei at 2015-11-9  -->
  	
	<script type="text/javascript" src="/js/bind/banner.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			//var SHOP_SERIAL = getCookie("SHOP_SERIAL");
			var SHOP_SERIAL = "10549840601068216320";
			if(null != SHOP_SERIAL && SHOP_SERIAL != ""){
				$.ajax({
					url : '/saofu_mobile/checkUserBindStatus',
					data : {
						"serial" : SHOP_SERIAL
					},
					type : 'post',
					cache : false,
					dataType : 'json',
					success : function(data) {
						if (data != null) {
							var guildFocusStr = data.guildFocusStr;
							if(guildFocusStr != null && guildFocusStr == "1"){
								var hasBindedShop = data.hasBindedShop;
								if(hasBindedShop == "0"){
									var qrName = data.QRPublicName;
									var qrUrl = data.QRCodeURL;
									if(qrName != "" && qrUrl != ""){
										var params = qrName+"**"+qrUrl;
										followModule(params);
									}
								}
							}
						} 
					},
					error : function() {
					}
				});
			}
		});
				
	</script>

2017-01-15 18:08:08,172 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:08:05 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=3ADDD6CCD6BF439A3761B695385F0C43; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 18:08:08,172 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:08:08,172 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：到店支付
2017-01-15 18:08:08,172 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:08:08,172 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:08:08,173 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:08:07",step_action="{'\u65b9\u6cd5': 'get', 'url': '/mall/tobuy/1?', '\u53c2\u6570': {'mallGoodsId': '26838', 'amount': 1, 'type': 1, 'serial': '10549840601068216320'}}", expected_results="{'匹配规则': '包含字符串', '条件': [{'模式': '到店支付', '消息': '无法打开商品详情'}], '检查': 'body'}" WHERE executed_history_id = 20170115180800 AND testcase_id = 102 AND step_id = 104 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:08,175 testcase.py[line: 162] INFO: 测试用例[id=102, name=test-n-点击立即购买按钮]执行成功
2017-01-15 18:08:08,175 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:08:08,175 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:08:07" WHERE executed_history_id = 20170115180800 AND testcase_id = 102 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:08,291 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=102]的执行结果
2017-01-15 18:08:08,546 testplan.py[line: 45] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'id': '175', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'id': '174', 'active': '1', 'execution_type': '1', 'expected_results': ''}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'step_number': '3', 'id': '90', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '4', 'id': '176', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '5', 'id': '177', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n'}], 'author_id': '1', 'modification_ts': '2017-01-15 17:46:37', 'importance': '2', 'is_open': '1', 'name': 'test-n-把商品加入购物车', 'updater_last_name': 'Administrator', 'testcase_id': '88', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '', 'id': '89', 'testsuite_id': '87', 'tc_external_id': '4', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-20 12:07:40', 'full_tc_external_id': 'wecharno-4', 'active': '1', 'version': '1', 'execution_type': '1', 'node_order': '1000'}]
2017-01-15 18:08:08,666 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:08,666 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:08:08,667 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 18:08:08,667 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 18:08:08,667 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 18:08:08,667 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:08,668 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:08,668 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:08:08,669 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:08:08,669 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 18:08:08,669 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 18:08:08,671 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 18:08:08,671 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 18:08:08,672 testcase.py[line: 115] ERROR: 步骤[1]执行出错,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 18:08:08,672 testcase.py[line: 122] INFO: 正在更新步骤执行结果
2017-01-15 18:08:08,672 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="CaseStep", protocol_method="无", runtime="2017-01-15 18:08:08",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial1=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115180800 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:08,673 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:08:08,673 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:08:08" WHERE executed_history_id = 20170115180800 AND testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:08,796 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=88]的执行结果
2017-01-15 18:08:09,089 testplan.py[line: 45] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n<p>\n\tulr中的40758966216286146560取自base_info.serial字段</p>\n', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CMOrder&quot;,<br />\n\t&quot;function&quot;:&quot;test_create_mall_order&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;params&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:2,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'id': '122', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;success&quot;:1,&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n'}, {'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;Pay5&quot;,<br />\n\t&quot;function&quot;:&quot;test_pay5&quot;,<br />\n\t&quot;method&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2', 'id': '123', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;button_name&quot;:&quot;确认支付&quot;, &quot;page_title&quot;:&quot;储值卡&quot;}</p>\n'}, {'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;GetInCoupon&quot;,<br />\n\t&quot;function&quot;:&quot;test_get_in_coupon&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;params&quot;:&quot;&quot;<br />\n\t}</p>\n', 'step_number': '3', 'id': '124', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;getByWeixin&quot;: 0, &quot;codeType&quot;: 2, &quot;title&quot;: &quot;动态校验&quot;, &quot;subTitle&quot;: &quot;动态校验&quot;, &quot;notice&quot;: &quot;动态校验&quot;, &quot;description&quot;: &quot;动态校验&quot;,&quot;useLimit&quot;:&quot;动态校验&quot;,&nbsp; &quot;dateInfoType&quot;: &quot;动态校验&quot;, &quot;cardType&quot;: 1,&quot;listing&quot;: 1, &quot;fitAll&quot;: 1,&quot;detailTxt&quot;: &quot;动态校验&quot;,&quot;servicePhone&quot;:&quot;动态校验&quot;,&quot;cashLeastCost&quot;: &quot;动态校验&quot;,&quot;cashReduceCost&quot;: &quot;动态校验&quot;,&quot;discount&quot;: 0,&quot;channel&quot;: -1,&quot;branchId&quot;: -1,&quot;success&quot;: 1, &quot;skuQuantity&quot;:&quot;动态校验&quot;,&quot;output_arg1&quot;:&quot;GetInCoupon.card_code&quot;</p>\n<p>\n\t}</p>\n'}, {'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_with_cash_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:&quot;[GetInCoupon.card_code]&quot;,&quot;yhCardType&quot;:&quot;CASH&quot;}<br />\n\t}</p>\n', 'step_number': '4', 'id': '129', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;,&quot;coupon_weixin_verification_record&quot;:1}</p>\n'}], 'author_id': '1', 'modification_ts': '2016-07-29 18:31:36', 'importance': '2', 'is_open': '1', 'name': 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', 'updater_last_name': 'Administrator', 'testcase_id': '120', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '', 'id': '121', 'testsuite_id': '109', 'tc_external_id': '11', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-26 12:12:10', 'full_tc_external_id': 'wecharno-11', 'active': '0', 'version': '1', 'execution_type': '1', 'node_order': '3'}]
2017-01-15 18:08:09,227 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:09,227 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 120, 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:08:09,230 testplan.py[line: 72] INFO: 开始执行测试用例[id=120，name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]
2017-01-15 18:08:09,230 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 18:08:09,230 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:08:09,231 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="B", runtime="2017-01-15 18:08:09" WHERE executed_history_id = 20170115180800 AND testcase_id = 120 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:09,357 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=120]的执行结果
2017-01-15 18:08:09,482 testplan.py[line: 45] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,</p>\n<p>\n\t&quot;用例id&quot;:88,</p>\n<p>\n\t&quot;用例名称&quot;:&quot;test-n-把商品加入购物车&quot;<br />\n\t}</p>\n<p>\n\t&nbsp;</p>\n', 'step_number': '1', 'id': '95', 'active': '1', 'execution_type': '1', 'expected_results': ''}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cart/delfromcart?&quot;,<br />\n\t&quot;参数&quot;:{&quot;strIds&quot;:&quot;[CaseStep.strIds]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2', 'id': '96', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品移出购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '3', 'id': '178', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;[]&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n'}], 'author_id': '1', 'modification_ts': '2016-11-29 18:05:21', 'importance': '2', 'is_open': '1', 'name': 'test-n-把商品移出购物车', 'updater_last_name': 'Administrator', 'testcase_id': '93', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '', 'id': '94', 'testsuite_id': '91', 'tc_external_id': '5', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-20 12:25:46', 'full_tc_external_id': 'wecharno-5', 'active': '1', 'version': '1', 'execution_type': '1', 'node_order': '1000'}]
2017-01-15 18:08:09,596 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:09,596 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 93, 'test-n-把商品移出购物车', '微商城-把商品移出购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:08:09,597 testplan.py[line: 72] INFO: 开始执行测试用例[id=93，name=test-n-把商品移出购物车]
2017-01-15 18:08:09,597 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} 
2017-01-15 18:08:09,597 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:08:09,597 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:09,597 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 95, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} ', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:09,598 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:08:09,718 global_function.py[line: 19] INFO: 获取测试用例信息 [{'status': '1', 'updater_login': 'admin', 'author_login': 'admin', 'updater_first_name': 'Testlink', 'summary': '', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'id': '175', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'id': '174', 'active': '1', 'execution_type': '1', 'expected_results': ''}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'step_number': '3', 'id': '90', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '4', 'id': '176', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '5', 'id': '177', 'active': '1', 'execution_type': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n'}], 'author_id': '1', 'modification_ts': '2017-01-15 17:46:37', 'importance': '2', 'is_open': '1', 'name': 'test-n-把商品加入购物车', 'updater_last_name': 'Administrator', 'testcase_id': '88', 'updater_id': '1', 'layout': '1', 'author_first_name': 'Testlink', 'preconditions': '', 'id': '89', 'testsuite_id': '87', 'tc_external_id': '4', 'author_last_name': 'Administrator', 'estimated_exec_duration': '', 'creation_ts': '2016-07-20 12:07:40', 'full_tc_external_id': 'wecharno-4', 'active': '1', 'version': '1', 'execution_type': '1', 'node_order': '1000'}]
2017-01-15 18:08:09,851 global_function.py[line: 39] INFO: 正在读取套件[id=87]的协议，host，端口配置...
2017-01-15 18:08:10,125 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:08:10,125 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 88, 'test-n-把商品加入购物车', '把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:08:10,126 global_function.py[line: 71] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 18:08:10,127 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 18:08:10,127 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 18:08:10,127 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:08:10,127 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115180800', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:08:10,128 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:08:10,128 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:08:10,128 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 18:08:10,128 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 18:08:10,131 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 18:08:10,131 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 18:08:10,131 testcase.py[line: 115] ERROR: 步骤[1]执行出错,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 18:08:10,131 testcase.py[line: 122] INFO: 正在更新步骤执行结果
2017-01-15 18:08:10,132 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="CaseStep", protocol_method="无", runtime="2017-01-15 18:08:10",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial1=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115180800 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:10,133 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:08:10,134 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:08:10" WHERE executed_history_id = 20170115180800 and testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:10,135 global_function.py[line: 82] INFO: 指定用例[88]已执行完
2017-01-15 18:08:10,135 testcase.py[line: 115] ERROR: 步骤[1]执行出错,停止执行用例[id=93, name=test-n-把商品移出购物车]
2017-01-15 18:08:10,135 testcase.py[line: 122] INFO: 正在更新步骤执行结果
2017-01-15 18:08:10,135 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="CaseStep", protocol_method="无", runtime="2017-01-15 18:08:09",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 88, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u628a\u5546\u54c1\u52a0\u5165\u8d2d\u7269\u8f66'}", expected_results="" WHERE executed_history_id = 20170115180800 AND testcase_id = 93 AND step_id = 95 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:10,136 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:08:10,136 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:08:09" WHERE executed_history_id = 20170115180800 AND testcase_id = 93 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:08:10,255 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=93]的执行结果
2017-01-15 18:08:10,382 testplan.py[line: 97] INFO: 测试计划[project=pj_wechatno ,testplan=plan1_of_wechatno]已执行完
2017-01-15 18:08:10,383 main.py[line: 242] INFO: 接口测试已执行完成，正在关闭数据库连接
2017-01-15 18:08:10,384 htmlreporter.py[line: 37] INFO: 正在查询测试用例总数
2017-01-15 18:08:10,384 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE executed_history_id = %s  data：('20170115180800',)
2017-01-15 18:08:10,385 htmlreporter.py[line: 43] INFO: 正在查询执行通过的用例数
2017-01-15 18:08:10,385 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Pass', '20170115180800')
2017-01-15 18:08:10,386 htmlreporter.py[line: 49] INFO: 正在查询执行失败的用例数
2017-01-15 18:08:10,386 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Fail', '20170115180800')
2017-01-15 18:08:10,386 htmlreporter.py[line: 55] INFO: 正在查询执行出错的用例数
2017-01-15 18:08:10,387 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Error', '20170115180800')
2017-01-15 18:08:10,387 htmlreporter.py[line: 61] INFO: 正在查询未执行的用例数
2017-01-15 18:08:10,387 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Block', '20170115180800')
2017-01-15 18:08:10,388 htmlreporter.py[line: 87] INFO: 正在查询已运的测试计划
2017-01-15 18:08:10,388 mydb.py[line: 104] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20170115180800',)
2017-01-15 18:08:10,389 htmlreporter.py[line: 113] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]的测试用例执行结果
2017-01-15 18:08:10,389 mydb.py[line: 104] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20170115180800')
2017-01-15 18:08:10,390 htmlreporter.py[line: 120] INFO: 正在记录测试测试计划[project：pj_pos, testplan：无计划]的测试用例运行结果到测试报告
2017-01-15 18:08:10,391 htmlreporter.py[line: 113] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例执行结果
2017-01-15 18:08:10,391 mydb.py[line: 104] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20170115180800')
2017-01-15 18:08:10,392 htmlreporter.py[line: 120] INFO: 正在记录测试测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例运行结果到测试报告
2017-01-15 18:08:10,393 htmlreporter.py[line: 134] INFO: 正在查询已运的测试计划
2017-01-15 18:08:10,393 mydb.py[line: 104] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20170115180800',)
2017-01-15 18:08:10,395 htmlreporter.py[line: 146] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]已运行的测试用例
2017-01-15 18:08:10,395 mydb.py[line: 104] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20170115180800')
2017-01-15 18:08:10,396 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=148]步骤运行结果
2017-01-15 18:08:10,397 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_pos', '无计划', 148, '20170115180800')
2017-01-15 18:08:10,400 htmlreporter.py[line: 146] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]已运行的测试用例
2017-01-15 18:08:10,400 mydb.py[line: 104] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20170115180800')
2017-01-15 18:08:10,403 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=114]步骤运行结果
2017-01-15 18:08:10,403 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 114, '20170115180800')
2017-01-15 18:08:10,406 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=106]步骤运行结果
2017-01-15 18:08:10,406 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 106, '20170115180800')
2017-01-15 18:08:10,408 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=80]步骤运行结果
2017-01-15 18:08:10,408 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 80, '20170115180800')
2017-01-15 18:08:10,409 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=98]步骤运行结果
2017-01-15 18:08:10,409 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 98, '20170115180800')
2017-01-15 18:08:10,411 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=110]步骤运行结果
2017-01-15 18:08:10,411 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 110, '20170115180800')
2017-01-15 18:08:10,412 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=76]步骤运行结果
2017-01-15 18:08:10,412 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 76, '20170115180800')
2017-01-15 18:08:10,414 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=126]步骤运行结果
2017-01-15 18:08:10,415 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 126, '20170115180800')
2017-01-15 18:08:10,416 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=102]步骤运行结果
2017-01-15 18:08:10,416 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 102, '20170115180800')
2017-01-15 18:08:10,419 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=88]步骤运行结果
2017-01-15 18:08:10,419 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 88, '20170115180800')
2017-01-15 18:08:10,421 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=120]步骤运行结果
2017-01-15 18:08:10,421 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 120, '20170115180800')
2017-01-15 18:08:10,422 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=93]步骤运行结果
2017-01-15 18:08:10,422 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 93, '20170115180800')
2017-01-15 18:08:10,424 htmlreporter.py[line: 199] INFO: 正在设置测试报告结果文件名
2017-01-15 18:08:10,424 htmlreporter.py[line: 209] INFO: 测试报告文件名所在路径为：E:\\Projects\\report\\test_report20170115180800.html
2017-01-15 18:08:10,424 htmlreporter.py[line: 202] INFO: 正在生成测试报告
2017-01-15 18:08:10,427 main.py[line: 265] INFO: 生成测试报告成功
2017-01-15 18:08:10,575 main.py[line: 272] INFO: E:\\Projects\\report\\test_report20170115180800.html
2017-01-15 18:08:10,576 main.py[line: 275] INFO: 正在发送测试报告邮件...
2017-01-15 18:08:11,113 main.py[line: 279] INFO: 发送邮件成功
2017-01-15 18:17:10,745 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 18:17:10,746 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 18:17:10,762 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 18:17:10,765 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 18:17:18,738 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 18:17:18,739 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 18:17:18,763 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 18:17:18,765 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 18:17:18,835 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 18:17:18,835 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 18:17:18,836 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 18:17:18,836 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 18:17:18,837 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 18:17:18,839 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 18:17:18,839 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 18:17:19,063 global_function.py[line: 19] INFO: 获取测试用例信息 [{'tc_external_id': '1', 'version': '1', 'summary': '', 'updater_last_name': 'Administrator', 'testsuite_id': '147', 'is_open': '1', 'testcase_id': '148', 'importance': '2', 'status': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-30 15:41:36', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '183', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'step_number': '1', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '182', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'step_number': '2', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'id': '150', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'execution_type': '1', 'active': '1'}], 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'updater_id': '1', 'full_tc_external_id': 'pj_pos-1', 'name': 'test-n-登陆掌贝pos机', 'author_id': '1', 'layout': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'execution_type': '1', 'id': '149', 'creation_ts': '2016-07-27 18:32:10', 'node_order': '1000', 'updater_first_name': 'Testlink', 'active': '1'}]
2017-01-15 18:17:19,194 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 18:17:20,199 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:17:20,199 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '')
2017-01-15 18:17:20,200 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 18:17:20,201 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 18:17:20,201 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 18:17:20,201 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:17:20,202 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:17:20,204 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:17:20,204 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:17:20,205 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 18:17:20,208 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 18:17:20,208 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 18:17:20,208 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 18:17:20,209 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:17:20,209 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:17:20",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'检查': 'body', '输出': {'branch_id': 1}}" WHERE executed_history_id = 20170115181718 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:17:20,211 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 18:17:20,211 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 18:17:20,211 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:17:20,211 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:17:20,212 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:17:20,213 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 18:17:20,213 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 18:17:20,213 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 18:17:20,216 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 18:17:20,216 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 18:17:20,216 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 18:17:20,217 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:17:20,217 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:17:20",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'检查': 'body', '输出': {'serial_no': 2, 'device_no': 1}}" WHERE executed_history_id = 20170115181718 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:17:20,220 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 18:17:20,220 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 18:17:20,220 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:17:20,220 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:17:20,223 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 18:17:20,223 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 18:17:20,224 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:17:20,224 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:17:20,224 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 18:17:20,224 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 18:17:20,224 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 18:17:20,225 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 18:17:20,225 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 18:17:20,225 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 18:17:20,225 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 18:17:20,225 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 18:17:20,225 httpprotocol.py[line: 76] INFO: 请求头为：{'ProtocolVersion': '4.0', 'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]'}
2017-01-15 18:17:20,649 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 18:17:20,650 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 18:17:20,650 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:17:18 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:17:20,650 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:17:20,650 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 18:17:20,650 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 18:17:20,652 testcase.py[line: 130] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 18:17:20,652 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 18:17:20,653 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 18:17:20",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'ProtocolVersion': '4.0', 'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'匹配规则': '键值相等', '输出': {'OperatorId': {'operator': {'id': 'value'}}, 'Token': {'token': 'value'}}, '检查': 'body', '条件': [{'模式': {'success': True}, '消息': '登录失败,success不为true'}, {'模式': {'message': '成功'}, '消息': 'message不为成功'}, {'模式': {'code': '4001'}, '消息': 'code不为4001'}]}" WHERE executed_history_id = 20170115181718 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:17:20,656 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:17:20,657 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:17:20" WHERE executed_history_id = 20170115181718 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:17:20,660 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 18:17:20,660 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_json>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 126, in test_interface_of_json\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 登录失败,success不为true\n')])
2017-01-15 18:17:20,660 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 18:17:20,660 main.py[line: 115] INFO: 运行指定项目
2017-01-15 18:17:20,828 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 18:17:20,828 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 18:17:20,831 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 18:17:20,831 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 18:17:20,955 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 18:17:21,088 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 18:17:21,088 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 18:17:21,217 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['80', '126', '106', '114', '93', '102', '110', '88', '76', '120', '98'])
2017-01-15 18:17:21,358 testplan.py[line: 45] INFO: 获取测试用例信息 [{'tc_external_id': '2', 'version': '1', 'summary': '', 'updater_last_name': 'Administrator', 'testsuite_id': '79', 'is_open': '1', 'testcase_id': '80', 'importance': '2', 'status': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 18:16:14', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '82', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'execution_type': '1', 'active': '1'}], 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'updater_id': '1', 'full_tc_external_id': 'wecharno-2', 'name': 'test-n-点击商品', 'author_id': '1', 'layout': '1', 'preconditions': '', 'execution_type': '1', 'id': '81', 'creation_ts': '2016-07-20 11:05:03', 'node_order': '1000', 'updater_first_name': 'Testlink', 'active': '1'}]
2017-01-15 18:17:21,490 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:17:21,490 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:17:21,492 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2017-01-15 18:17:21,492 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2017-01-15 18:17:21,492 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2017-01-15 18:17:21,492 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:17:21,492 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:17:21,495 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:17:21,495 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:17:21,495 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:17:21,495 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('id', 26838), ('serial', '10549840601068216320')])
2017-01-15 18:17:21,495 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:17:21,495 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:17:21,496 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2017-01-15 18:17:21,496 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:17:21,548 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:17:21,548 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/css/malls/detail.css?v=5.0.0-faae2">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/mall/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320",
			mallConfigSerial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script src="/common/js/request.js?v=5.0.0-faae2"></script>
	<script src="/common/js/extend-number.js?v=5.0.0-faae2"></script>
	<script src="/component/iscroll/js/iscroll.js?v=5.0.0-faae2"></script>
	<script src="/component/swiper/js/swiper.min.js?v=5.0.0-faae2"></script>
	<script src="/js/malls/detail.js?v=5.0.0-faae2"></script>
</body>
</html>
2017-01-15 18:17:21,552 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:17:19 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3983'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=F73E952442DC8820862F40DFE035CAAD; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 18:17:21,552 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:17:21,553 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2017-01-15 18:17:21,553 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:17:21,553 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:17:21,553 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:17:21",step_action="{'\u65b9\u6cd5': 'get', 'url': '/goods/item?', '\u53c2\u6570': {'id': 26838, 'serial': '10549840601068216320'}}", expected_results="{'匹配规则': '包含字符串', '检查': 'body', '条件': [{'模式': '立即购买', '消息': '点击商品时无法打开购买页面'}]}" WHERE executed_history_id = 20170115181718 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:21,555 testcase.py[line: 162] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2017-01-15 18:17:21,556 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:17:21,556 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:17:21" WHERE executed_history_id = 20170115181718 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:21,712 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2017-01-15 18:17:21,987 testplan.py[line: 45] INFO: 获取测试用例信息 [{'tc_external_id': '12', 'version': '1', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'updater_last_name': 'Administrator', 'testsuite_id': '125', 'is_open': '1', 'testcase_id': '126', 'importance': '2', 'status': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 19:43:22', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '181', 'expected_results': '', 'step_number': '1', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '180', 'expected_results': '', 'step_number': '2', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n', 'id': '128', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'execution_type': '1', 'active': '1'}], 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'updater_id': '1', 'full_tc_external_id': 'wecharno-12', 'name': 'test-n-免费领取优惠券', 'author_id': '1', 'layout': '1', 'preconditions': '', 'execution_type': '1', 'id': '127', 'creation_ts': '2016-07-26 15:06:38', 'node_order': '1000', 'updater_first_name': 'Testlink', 'active': '1'}]
2017-01-15 18:17:22,113 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:17:22,113 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:17:22,114 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 18:17:22,114 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 18:17:22,114 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:17:22,115 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:17:22,115 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:17:22,115 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 18:17:22,121 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:17:22,121 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:17:22",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115181718 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:22,123 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 18:17:22,123 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:17:22,123 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:17:22,123 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:17:22,124 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:17:22,124 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:17:22,124 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 18:17:22,131 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:17:22,131 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:17:22",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115181718 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:22,132 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 18:17:22,132 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 18:17:22,133 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:17:22,133 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:17:22,134 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 18:17:22,134 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:17:22,134 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:17:22" WHERE executed_history_id = 20170115181718 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:22,261 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 18:17:22,592 testplan.py[line: 45] INFO: 获取测试用例信息 [{'tc_external_id': '8', 'version': '1', 'summary': '', 'updater_last_name': 'Administrator', 'testsuite_id': '105', 'is_open': '1', 'testcase_id': '106', 'importance': '2', 'status': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:33:09', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'id': '108', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'execution_type': '1', 'active': '1'}], 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'updater_id': '1', 'full_tc_external_id': 'wecharno-8', 'name': 'test-n-创建储值卡支付订单', 'author_id': '1', 'layout': '1', 'preconditions': '', 'execution_type': '1', 'id': '107', 'creation_ts': '2016-07-21 11:26:32', 'node_order': '1000', 'updater_first_name': 'Testlink', 'active': '1'}]
2017-01-15 18:17:22,786 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:17:22,787 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:17:22,788 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 18:17:22,788 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 18:17:22,788 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 18:17:22,788 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:17:22,789 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:17:22,790 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:17:22,790 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:17:22,791 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:17:22,791 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:17:22,791 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 18:17:22,791 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:17:22,792 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:17:22,792 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:17:22,792 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 18:17:22,792 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 18:17:22,793 httpprotocol.py[line: 76] INFO: 请求头为：{'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 18:17:22,838 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:17:22,838 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 18:17:22,838 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:17:20 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:17:22,838 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:17:22,839 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 18:17:22,839 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 18:17:22,840 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 18:17:22,840 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 18:17:22",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'匹配规则': '包含字符串', '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body', '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}]}" WHERE executed_history_id = 20170115181718 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:22,843 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:17:22,844 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:17:22" WHERE executed_history_id = 20170115181718 AND testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:23,022 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=106]的执行结果
2017-01-15 18:17:23,280 testplan.py[line: 45] INFO: 获取测试用例信息 [{'tc_external_id': '10', 'version': '1', 'summary': '', 'updater_last_name': 'Administrator', 'testsuite_id': '113', 'is_open': '1', 'testcase_id': '114', 'importance': '2', 'status': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:52:17', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'id': '116', 'expected_results': '', 'step_number': '1', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '117', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'execution_type': '1', 'active': '1'}], 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'updater_id': '1', 'full_tc_external_id': 'wecharno-10', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'author_id': '1', 'layout': '1', 'preconditions': '', 'execution_type': '1', 'id': '115', 'creation_ts': '2016-07-25 15:02:41', 'node_order': '1000', 'updater_first_name': 'Testlink', 'active': '1'}]
2017-01-15 18:17:23,413 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:17:23,413 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:17:23,414 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 18:17:23,414 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 18:17:23,414 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:17:23,414 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:17:23,414 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:17:23,415 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:17:23,576 global_function.py[line: 19] INFO: 获取测试用例信息 [{'tc_external_id': '8', 'version': '1', 'summary': '', 'updater_last_name': 'Administrator', 'testsuite_id': '105', 'is_open': '1', 'testcase_id': '106', 'importance': '2', 'status': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:33:09', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'id': '108', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'execution_type': '1', 'active': '1'}], 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'updater_id': '1', 'full_tc_external_id': 'wecharno-8', 'name': 'test-n-创建储值卡支付订单', 'author_id': '1', 'layout': '1', 'preconditions': '', 'execution_type': '1', 'id': '107', 'creation_ts': '2016-07-21 11:26:32', 'node_order': '1000', 'updater_first_name': 'Testlink', 'active': '1'}]
2017-01-15 18:17:23,728 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 18:17:23,967 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:17:23,967 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:17:23,968 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 18:17:23,969 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 18:17:23,969 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 18:17:23,969 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:17:23,969 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:17:23,970 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:17:23,970 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:17:23,970 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:17:23,970 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:17:23,970 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 18:17:23,971 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:17:23,971 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:17:23,971 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:17:23,971 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 18:17:23,971 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 18:17:23,971 httpprotocol.py[line: 76] INFO: 请求头为：{'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 18:17:24,019 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:17:24,019 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 18:17:24,019 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:17:21 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:17:24,020 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:17:24,020 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 18:17:24,021 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 18:17:24,021 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 18:17:24,022 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 18:17:23",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'匹配规则': '包含字符串', '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body', '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}]}" WHERE executed_history_id = 20170115181718 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:24,027 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:17:24,028 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:17:23" WHERE executed_history_id = 20170115181718 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:24,032 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 18:17:24,032 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=114, name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 18:17:24,033 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 18:17:24,033 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="无", runtime="2017-01-15 18:17:23",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 106, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u521b\u5efa\u50a8\u503c\u5361\u652f\u4ed8\u8ba2\u5355'}", expected_results="" WHERE executed_history_id = 20170115181718 AND testcase_id = 114 AND step_id = 116 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:24,039 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:17:24,039 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:17:23" WHERE executed_history_id = 20170115181718 AND testcase_id = 114 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:24,170 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=114]的执行结果
2017-01-15 18:17:24,419 testplan.py[line: 45] INFO: 获取测试用例信息 [{'tc_external_id': '5', 'version': '1', 'summary': '', 'updater_last_name': 'Administrator', 'testsuite_id': '91', 'is_open': '1', 'testcase_id': '93', 'importance': '2', 'status': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 18:05:21', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,</p>\n<p>\n\t&quot;用例id&quot;:88,</p>\n<p>\n\t&quot;用例名称&quot;:&quot;test-n-把商品加入购物车&quot;<br />\n\t}</p>\n<p>\n\t&nbsp;</p>\n', 'id': '95', 'expected_results': '', 'step_number': '1', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cart/delfromcart?&quot;,<br />\n\t&quot;参数&quot;:{&quot;strIds&quot;:&quot;[CaseStep.strIds]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '96', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品移出购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '178', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;[]&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'execution_type': '1', 'active': '1'}], 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'updater_id': '1', 'full_tc_external_id': 'wecharno-5', 'name': 'test-n-把商品移出购物车', 'author_id': '1', 'layout': '1', 'preconditions': '', 'execution_type': '1', 'id': '94', 'creation_ts': '2016-07-20 12:25:46', 'node_order': '1000', 'updater_first_name': 'Testlink', 'active': '1'}]
2017-01-15 18:17:24,570 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:17:24,571 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 93, 'test-n-把商品移出购物车', '微商城-把商品移出购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:17:24,572 testplan.py[line: 72] INFO: 开始执行测试用例[id=93，name=test-n-把商品移出购物车]
2017-01-15 18:17:24,572 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} 
2017-01-15 18:17:24,572 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:17:24,573 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:17:24,573 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 95, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} ', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:17:24,574 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:17:24,738 global_function.py[line: 19] INFO: 获取测试用例信息 [{'tc_external_id': '4', 'version': '1', 'summary': '', 'updater_last_name': 'Administrator', 'testsuite_id': '87', 'is_open': '1', 'testcase_id': '88', 'importance': '2', 'status': '1', 'author_last_name': 'Administrator', 'modification_ts': '2017-01-15 17:46:37', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '175', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '174', 'expected_results': '', 'step_number': '2', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'id': '90', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'id': '176', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'step_number': '4', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '177', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '5', 'execution_type': '1', 'active': '1'}], 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'updater_id': '1', 'full_tc_external_id': 'wecharno-4', 'name': 'test-n-把商品加入购物车', 'author_id': '1', 'layout': '1', 'preconditions': '', 'execution_type': '1', 'id': '89', 'creation_ts': '2016-07-20 12:07:40', 'node_order': '1000', 'updater_first_name': 'Testlink', 'active': '1'}]
2017-01-15 18:17:24,863 global_function.py[line: 39] INFO: 正在读取套件[id=87]的协议，host，端口配置...
2017-01-15 18:17:25,099 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:17:25,099 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 88, 'test-n-把商品加入购物车', '把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:17:25,100 global_function.py[line: 71] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 18:17:25,100 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 18:17:25,100 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 18:17:25,100 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:17:25,101 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:17:25,101 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:17:25,102 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:17:25,102 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 18:17:25,102 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 18:17:25,105 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 18:17:25,105 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 18:17:25,105 global_function.py[line: 86] ERROR: 运行用例出错 'ProgrammingError' object has no attribute 'replace'
2017-01-15 18:17:25,105 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=93, name=test-n-把商品移出购物车]
2017-01-15 18:17:25,105 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 18:17:25,105 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="执行用例出错 88", protocol_method="无", runtime="2017-01-15 18:17:24",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 88, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u628a\u5546\u54c1\u52a0\u5165\u8d2d\u7269\u8f66'}", expected_results="" WHERE executed_history_id = 20170115181718 AND testcase_id = 93 AND step_id = 95 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:25,107 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:17:25,107 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:17:24" WHERE executed_history_id = 20170115181718 AND testcase_id = 93 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:25,232 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=93]的执行结果
2017-01-15 18:17:25,498 testplan.py[line: 45] INFO: 获取测试用例信息 [{'tc_external_id': '7', 'version': '1', 'summary': '', 'updater_last_name': 'Administrator', 'testsuite_id': '79', 'is_open': '1', 'testcase_id': '102', 'importance': '2', 'status': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 18:14:53', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/mall/tobuy/1?&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:&quot;26838&quot;,&quot;amount&quot;:1,&quot;type&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '104', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;到店支付&quot;,&quot;消息&quot;:&quot;无法打开商品详情&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'execution_type': '1', 'active': '1'}], 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'updater_id': '1', 'full_tc_external_id': 'wecharno-7', 'name': 'test-n-点击立即购买按钮', 'author_id': '1', 'layout': '1', 'preconditions': '', 'execution_type': '1', 'id': '103', 'creation_ts': '2016-07-20 16:48:26', 'node_order': '1001', 'updater_first_name': 'Testlink', 'active': '1'}]
2017-01-15 18:17:25,639 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:17:25,640 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 102, 'test-n-点击立即购买按钮', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:17:25,641 testplan.py[line: 72] INFO: 开始执行测试用例[id=102，name=test-n-点击立即购买按钮]
2017-01-15 18:17:25,641 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}
2017-01-15 18:17:25,641 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}
2017-01-15 18:17:25,641 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:17:25,641 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 102, 'test-n-点击立即购买按钮', 'plan1_of_wechatno', 'pj_wechatno', 104, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:17:25,643 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:17:25,643 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:17:25,643 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:17:25,644 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', '26838'), ('amount', 1), ('type', 1), ('serial', '10549840601068216320')])
2017-01-15 18:17:25,644 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:17:25,644 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:17:25,644 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/mall/tobuy/1?mallGoodsId=26838&amount=1&type=1&serial=10549840601068216320
2017-01-15 18:17:25,644 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:17:26,060 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:17:26,060 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 
	 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta http-equiv="Expires" CONTENT="0">
<meta http-equiv="Cache-Control" CONTENT="no-cache">
<meta http-equiv="Pragma" CONTENT="no-cache">
<title>微商城</title>
<link rel="stylesheet" href="/css/mall/pure.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/grids-core.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/zepto.alert.css?v=5.0.0-faae2">

<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.ios7.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.animation.css?v=5.0.0-faae2">
</head>
<style type="text/css">
* {
	margin: 0;
	padding: 0;
}

html {
	color: #626262;
	overflow-y: auto;
	overflow-x: hidden;
}

body {
	margin-bottom: 20px;
	overflow-y: auto;
	overflow-x: hidden;
}

a {
	text-decoration: none;
}

ol,ul {
	list-style: outside none none;
}

.left {
	float: left;
}

.right {
	float: right;
}

.in-block {
	display: inline-block;
}

.orange {
	color: #c58d04;
}

.grey {
	color: #adadad;
}

.bg-color {
	background: #ececec;
}

#wrapper {
	width: 100%;
	margin: 0 auto;
}

.header {
	width: 100%;
}

.header ul {
	position:relative;
	overflow: hidden;
}

.header ul li {
	width: 50%;
	float: left;
	height: 2.8em;
	line-height: 2.8em;
	background: #fff;
	text-align: center;
	border-bottom:1px solid #f38b44;
	-moz-box-sizing:border-box; /* Firefox */
     -webkit-box-sizing:border-box; /* Safari */
     box-sizing:border-box;
}
.header ul .lines{
	position: absolute;
	width: 1%;
	height: 2.8em;
	line-height: 2.8em;
	border-right: 1px solid #FDE5D4;
	left: 49%;
	top: -1px;
 } 
.header ul li a {
	color: #8b898a;
}

.tab_content>div {
	height: auto;
	font-size: 0.8em;
	margin: 0.5em 0;
}

.empty-p {
	width: 80%;
	float: left;
	padding: 0.5em 0;
}

.has-p {
    width: 100%;
    margin: 0 auto;
    padding: 0 1em;
    height: auto;
    line-height: 2.5em;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -webkit-box-sizing: -webkit-border-box;
}
.has-p-one{
    background: url(/images/mall/contact.png) no-repeat left center;
    background-size: 12px 12px;
}
.has-p-two{
    background: url(/images/mall/take.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.has-p-three{
    background: url(/images/mall/time.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.input-right{
    position: relative;
}
.input-right-img{
    width: 1em;
    position: absolute;
    right: 0.6em;
    top: 0.3em;
}
#scheduledTime{
    width:11em;
    height: 2em;
    border:1px solid #a0a0a0;
    border-radius:4px;
    color:#a0a0a0;
    text-indent:.5em
}
.hiddens-p{
    text-overflow:ellipsis; 
    overflow:hidden; 
    white-space:nowrap;  
}

.right-dashed {
	border-left: 1px solid #eee;
	margin-top: 1em;
	padding-bottom:1em;
}

#edit {
	padding: 1em 0 1em 2em;
    width: 10px;
}

.header ul li.active{
    border-bottom: 4px solid #f38b44;
}
.header ul li.active a{
    color: #f38b44!important;
}
.buy_title{
	background:#f3f3f3;
	padding:0.3em 1em;
	margin: 0;
}
.content {
	width: 100%;
	background: #fff;
	overflow: hidden;	
	padding-bottom:8%;
}

.selectList {
	border-bottom: 1px solid #efefef;
	margin: 0 auto;
	overflow: hidden;
	padding: 0.5em 1em;
	font-size: 0.8em;
	clear:both;
}

.selectList img {
    display: inline-block;
    float: left;
    width: 25%;
    border-radius: 4px;
    -webkit-border-radius: 4px;
}

.button {
	display:block;	
	width: 99%;	
	height: 3em;
	color: #fff;
	border: none;
	border-radius: 4px;
	margin:0 auto 0.5em auto;
}

.addbtn {
	background: #33CC66;
}

.btn-wrap-5 {
	padding: 0 1em;
}
.buybtn {
	width: 100%;
	background: #f68d3c;
}

.footer {
	width: 100%;
	background: #fff;
	color: #b6b6b6;
	overflow: hidden;
	text-align: left;
	margin-bottom: 1em;
}

.all-end-button {
	width: 90%;
	margin: 1em auto 0.5em;
}

.all-end-button p:first-child {
	text-align: left;
}

.error-page{
	background: #ddd;
    padding-bottom: 2em;
}
.error-page img{
    margin:0 auto;
	padding-top: 2em;
}
.error-page p{
    text-align:center;
    color:#000;
    width:80%;
    margin:1em auto 2em;
}
#deliverFee{
	text-align:left;
	font-size:0.8em;
	color:#acb0af;
}
.order-div{
    margin-left: 26.8%;            
    position: relative;
}
.order-div>p:last-child{
    width: 100%;
    margin: 0;
    position: absolute;
    bottom: 0;
    left: 0;
}
.m-t-n{
    margin-top: 0;
}
.m-t-n>span{
    display: inline-block;
}
.m-t-n>span:first-child{
    width: 70%;
}
.m-t-n>span:last-child{
    width: 30%;
}
.mtn-span{
    float: right;
}
.t-r-span{
	text-align:right;
}
.ccc{
    color: #ccc;
}
.peisong{
    text-align: right;
    margin-bottom: 0;
    padding-right: 1em;
    padding-top: 0.4em;
}
.peisong-detail{
    color:#000;
}
.peisong-detail input{
    border: none;
}
.peisong-detail div>p{
    padding-left: 1.8em;
    padding-top: 0.8em;
    padding-bottom: 0.8em;
    margin: 0;
    clear:both;
}

.weipay{            
    background: url(/images/weixin2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}        
.peisong-detail div>p.pay{
    background: url(/images/money2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.cardpay{
    background: url(/images/cardpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.mdpay{
    background: url(/images/mdpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}

.peisong-detail div[class^="btn-wrap-"] {
	border-bottom: 1px solid #dadada;
	padding: 0 1em;
	height: 3em;
	position: relative;
}

.weipay,.pay,.mdpay,.cardpay{
    position: relative;
}
 .weipay>img,.mdpay>img,.pay>img,.cardpay>img,.zhifu input{
    width: 1.2em;
    height: 1.2em;
    position: absolute;
    right: 0;
    top: 50%;
    transform:translateY(-50%);
}

.pure-img-check {
	background: url(/images/weixuan2.png) no-repeat left center;
    background-size:1.05em 1.05em; 
    float: right;
    height: 1.05em;
    width: 1.05em;
}

.zhifu input{
    display: none;
}
#deliverFeeDiv, #FetchDiv {
	border-bottom: 1px solid #efefef;
    padding: 0.5em 1em;
}
#deliverFeeDiv p, #FetchDiv p{
	text-align:right;
}

#remark {
	padding: 0.5em 1em;
	height: 4em;
	font-size: 1.0em;
}

.tab-adress {
	position: relative;
}
.icon-wrap {
	/*float: right;*/
	position: absolute;
	top: 11px;
	right: 10px;
}
.icon-wrap-spe {
	top: 0;
}

/*toast提示*/
.toastBlock {
    display: none; 
    position: fixed;
    bottom: 50%;
    width: 100%;
    text-align: center;
    transition: opacity 1s ease-out;
    z-index: 19;
}
.toastBlock .toastContent {
    display: inline-block;
    padding: 18px;
    border-radius: 5px;
    font-size: 14px;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.7);
}
</style>
<body>
	<div id="wrapper">
		
			
			
			
				
					
					
						
						
						
						
						
					
					
				
				
			
			<div class="header">
				
					<ul class="tab">
						<li class='active' data='#deliverFeeDiv'><a href="#tab1">快递发货</a></li>						
						<li class=''><a href="#tab2">到店自提</a></li>
						<span class="lines"></span>
					</ul>
				
			</div>
			<p class="buy_title"></p>
			
			<div class="tab_container">
				<div id="tab1" class="tab_content pure-g" style="">
					<div class="pure-u-24-24 tab-adress j-tab-adress">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">17817738178<span>(17817738178)</span></span>
								</div>
								<div class="has-p">
									<span>配送地址：</span>
									<span class="pure-u-3-5">天津市县宁河县详细</span>
                                </div>

                                <span class="icon-wrap">
                                	
                                		
                                		
                                		<a class="url_adress" href="/toaddr/1?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
                                		</a>
                                		
                                	
                                </span>
							
							
						
					</div>
				</div>
				<div id="tab2" class="tab_content pure-g" style="display:none">
					<div class="pure-u-24-24">
						
							
								<div class="tab-adress j-tab-adress">
									<div class="has-p">
										<span>联系方式：</span>
										<span class="pure-u-3-5">452<span>(17817738178)</span></span>
									</div>
	                                <div class="has-p">
	                                	<span>门&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;店：</span>
	                                	<span class="pure-u-3-5">
	                                		广东省深圳市福田区
		                                	
		                                		Biu
		                                	
	                                	</span>
	                                </div>
	                                <span class="icon-wrap">
	                                	
	                                		
	                                		
	                                		<a class="url_adress" href="/toaddr/2?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
	                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
	                                		</a>
	                                		
	                                	
	                                </span>
                                </div>
                               	<div class="has-p">
                               		<span>到店时间：</span>
                               		<span class="input-right">
                               			<input type="text" id="scheduledTime" name="scheduledTime" class="text" placeholder="请选择"/><img src="/images/mall/input-right.png?v=5.0.0-faae2" class="input-right-img">
                               		</span>
                               	</div>
							
							
						
					</div>
				</div>
			</div>
			<p class="buy_title"></p>
			
			<div class="content">
				
					
						
							<div class="selectList">
								<img src="http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg"> 
								
									
									
										<div class="order-div">
											<p class="m-t-n"><span>接口-测试商品1</span><span class="mtn-span t-r-span">￥0.01</span></p>
											<p><span class="ccc mtn-span">X1</span></p>
                                        </div>	
									
								
							</div>
						
					
					
					
				
				<div id="deliverFeeDiv">
					 
						
						
							<p id="deliverFee">含运费：￥0.01</p>
							<p class="orange">合计：￥0.02</p>
						
					 
				</div>
				<div id="FetchDiv" style="display: none;">
					<p class="orange">合计：￥0.01</p>
				</div>
				<div id="remark">
					<span class="beizhu" style="float:left">备注：</span>
                   	<span class="beizhulan">
                   		<textarea rows="3" placeholder="可于此处给卖家留言备注" style="border:0;width: 85%;"></textarea>
                   	</span>
				</div>
			</div>
			<p class="buy_title"></p>
			<div class="footer">
				<div class="peisong-detail zhifu">
                	
                        <div class="btn-wrap-1">
                         	<p class="weipay">微信支付<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="1"/>
                         	</p>
                        </div>
                    
                  	
                  	
                        <div class="btn-wrap-2" style="">
                         	<p class="pay">货到付款<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="3"/>
                         	</p>
                        </div>
                   	
		
                    
                        <div class="btn-wrap-3" style="display:none">
                        	<p class="mdpay">到店支付<span class="pure-img-check"></span>
                        		<input type="radio" name="zhifu" value="2"/>
                        	</p>
                        </div>
                   	
                   	
                   	
                        <div class="btn-wrap-4">
                       		<p class="cardpay">储值卡支付<span class="pure-img-check"></span>
                       			<input type="radio" name="zhifu" value="4"/>
                       		</p>
                        </div>
                   	
                </div>
			</div>
			<div class="btn-wrap-5">
				<input type="button" class="button buybtn submit" value="确认提交" />
			</div>

			<div id="toastId" class="toastBlock">
			    <span class="toastContent"></span>
			</div>
			
		
	</div>
	<script type="text/javascript" src="/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/touch.js?v=5.0.0-faae2"></script>
    
	<script type="text/javascript" src="/js/mall/zepto.alert.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mall.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.zepto.js?v=5.0.0-faae2" ></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.core.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.scroller.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.datetime.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.i18n.zh.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			$("input[name='zhifu']:checked").prev('.pure-img').attr('src','/images/check.png');
			var tab = parseInt("1");
			/* if(tab == 1){
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else if (tab == 0){
			    $("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} else if(parseInt("1") != 0){
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} */
			
			if ("true" == "true" && 1 == 1) {
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else {
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			}
			
			// 控制显示图片比例
			var img_left_heights = $(".selectList img").width()*(0.75);
			$(".selectList img,.order-div").css('height',img_left_heights);
			
			// 取货日期
			var now = new Date();
            $('#scheduledTime').mobiscroll().datetime({
                minDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()+1),
                maxDate: new Date(now.getFullYear(), now.getMonth()+3, now.getDate()),
                stepMinute: 30,
                dateOrder :"yymmdd",
                dateFormat:"yy-mm-dd",
                timeWheels:"HHii",
                timeFormat:"HH:ii",
                //invalid: [{ start: '00:00', end: '08:00' },{ start: '22:00', end: '23:59' }],
                theme: 'ios7',
                lang: 'zh',
                display: 'bottom',
                mode: 'mixed'
            });
            $('#scheduledTime').click(function(){
                $('#scheduledTime').mobiscroll('show'); 
                return false;
            });
            
			$("ul li").click(function() {
				$("ul li").removeClass("active");
				$(this).addClass("active");
				if($(this).attr("data")=="#deliverFeeDiv"){
					$("#deliverFeeDiv").show();
					$("#FetchDiv").hide();
				}else{
					$("#deliverFeeDiv").hide();
					$("#FetchDiv").show();
				}
				$(".tab_content").hide();
				var href = $(this).find("a").attr("href");
				$(href).show();
				
				if(href.endWith("tab1")) {
					$(".btn-wrap-2").show();
					$(".btn-wrap-3").hide();
				} else if(href.endWith("tab2")) {
					$(".btn-wrap-2").hide();
					$(".btn-wrap-3").show();
				}
				//清空已选择的支付方式
				$("input[name='zhifu']").prop("checked", false);
				$(".zhifu .pure-img-check").css('background-image','url(/images/weixuan2.png)');
				return false;
			});
			//商户设置的满额包邮价
			/* var noDeliverFee = toPrice(parseFloat("200")/100);
			var totalFee = parseFloat("0.01");
			if(totalFee > noDeliverFee){
				$("#deliverFeeDiv .orange").text("合计：￥"+ totalFee);
				$("#deliverFee").text("含运费：￥0.00");
			} */
			$('.zhifu>div').click(function(){
	            $("input[name=zhifu]").prop("checked", false);
	            $(".pure-img-check").css('backgroundImage','url(/images/weixuan2.png)');
	            var img_obj = $(this).find('.pure-img-check');
	            var backgroundImage = img_obj.css('background-image');
	            var input_obj = $(this).find('input');
	            if(backgroundImage.indexOf("weixuan2.png") > 0){
	                img_obj.css('background-image','url(/images/check.png)');
	                input_obj.prop("checked", "checked");
	            }else{
	                img_obj.css('background-image','url(/images/weixuan2.png)');
	                input_obj.prop("checked", false);
	            }
	        });


	        $(".j-tab-adress").click(function(event) {
	        	var _url = $(this).find('.url_adress').prop("href");

	        	window.location.href = _url;
	        });
		});
		
		function validateRemark(){
			var text = filtEmoji($('.beizhulan textarea').val());
			if(text != "" && text != undefined){
				if(text.length>30){
					$.dialog({
                        widths : '80%',
                        content : '您输入的备注过长，请不要超过30个字',
                        title : 'no',
                        fullok : function() {
                            return true;
                        },                       
                        lock : true
                    });	
					return false;
				}
				return true;
			}
			return true;
		}
		function filtEmoji (str) {
			return unescape(escape(str).replace(/\%uD.{3}/g, ''));
		}
		
		$(".submit").click(function(event){
			var payType = $("input[name='zhifu']:checked").val();
			if(null == payType || "" == payType || typeof(payType) == "undefined") {
       		 $.dialog({
                    widths : '80%',
                    content : '请选择支付方式',
                    title : 'no',
                    fullok : function() {
                        return true;
                    },                       
                    lock : true
                });
       			return;
       		}
			$.dialog({
                content : "确认提交订单？",
                title : "no",
                okText: '取消',
                cancelText : '确定', 
                ok : function() {
                	$(".ft-right").removeAttr("disabled");
                	return;
                },
                cancel : function() {                        	
               		
               		if(payType == 1){
               			if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				doAlert("no", "无效物流方式");
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@78c0ec2a";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/1", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "id=" + result.attach;
            	    			strParams += "&serial=10549840601068216320";
            	    			if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
            	        	});
            			}
               		}
               		
    				if(payType == 2){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@78c0ec2a";
    					if(shopBranch == "") {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					var _fetchTime = $("#scheduledTime").val();
    					if(null == _fetchTime || "" == _fetchTime) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请选择取货时间',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						
    						var _remark = filtEmoji($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							fetchTime : _fetchTime,
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/2/2", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 3){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑收货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });

    						var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
    						// var _remark = encodeURI($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/1/3", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 4){
    					if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				$.dialog({
        	                    widths : '80%',
        	                    content : '无效物流方式',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@78c0ec2a";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
            			// var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/4", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "?orderId=" + result.attach;
            					if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            					strParams += "&serial=10549840601068216320";
                				window.location.href = "/pay/5"+strParams;
            	        	});
            			}
            			
    				}
    				
                },
                lock : true
            });
		});
		
		//微信支付
		/* $(".payUseWX").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			var type = 0;
			$(".tab_content").each(function(){
				if($(this).css("display") != "none") {
					var attrId = $(this).attr("id");
					if(attrId == "tab1") {
						type = 1;//快递取货
					} else if(attrId == "tab2") {
						type = 2;//门店自提
					}
				}
			});
			if(type <= 0) {
				doAlert("no", "无效物流方式");
				return;
			}
			if(type == 1) {
				if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑收货地址");
					return;
				}
			}
			var _fetchTime = "";
			if(type == 2) {
				if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑取货地址");
					return;
				}
				_fetchTime = $("#scheduledTime").val();
				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
					doAlert("no", "请选择取货时间");
					return;
				}
				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@78c0ec2a";
				if(shopBranch == "") {
					doAlert("no", "请编辑取货地址");
					return;
				}
			}
			
			var _remark = encodeURI($(".beizhulan").find("textarea").val());
			var params = {
				serial : "10549840601068216320",
				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
				fm : "1",
				mallGoodsId : "26838",
				amount : "1",
				cartIds : "",
				fetchTime : _fetchTime,
				remark : _remark
			};
			if(parseInt("1") == 1 && parseInt("1") == 2){
				var standardId = "";
				if(standardId != null && standardId != undefined){
					params.standardId = standardId;
				}
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				$.post("/cmorder/" + type+ "/1", params, function(result){
					dialog.close();
					
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					
					var strParams = "id=" + result.attach;
	    			strParams += "&serial=10549840601068216320";
	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
	        	});
			}
		}); */
		//货到付款
		/* $(".payAfrecv").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑收货地址");
				return;
			}
			
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				var _remark = encodeURI($(".beizhulan").find("textarea").val());
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/1/3", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
	        	});
			}
		}); */
		//到店支付
		// $(".payInshop").click(function(event) {
			/* if($(this).prop("disabled") == true)
        		return false;
			
			var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@78c0ec2a";
			if(shopBranch == "") {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			var _fetchTime = $("#scheduledTime").val();
			if(null == _fetchTime || "" == _fetchTime) {
				doAlert("no", "请选择取货时间");
				return;
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				
				var _remark = $(".beizhulan").find("textarea").val();
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					fetchTime : _fetchTime,
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/2/2", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
	        	});
			} */
		// });
	
		// toast提示
		var toastTime=null;
		var displayTime=null;

		function setToast(html) {
		    if (toastTime != null) {
		        clearTimeout(toastTime);
		        clearTimeout(displayTime);
		    }
		    // $('toastId').style.display = 'block';
		    // $('toastId').style.opacity = 1;
		    $('#toastId').css({
		        display: 'block',
		        opacity: 1
		    });
		    $('#toastId .toastContent').text(html);

		    toastTime = setTimeout(function() {
		        // $('toastId').style.opacity = 0;
		        $('#toastId').css("opacity", 0);
		        displayTime = setTimeout(function() {
		            // $('toastId').style.display='none';
		            $('#toastId').css("display", "none");
		        }, 1000);
		    }, 1000);
		}

		function toastDisplay(str) {
		    setToast(str);
		}
	</script>
</body>
</html>
<!--加入判断用户是否关注公众号功能 add by lipengfei at 2015-11-9  -->
  	
	<script type="text/javascript" src="/js/bind/banner.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			//var SHOP_SERIAL = getCookie("SHOP_SERIAL");
			var SHOP_SERIAL = "10549840601068216320";
			if(null != SHOP_SERIAL && SHOP_SERIAL != ""){
				$.ajax({
					url : '/saofu_mobile/checkUserBindStatus',
					data : {
						"serial" : SHOP_SERIAL
					},
					type : 'post',
					cache : false,
					dataType : 'json',
					success : function(data) {
						if (data != null) {
							var guildFocusStr = data.guildFocusStr;
							if(guildFocusStr != null && guildFocusStr == "1"){
								var hasBindedShop = data.hasBindedShop;
								if(hasBindedShop == "0"){
									var qrName = data.QRPublicName;
									var qrUrl = data.QRCodeURL;
									if(qrName != "" && qrUrl != ""){
										var params = qrName+"**"+qrUrl;
										followModule(params);
									}
								}
							}
						} 
					},
					error : function() {
					}
				});
			}
		});
				
	</script>

2017-01-15 18:17:26,066 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:17:23 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=98A2CFB6A4FC4BA293DF6EF8D3E67A21; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 18:17:26,066 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:17:26,066 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：到店支付
2017-01-15 18:17:26,066 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:17:26,066 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:17:26,066 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:17:25",step_action="{'\u65b9\u6cd5': 'get', 'url': '/mall/tobuy/1?', '\u53c2\u6570': {'mallGoodsId': '26838', 'amount': 1, 'type': 1, 'serial': '10549840601068216320'}}", expected_results="{'匹配规则': '包含字符串', '检查': 'body', '条件': [{'模式': '到店支付', '消息': '无法打开商品详情'}]}" WHERE executed_history_id = 20170115181718 AND testcase_id = 102 AND step_id = 104 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:26,070 testcase.py[line: 162] INFO: 测试用例[id=102, name=test-n-点击立即购买按钮]执行成功
2017-01-15 18:17:26,070 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:17:26,070 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:17:25" WHERE executed_history_id = 20170115181718 AND testcase_id = 102 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:26,182 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=102]的执行结果
2017-01-15 18:17:26,473 testplan.py[line: 45] INFO: 获取测试用例信息 [{'tc_external_id': '9', 'version': '1', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n', 'updater_last_name': 'Administrator', 'testsuite_id': '109', 'is_open': '1', 'testcase_id': '110', 'importance': '2', 'status': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-07-29 17:13:06', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;style&quot;:&quot;testcase&quot;,<br />\n\t<br />\n\t&quot;testcase_id&quot;:114,<br />\n\t<br />\n\t&quot;testcase_name&quot;:&quot;test-n-提交储值卡支付订单-pay5重定向&quot;<br />\n\t}</p>\n', 'id': '112', 'expected_results': '<p>\n\t{&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'step_number': '1', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_without_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:-1,&quot;yhCardType&quot;:-1}<br />\n\t}</p>\n', 'id': '119', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;}</p>\n', 'step_number': '3', 'execution_type': '1', 'active': '1'}], 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'updater_id': '1', 'full_tc_external_id': 'wecharno-9', 'name': 'test-n-储值卡支付-不使用优惠，会员账户支付', 'author_id': '1', 'layout': '1', 'preconditions': '', 'execution_type': '1', 'id': '111', 'creation_ts': '2016-07-22 14:48:17', 'node_order': '2', 'updater_first_name': 'Testlink', 'active': '0'}]
2017-01-15 18:17:26,625 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:17:26,625 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 110, 'test-n-储值卡支付-不使用优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:17:26,627 testplan.py[line: 72] INFO: 开始执行测试用例[id=110，name=test-n-储值卡支付-不使用优惠，会员账户支付]
2017-01-15 18:17:26,627 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-不使用优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 18:17:26,627 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:17:26,627 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 18:17:26" WHERE executed_history_id = 20170115181718 AND testcase_id = 110 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:17:26,795 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=110]的执行结果
2017-01-15 18:17:26,928 testplan.py[line: 45] INFO: 获取测试用例信息 [{'tc_external_id': '4', 'version': '1', 'summary': '', 'updater_last_name': 'Administrator', 'testsuite_id': '87', 'is_open': '1', 'testcase_id': '88', 'importance': '2', 'status': '1', 'author_last_name': 'Administrator', 'modification_ts': '2017-01-15 17:46:37', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '175', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '174', 'expected_results': '', 'step_number': '2', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'id': '90', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '3', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'id': '176', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'step_number': '4', 'execution_type': '1', 'active': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '177', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'step_number': '5', 'execution_type': '1', 'active': '1'}], 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_login': 'admin', 'author_first_name': 'Testlink', 'updater_id': '1', 'full_tc_external_id': 'wecharno-4', 'name': 'test-n-把商品加入购物车', 'author_id': '1', 'layout': '1', 'preconditions': '', 'execution_type': '1', 'id': '89', 'creation_ts': '2016-07-20 12:07:40', 'node_order': '1000', 'updater_first_name': 'Testlink', 'active': '1'}]
2017-01-15 18:17:27,040 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:17:27,040 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:17:27,041 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 18:17:27,041 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 18:17:27,041 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 18:17:27,041 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:17:27,041 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181718', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:17:27,042 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:17:27,042 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:17:27,043 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 18:17:27,043 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 18:17:27,046 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 18:17:27,046 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 18:19:25,338 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 18:19:25,338 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 18:19:25,353 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 18:19:25,357 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 18:19:25,418 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 18:19:25,418 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 18:19:25,420 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 18:19:25,420 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 18:19:25,421 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 18:19:25,422 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 18:19:25,422 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 18:19:25,566 global_function.py[line: 19] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-登陆掌贝pos机', 'importance': '2', 'tc_external_id': '1', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '147', 'author_first_name': 'Testlink', 'full_tc_external_id': 'pj_pos-1', 'updater_id': '1', 'status': '1', 'modification_ts': '2016-11-30 15:41:36', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '<p>\n\t初始化用例</p>\n', 'summary': '', 'updater_first_name': 'Testlink', 'id': '149', 'author_id': '1', 'steps': [{'id': '183', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1'}, {'id': '182', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2'}, {'id': '150', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'step_number': '3'}], 'execution_type': '1', 'active': '1', 'node_order': '1000', 'testcase_id': '148', 'creation_ts': '2016-07-27 18:32:10'}]
2017-01-15 18:19:25,751 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 18:19:26,495 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:26,495 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '')
2017-01-15 18:19:26,496 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 18:19:26,496 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 18:19:26,497 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 18:19:26,497 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:26,497 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:26,498 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:19:26,498 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:19:26,498 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 18:19:26,501 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 18:19:26,501 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 18:19:26,501 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 18:19:26,502 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:19:26,502 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:19:26",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115181925 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:19:26,504 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 18:19:26,504 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 18:19:26,504 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:26,504 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:26,505 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:19:26,505 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 18:19:26,505 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 18:19:26,506 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 18:19:26,509 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 18:19:26,509 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 18:19:26,509 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 18:19:26,509 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:19:26,509 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:19:26",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'serial_no': 2, 'device_no': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115181925 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:19:26,511 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 18:19:26,511 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 18:19:26,511 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:26,512 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:26,513 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 18:19:26,513 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 18:19:26,513 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:19:26,513 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:19:26,513 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 18:19:26,513 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 18:19:26,513 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 18:19:26,513 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 18:19:26,514 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 18:19:26,514 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 18:19:26,514 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 18:19:26,514 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 18:19:26,514 httpprotocol.py[line: 76] INFO: 请求头为：{'DeviceId': '[CaseStep.device_no]', 'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0', 'Content-Type': 'application/json;charset=utf-8'}
2017-01-15 18:19:26,907 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 18:19:26,907 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 18:19:26,907 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:19:24 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:19:26,907 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:19:26,907 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 18:19:26,907 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 18:19:26,909 testcase.py[line: 131] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 18:19:26,909 testcase.py[line: 138] INFO: 正在更新步骤执行结果
2017-01-15 18:19:26,909 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 18:19:26",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'DeviceId': '[CaseStep.device_no]', 'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0', 'Content-Type': 'application/json;charset=utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'条件': [{'消息': '登录失败,success不为true', '模式': {'success': True}}, {'消息': 'message不为成功', '模式': {'message': '成功'}}, {'消息': 'code不为4001', '模式': {'code': '4001'}}], '输出': {'OperatorId': {'operator': {'id': 'value'}}, 'Token': {'token': 'value'}}, '检查': 'body', '匹配规则': '键值相等'}" WHERE executed_history_id = 20170115181925 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:19:26,911 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:19:26,911 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:19:26" WHERE executed_history_id = 20170115181925 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:19:26,912 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 18:19:26,912 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_json>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 126, in test_interface_of_json\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 登录失败,success不为true\n')])
2017-01-15 18:19:26,912 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 18:19:26,912 main.py[line: 115] INFO: 运行指定项目
2017-01-15 18:19:27,032 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 18:19:27,032 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 18:19:27,034 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 18:19:27,034 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 18:19:27,162 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 18:19:27,340 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 18:19:27,340 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 18:19:27,508 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['102', '106', '93', '76', '120', '114', '80', '98', '126', '110', '88'])
2017-01-15 18:19:27,639 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-点击立即购买按钮', 'importance': '2', 'tc_external_id': '7', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '79', 'author_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-7', 'updater_id': '1', 'status': '1', 'modification_ts': '2016-11-29 18:14:53', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '', 'summary': '', 'updater_first_name': 'Testlink', 'id': '103', 'author_id': '1', 'steps': [{'id': '104', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;到店支付&quot;,&quot;消息&quot;:&quot;无法打开商品详情&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/mall/tobuy/1?&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:&quot;26838&quot;,&quot;amount&quot;:1,&quot;type&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '1'}], 'execution_type': '1', 'active': '1', 'node_order': '1001', 'testcase_id': '102', 'creation_ts': '2016-07-20 16:48:26'}]
2017-01-15 18:19:27,755 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:27,755 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 102, 'test-n-点击立即购买按钮', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:19:27,756 testplan.py[line: 72] INFO: 开始执行测试用例[id=102，name=test-n-点击立即购买按钮]
2017-01-15 18:19:27,756 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}
2017-01-15 18:19:27,757 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}
2017-01-15 18:19:27,757 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:27,757 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 102, 'test-n-点击立即购买按钮', 'plan1_of_wechatno', 'pj_wechatno', 104, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:27,759 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:19:27,759 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:19:27,759 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:19:27,759 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', '26838'), ('amount', 1), ('type', 1), ('serial', '10549840601068216320')])
2017-01-15 18:19:27,759 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:19:27,760 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:19:27,760 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/mall/tobuy/1?mallGoodsId=26838&amount=1&type=1&serial=10549840601068216320
2017-01-15 18:19:27,760 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:19:28,158 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:19:28,158 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 
	 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta http-equiv="Expires" CONTENT="0">
<meta http-equiv="Cache-Control" CONTENT="no-cache">
<meta http-equiv="Pragma" CONTENT="no-cache">
<title>微商城</title>
<link rel="stylesheet" href="/css/mall/pure.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/grids-core.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/zepto.alert.css?v=5.0.0-faae2">

<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.ios7.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.animation.css?v=5.0.0-faae2">
</head>
<style type="text/css">
* {
	margin: 0;
	padding: 0;
}

html {
	color: #626262;
	overflow-y: auto;
	overflow-x: hidden;
}

body {
	margin-bottom: 20px;
	overflow-y: auto;
	overflow-x: hidden;
}

a {
	text-decoration: none;
}

ol,ul {
	list-style: outside none none;
}

.left {
	float: left;
}

.right {
	float: right;
}

.in-block {
	display: inline-block;
}

.orange {
	color: #c58d04;
}

.grey {
	color: #adadad;
}

.bg-color {
	background: #ececec;
}

#wrapper {
	width: 100%;
	margin: 0 auto;
}

.header {
	width: 100%;
}

.header ul {
	position:relative;
	overflow: hidden;
}

.header ul li {
	width: 50%;
	float: left;
	height: 2.8em;
	line-height: 2.8em;
	background: #fff;
	text-align: center;
	border-bottom:1px solid #f38b44;
	-moz-box-sizing:border-box; /* Firefox */
     -webkit-box-sizing:border-box; /* Safari */
     box-sizing:border-box;
}
.header ul .lines{
	position: absolute;
	width: 1%;
	height: 2.8em;
	line-height: 2.8em;
	border-right: 1px solid #FDE5D4;
	left: 49%;
	top: -1px;
 } 
.header ul li a {
	color: #8b898a;
}

.tab_content>div {
	height: auto;
	font-size: 0.8em;
	margin: 0.5em 0;
}

.empty-p {
	width: 80%;
	float: left;
	padding: 0.5em 0;
}

.has-p {
    width: 100%;
    margin: 0 auto;
    padding: 0 1em;
    height: auto;
    line-height: 2.5em;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -webkit-box-sizing: -webkit-border-box;
}
.has-p-one{
    background: url(/images/mall/contact.png) no-repeat left center;
    background-size: 12px 12px;
}
.has-p-two{
    background: url(/images/mall/take.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.has-p-three{
    background: url(/images/mall/time.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.input-right{
    position: relative;
}
.input-right-img{
    width: 1em;
    position: absolute;
    right: 0.6em;
    top: 0.3em;
}
#scheduledTime{
    width:11em;
    height: 2em;
    border:1px solid #a0a0a0;
    border-radius:4px;
    color:#a0a0a0;
    text-indent:.5em
}
.hiddens-p{
    text-overflow:ellipsis; 
    overflow:hidden; 
    white-space:nowrap;  
}

.right-dashed {
	border-left: 1px solid #eee;
	margin-top: 1em;
	padding-bottom:1em;
}

#edit {
	padding: 1em 0 1em 2em;
    width: 10px;
}

.header ul li.active{
    border-bottom: 4px solid #f38b44;
}
.header ul li.active a{
    color: #f38b44!important;
}
.buy_title{
	background:#f3f3f3;
	padding:0.3em 1em;
	margin: 0;
}
.content {
	width: 100%;
	background: #fff;
	overflow: hidden;	
	padding-bottom:8%;
}

.selectList {
	border-bottom: 1px solid #efefef;
	margin: 0 auto;
	overflow: hidden;
	padding: 0.5em 1em;
	font-size: 0.8em;
	clear:both;
}

.selectList img {
    display: inline-block;
    float: left;
    width: 25%;
    border-radius: 4px;
    -webkit-border-radius: 4px;
}

.button {
	display:block;	
	width: 99%;	
	height: 3em;
	color: #fff;
	border: none;
	border-radius: 4px;
	margin:0 auto 0.5em auto;
}

.addbtn {
	background: #33CC66;
}

.btn-wrap-5 {
	padding: 0 1em;
}
.buybtn {
	width: 100%;
	background: #f68d3c;
}

.footer {
	width: 100%;
	background: #fff;
	color: #b6b6b6;
	overflow: hidden;
	text-align: left;
	margin-bottom: 1em;
}

.all-end-button {
	width: 90%;
	margin: 1em auto 0.5em;
}

.all-end-button p:first-child {
	text-align: left;
}

.error-page{
	background: #ddd;
    padding-bottom: 2em;
}
.error-page img{
    margin:0 auto;
	padding-top: 2em;
}
.error-page p{
    text-align:center;
    color:#000;
    width:80%;
    margin:1em auto 2em;
}
#deliverFee{
	text-align:left;
	font-size:0.8em;
	color:#acb0af;
}
.order-div{
    margin-left: 26.8%;            
    position: relative;
}
.order-div>p:last-child{
    width: 100%;
    margin: 0;
    position: absolute;
    bottom: 0;
    left: 0;
}
.m-t-n{
    margin-top: 0;
}
.m-t-n>span{
    display: inline-block;
}
.m-t-n>span:first-child{
    width: 70%;
}
.m-t-n>span:last-child{
    width: 30%;
}
.mtn-span{
    float: right;
}
.t-r-span{
	text-align:right;
}
.ccc{
    color: #ccc;
}
.peisong{
    text-align: right;
    margin-bottom: 0;
    padding-right: 1em;
    padding-top: 0.4em;
}
.peisong-detail{
    color:#000;
}
.peisong-detail input{
    border: none;
}
.peisong-detail div>p{
    padding-left: 1.8em;
    padding-top: 0.8em;
    padding-bottom: 0.8em;
    margin: 0;
    clear:both;
}

.weipay{            
    background: url(/images/weixin2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}        
.peisong-detail div>p.pay{
    background: url(/images/money2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.cardpay{
    background: url(/images/cardpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.mdpay{
    background: url(/images/mdpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}

.peisong-detail div[class^="btn-wrap-"] {
	border-bottom: 1px solid #dadada;
	padding: 0 1em;
	height: 3em;
	position: relative;
}

.weipay,.pay,.mdpay,.cardpay{
    position: relative;
}
 .weipay>img,.mdpay>img,.pay>img,.cardpay>img,.zhifu input{
    width: 1.2em;
    height: 1.2em;
    position: absolute;
    right: 0;
    top: 50%;
    transform:translateY(-50%);
}

.pure-img-check {
	background: url(/images/weixuan2.png) no-repeat left center;
    background-size:1.05em 1.05em; 
    float: right;
    height: 1.05em;
    width: 1.05em;
}

.zhifu input{
    display: none;
}
#deliverFeeDiv, #FetchDiv {
	border-bottom: 1px solid #efefef;
    padding: 0.5em 1em;
}
#deliverFeeDiv p, #FetchDiv p{
	text-align:right;
}

#remark {
	padding: 0.5em 1em;
	height: 4em;
	font-size: 1.0em;
}

.tab-adress {
	position: relative;
}
.icon-wrap {
	/*float: right;*/
	position: absolute;
	top: 11px;
	right: 10px;
}
.icon-wrap-spe {
	top: 0;
}

/*toast提示*/
.toastBlock {
    display: none; 
    position: fixed;
    bottom: 50%;
    width: 100%;
    text-align: center;
    transition: opacity 1s ease-out;
    z-index: 19;
}
.toastBlock .toastContent {
    display: inline-block;
    padding: 18px;
    border-radius: 5px;
    font-size: 14px;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.7);
}
</style>
<body>
	<div id="wrapper">
		
			
			
			
				
					
					
						
						
						
						
						
					
					
				
				
			
			<div class="header">
				
					<ul class="tab">
						<li class='active' data='#deliverFeeDiv'><a href="#tab1">快递发货</a></li>						
						<li class=''><a href="#tab2">到店自提</a></li>
						<span class="lines"></span>
					</ul>
				
			</div>
			<p class="buy_title"></p>
			
			<div class="tab_container">
				<div id="tab1" class="tab_content pure-g" style="">
					<div class="pure-u-24-24 tab-adress j-tab-adress">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">17817738178<span>(17817738178)</span></span>
								</div>
								<div class="has-p">
									<span>配送地址：</span>
									<span class="pure-u-3-5">天津市县宁河县详细</span>
                                </div>

                                <span class="icon-wrap">
                                	
                                		
                                		
                                		<a class="url_adress" href="/toaddr/1?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
                                		</a>
                                		
                                	
                                </span>
							
							
						
					</div>
				</div>
				<div id="tab2" class="tab_content pure-g" style="display:none">
					<div class="pure-u-24-24">
						
							
								<div class="tab-adress j-tab-adress">
									<div class="has-p">
										<span>联系方式：</span>
										<span class="pure-u-3-5">452<span>(17817738178)</span></span>
									</div>
	                                <div class="has-p">
	                                	<span>门&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;店：</span>
	                                	<span class="pure-u-3-5">
	                                		广东省深圳市福田区
		                                	
		                                		Biu
		                                	
	                                	</span>
	                                </div>
	                                <span class="icon-wrap">
	                                	
	                                		
	                                		
	                                		<a class="url_adress" href="/toaddr/2?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
	                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
	                                		</a>
	                                		
	                                	
	                                </span>
                                </div>
                               	<div class="has-p">
                               		<span>到店时间：</span>
                               		<span class="input-right">
                               			<input type="text" id="scheduledTime" name="scheduledTime" class="text" placeholder="请选择"/><img src="/images/mall/input-right.png?v=5.0.0-faae2" class="input-right-img">
                               		</span>
                               	</div>
							
							
						
					</div>
				</div>
			</div>
			<p class="buy_title"></p>
			
			<div class="content">
				
					
						
							<div class="selectList">
								<img src="http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg"> 
								
									
									
										<div class="order-div">
											<p class="m-t-n"><span>接口-测试商品1</span><span class="mtn-span t-r-span">￥0.01</span></p>
											<p><span class="ccc mtn-span">X1</span></p>
                                        </div>	
									
								
							</div>
						
					
					
					
				
				<div id="deliverFeeDiv">
					 
						
						
							<p id="deliverFee">含运费：￥0.01</p>
							<p class="orange">合计：￥0.02</p>
						
					 
				</div>
				<div id="FetchDiv" style="display: none;">
					<p class="orange">合计：￥0.01</p>
				</div>
				<div id="remark">
					<span class="beizhu" style="float:left">备注：</span>
                   	<span class="beizhulan">
                   		<textarea rows="3" placeholder="可于此处给卖家留言备注" style="border:0;width: 85%;"></textarea>
                   	</span>
				</div>
			</div>
			<p class="buy_title"></p>
			<div class="footer">
				<div class="peisong-detail zhifu">
                	
                        <div class="btn-wrap-1">
                         	<p class="weipay">微信支付<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="1"/>
                         	</p>
                        </div>
                    
                  	
                  	
                        <div class="btn-wrap-2" style="">
                         	<p class="pay">货到付款<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="3"/>
                         	</p>
                        </div>
                   	
		
                    
                        <div class="btn-wrap-3" style="display:none">
                        	<p class="mdpay">到店支付<span class="pure-img-check"></span>
                        		<input type="radio" name="zhifu" value="2"/>
                        	</p>
                        </div>
                   	
                   	
                   	
                        <div class="btn-wrap-4">
                       		<p class="cardpay">储值卡支付<span class="pure-img-check"></span>
                       			<input type="radio" name="zhifu" value="4"/>
                       		</p>
                        </div>
                   	
                </div>
			</div>
			<div class="btn-wrap-5">
				<input type="button" class="button buybtn submit" value="确认提交" />
			</div>

			<div id="toastId" class="toastBlock">
			    <span class="toastContent"></span>
			</div>
			
		
	</div>
	<script type="text/javascript" src="/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/touch.js?v=5.0.0-faae2"></script>
    
	<script type="text/javascript" src="/js/mall/zepto.alert.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mall.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.zepto.js?v=5.0.0-faae2" ></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.core.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.scroller.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.datetime.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.i18n.zh.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			$("input[name='zhifu']:checked").prev('.pure-img').attr('src','/images/check.png');
			var tab = parseInt("1");
			/* if(tab == 1){
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else if (tab == 0){
			    $("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} else if(parseInt("1") != 0){
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} */
			
			if ("true" == "true" && 1 == 1) {
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else {
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			}
			
			// 控制显示图片比例
			var img_left_heights = $(".selectList img").width()*(0.75);
			$(".selectList img,.order-div").css('height',img_left_heights);
			
			// 取货日期
			var now = new Date();
            $('#scheduledTime').mobiscroll().datetime({
                minDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()+1),
                maxDate: new Date(now.getFullYear(), now.getMonth()+3, now.getDate()),
                stepMinute: 30,
                dateOrder :"yymmdd",
                dateFormat:"yy-mm-dd",
                timeWheels:"HHii",
                timeFormat:"HH:ii",
                //invalid: [{ start: '00:00', end: '08:00' },{ start: '22:00', end: '23:59' }],
                theme: 'ios7',
                lang: 'zh',
                display: 'bottom',
                mode: 'mixed'
            });
            $('#scheduledTime').click(function(){
                $('#scheduledTime').mobiscroll('show'); 
                return false;
            });
            
			$("ul li").click(function() {
				$("ul li").removeClass("active");
				$(this).addClass("active");
				if($(this).attr("data")=="#deliverFeeDiv"){
					$("#deliverFeeDiv").show();
					$("#FetchDiv").hide();
				}else{
					$("#deliverFeeDiv").hide();
					$("#FetchDiv").show();
				}
				$(".tab_content").hide();
				var href = $(this).find("a").attr("href");
				$(href).show();
				
				if(href.endWith("tab1")) {
					$(".btn-wrap-2").show();
					$(".btn-wrap-3").hide();
				} else if(href.endWith("tab2")) {
					$(".btn-wrap-2").hide();
					$(".btn-wrap-3").show();
				}
				//清空已选择的支付方式
				$("input[name='zhifu']").prop("checked", false);
				$(".zhifu .pure-img-check").css('background-image','url(/images/weixuan2.png)');
				return false;
			});
			//商户设置的满额包邮价
			/* var noDeliverFee = toPrice(parseFloat("200")/100);
			var totalFee = parseFloat("0.01");
			if(totalFee > noDeliverFee){
				$("#deliverFeeDiv .orange").text("合计：￥"+ totalFee);
				$("#deliverFee").text("含运费：￥0.00");
			} */
			$('.zhifu>div').click(function(){
	            $("input[name=zhifu]").prop("checked", false);
	            $(".pure-img-check").css('backgroundImage','url(/images/weixuan2.png)');
	            var img_obj = $(this).find('.pure-img-check');
	            var backgroundImage = img_obj.css('background-image');
	            var input_obj = $(this).find('input');
	            if(backgroundImage.indexOf("weixuan2.png") > 0){
	                img_obj.css('background-image','url(/images/check.png)');
	                input_obj.prop("checked", "checked");
	            }else{
	                img_obj.css('background-image','url(/images/weixuan2.png)');
	                input_obj.prop("checked", false);
	            }
	        });


	        $(".j-tab-adress").click(function(event) {
	        	var _url = $(this).find('.url_adress').prop("href");

	        	window.location.href = _url;
	        });
		});
		
		function validateRemark(){
			var text = filtEmoji($('.beizhulan textarea').val());
			if(text != "" && text != undefined){
				if(text.length>30){
					$.dialog({
                        widths : '80%',
                        content : '您输入的备注过长，请不要超过30个字',
                        title : 'no',
                        fullok : function() {
                            return true;
                        },                       
                        lock : true
                    });	
					return false;
				}
				return true;
			}
			return true;
		}
		function filtEmoji (str) {
			return unescape(escape(str).replace(/\%uD.{3}/g, ''));
		}
		
		$(".submit").click(function(event){
			var payType = $("input[name='zhifu']:checked").val();
			if(null == payType || "" == payType || typeof(payType) == "undefined") {
       		 $.dialog({
                    widths : '80%',
                    content : '请选择支付方式',
                    title : 'no',
                    fullok : function() {
                        return true;
                    },                       
                    lock : true
                });
       			return;
       		}
			$.dialog({
                content : "确认提交订单？",
                title : "no",
                okText: '取消',
                cancelText : '确定', 
                ok : function() {
                	$(".ft-right").removeAttr("disabled");
                	return;
                },
                cancel : function() {                        	
               		
               		if(payType == 1){
               			if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				doAlert("no", "无效物流方式");
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@e3a025d";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/1", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "id=" + result.attach;
            	    			strParams += "&serial=10549840601068216320";
            	    			if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
            	        	});
            			}
               		}
               		
    				if(payType == 2){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@e3a025d";
    					if(shopBranch == "") {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					var _fetchTime = $("#scheduledTime").val();
    					if(null == _fetchTime || "" == _fetchTime) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请选择取货时间',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						
    						var _remark = filtEmoji($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							fetchTime : _fetchTime,
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/2/2", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 3){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑收货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });

    						var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
    						// var _remark = encodeURI($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/1/3", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 4){
    					if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				$.dialog({
        	                    widths : '80%',
        	                    content : '无效物流方式',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@e3a025d";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
            			// var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/4", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "?orderId=" + result.attach;
            					if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            					strParams += "&serial=10549840601068216320";
                				window.location.href = "/pay/5"+strParams;
            	        	});
            			}
            			
    				}
    				
                },
                lock : true
            });
		});
		
		//微信支付
		/* $(".payUseWX").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			var type = 0;
			$(".tab_content").each(function(){
				if($(this).css("display") != "none") {
					var attrId = $(this).attr("id");
					if(attrId == "tab1") {
						type = 1;//快递取货
					} else if(attrId == "tab2") {
						type = 2;//门店自提
					}
				}
			});
			if(type <= 0) {
				doAlert("no", "无效物流方式");
				return;
			}
			if(type == 1) {
				if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑收货地址");
					return;
				}
			}
			var _fetchTime = "";
			if(type == 2) {
				if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑取货地址");
					return;
				}
				_fetchTime = $("#scheduledTime").val();
				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
					doAlert("no", "请选择取货时间");
					return;
				}
				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@e3a025d";
				if(shopBranch == "") {
					doAlert("no", "请编辑取货地址");
					return;
				}
			}
			
			var _remark = encodeURI($(".beizhulan").find("textarea").val());
			var params = {
				serial : "10549840601068216320",
				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
				fm : "1",
				mallGoodsId : "26838",
				amount : "1",
				cartIds : "",
				fetchTime : _fetchTime,
				remark : _remark
			};
			if(parseInt("1") == 1 && parseInt("1") == 2){
				var standardId = "";
				if(standardId != null && standardId != undefined){
					params.standardId = standardId;
				}
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				$.post("/cmorder/" + type+ "/1", params, function(result){
					dialog.close();
					
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					
					var strParams = "id=" + result.attach;
	    			strParams += "&serial=10549840601068216320";
	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
	        	});
			}
		}); */
		//货到付款
		/* $(".payAfrecv").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑收货地址");
				return;
			}
			
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				var _remark = encodeURI($(".beizhulan").find("textarea").val());
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/1/3", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
	        	});
			}
		}); */
		//到店支付
		// $(".payInshop").click(function(event) {
			/* if($(this).prop("disabled") == true)
        		return false;
			
			var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@e3a025d";
			if(shopBranch == "") {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			var _fetchTime = $("#scheduledTime").val();
			if(null == _fetchTime || "" == _fetchTime) {
				doAlert("no", "请选择取货时间");
				return;
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				
				var _remark = $(".beizhulan").find("textarea").val();
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					fetchTime : _fetchTime,
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/2/2", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
	        	});
			} */
		// });
	
		// toast提示
		var toastTime=null;
		var displayTime=null;

		function setToast(html) {
		    if (toastTime != null) {
		        clearTimeout(toastTime);
		        clearTimeout(displayTime);
		    }
		    // $('toastId').style.display = 'block';
		    // $('toastId').style.opacity = 1;
		    $('#toastId').css({
		        display: 'block',
		        opacity: 1
		    });
		    $('#toastId .toastContent').text(html);

		    toastTime = setTimeout(function() {
		        // $('toastId').style.opacity = 0;
		        $('#toastId').css("opacity", 0);
		        displayTime = setTimeout(function() {
		            // $('toastId').style.display='none';
		            $('#toastId').css("display", "none");
		        }, 1000);
		    }, 1000);
		}

		function toastDisplay(str) {
		    setToast(str);
		}
	</script>
</body>
</html>
<!--加入判断用户是否关注公众号功能 add by lipengfei at 2015-11-9  -->
  	
	<script type="text/javascript" src="/js/bind/banner.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			//var SHOP_SERIAL = getCookie("SHOP_SERIAL");
			var SHOP_SERIAL = "10549840601068216320";
			if(null != SHOP_SERIAL && SHOP_SERIAL != ""){
				$.ajax({
					url : '/saofu_mobile/checkUserBindStatus',
					data : {
						"serial" : SHOP_SERIAL
					},
					type : 'post',
					cache : false,
					dataType : 'json',
					success : function(data) {
						if (data != null) {
							var guildFocusStr = data.guildFocusStr;
							if(guildFocusStr != null && guildFocusStr == "1"){
								var hasBindedShop = data.hasBindedShop;
								if(hasBindedShop == "0"){
									var qrName = data.QRPublicName;
									var qrUrl = data.QRCodeURL;
									if(qrName != "" && qrUrl != ""){
										var params = qrName+"**"+qrUrl;
										followModule(params);
									}
								}
							}
						} 
					},
					error : function() {
					}
				});
			}
		});
				
	</script>

2017-01-15 18:19:28,161 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:19:25 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=D84531822EFBB2DB278D8D5BBA11F807; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 18:19:28,161 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:19:28,161 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：到店支付
2017-01-15 18:19:28,161 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:19:28,162 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:19:28,162 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:19:27",step_action="{'\u65b9\u6cd5': 'get', 'url': '/mall/tobuy/1?', '\u53c2\u6570': {'mallGoodsId': '26838', 'amount': 1, 'type': 1, 'serial': '10549840601068216320'}}", expected_results="{'条件': [{'消息': '无法打开商品详情', '模式': '到店支付'}], '检查': 'body', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115181925 AND testcase_id = 102 AND step_id = 104 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:28,165 testcase.py[line: 163] INFO: 测试用例[id=102, name=test-n-点击立即购买按钮]执行成功
2017-01-15 18:19:28,165 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:19:28,165 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:19:27" WHERE executed_history_id = 20170115181925 AND testcase_id = 102 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:28,318 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=102]的执行结果
2017-01-15 18:19:28,624 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-创建储值卡支付订单', 'importance': '2', 'tc_external_id': '8', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '105', 'author_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-8', 'updater_id': '1', 'status': '1', 'modification_ts': '2016-11-29 17:33:09', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '', 'summary': '', 'updater_first_name': 'Testlink', 'id': '107', 'author_id': '1', 'steps': [{'id': '108', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1'}], 'execution_type': '1', 'active': '1', 'node_order': '1000', 'testcase_id': '106', 'creation_ts': '2016-07-21 11:26:32'}]
2017-01-15 18:19:28,750 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:28,750 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:19:28,751 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 18:19:28,752 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 18:19:28,752 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 18:19:28,752 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:28,752 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:28,753 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:19:28,753 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:19:28,753 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:19:28,753 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:19:28,754 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 18:19:28,754 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:19:28,754 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:19:28,754 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:19:28,754 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 18:19:28,754 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 18:19:28,754 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:19:28,800 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:19:28,801 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 18:19:28,801 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:19:26 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:19:28,801 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:19:28,801 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 18:19:28,801 testcase.py[line: 131] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 18:19:28,801 testcase.py[line: 138] INFO: 正在更新步骤执行结果
2017-01-15 18:19:28,802 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 18:19:28",step_action="{'\u8bf7\u6c42\u5934': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115181925 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:28,803 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:19:28,803 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:19:28" WHERE executed_history_id = 20170115181925 AND testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:28,932 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=106]的执行结果
2017-01-15 18:19:29,186 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-把商品移出购物车', 'importance': '2', 'tc_external_id': '5', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '91', 'author_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-5', 'updater_id': '1', 'status': '1', 'modification_ts': '2016-11-29 18:05:21', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '', 'summary': '', 'updater_first_name': 'Testlink', 'id': '94', 'author_id': '1', 'steps': [{'id': '95', 'expected_results': '', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,</p>\n<p>\n\t&quot;用例id&quot;:88,</p>\n<p>\n\t&quot;用例名称&quot;:&quot;test-n-把商品加入购物车&quot;<br />\n\t}</p>\n<p>\n\t&nbsp;</p>\n', 'step_number': '1'}, {'id': '96', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品移出购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cart/delfromcart?&quot;,<br />\n\t&quot;参数&quot;:{&quot;strIds&quot;:&quot;[CaseStep.strIds]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2'}, {'id': '178', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;[]&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '3'}], 'execution_type': '1', 'active': '1', 'node_order': '1000', 'testcase_id': '93', 'creation_ts': '2016-07-20 12:25:46'}]
2017-01-15 18:19:29,349 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:29,350 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 93, 'test-n-把商品移出购物车', '微商城-把商品移出购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:19:29,351 testplan.py[line: 72] INFO: 开始执行测试用例[id=93，name=test-n-把商品移出购物车]
2017-01-15 18:19:29,351 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} 
2017-01-15 18:19:29,352 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:19:29,352 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:29,352 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 95, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} ', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:29,353 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:19:29,508 global_function.py[line: 19] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-把商品加入购物车', 'importance': '2', 'tc_external_id': '4', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '87', 'author_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-4', 'updater_id': '1', 'status': '1', 'modification_ts': '2017-01-15 17:46:37', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '', 'summary': '', 'updater_first_name': 'Testlink', 'id': '89', 'author_id': '1', 'steps': [{'id': '175', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1'}, {'id': '174', 'expected_results': '', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2'}, {'id': '90', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'step_number': '3'}, {'id': '176', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '4'}, {'id': '177', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '5'}], 'execution_type': '1', 'active': '1', 'node_order': '1000', 'testcase_id': '88', 'creation_ts': '2016-07-20 12:07:40'}]
2017-01-15 18:19:29,631 global_function.py[line: 39] INFO: 正在读取套件[id=87]的协议，host，端口配置...
2017-01-15 18:19:29,881 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:29,881 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 88, 'test-n-把商品加入购物车', '把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:19:29,884 global_function.py[line: 71] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 18:19:29,884 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 18:19:29,884 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 18:19:29,884 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:29,885 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:29,886 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:19:29,886 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:19:29,886 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 18:19:29,886 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 18:19:29,889 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 18:19:29,889 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 18:19:29,889 global_function.py[line: 86] ERROR: 运行用例出错 'ProgrammingError' object has no attribute 'replace'
2017-01-15 18:19:29,889 testcase.py[line: 131] INFO: 步骤[1]执行失败,停止执行用例[id=93, name=test-n-把商品移出购物车]
2017-01-15 18:19:29,889 testcase.py[line: 138] INFO: 正在更新步骤执行结果
2017-01-15 18:19:29,889 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="执行用例出错 88", protocol_method="无", runtime="2017-01-15 18:19:29",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 88, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u628a\u5546\u54c1\u52a0\u5165\u8d2d\u7269\u8f66'}", expected_results="" WHERE executed_history_id = 20170115181925 AND testcase_id = 93 AND step_id = 95 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:29,891 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:19:29,891 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:19:29" WHERE executed_history_id = 20170115181925 AND testcase_id = 93 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:30,010 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=93]的执行结果
2017-01-15 18:19:30,373 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-显示默认页面', 'importance': '2', 'tc_external_id': '1', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '75', 'author_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-1', 'updater_id': '1', 'status': '1', 'modification_ts': '2016-11-29 18:17:12', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '', 'summary': '', 'updater_first_name': 'Testlink', 'id': '77', 'author_id': '1', 'steps': [{'id': '78', 'expected_results': '<p>\n\t｛&ldquo;检查&rdquo;:&ldquo;BODY&rdquo;，</p>\n<p>\n\t&ldquo;匹配规则&rdquo;：&ldquo;包含字符串&rdquo;，</p>\n<p>\n\t&ldquo;条件&rdquo;：【｛&ldquo;模式&rdquo;：&ldquo;\\&quot;currentPage\\&quot;:1&rdquo;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝，｛&ldquo;模式&rdquo;：&ldquo;\\&quot;pageStartRow\\&quot;:0&quot;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝】</p>\n<p>\n\t｝</p>\n', 'execution_type': '2', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/plist&quot;,<br />\n\t&quot;参数&quot;:{&quot;page_size&quot;:&quot;10&quot;,&quot;page_no&quot;:&quot;1&quot;,&quot;cateIds&quot;:&quot;&quot;,&quot;orderBy&quot;:&quot;&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;name&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1'}], 'execution_type': '2', 'active': '1', 'node_order': '1000', 'testcase_id': '76', 'creation_ts': '2016-07-18 15:52:00'}]
2017-01-15 18:19:30,551 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:30,551 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 76, 'test-n-显示默认页面', '微商城-显示商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:19:30,553 testplan.py[line: 72] INFO: 开始执行测试用例[id=76，name=test-n-显示默认页面]
2017-01-15 18:19:30,553 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}
2017-01-15 18:19:30,553 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\"currentPage\":1","消息":"接口返回错误"},{"模式":"\"pageStartRow\":0","消息":"接口返回错误"}]}
2017-01-15 18:19:30,553 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:30,553 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 76, 'test-n-显示默认页面', 'plan1_of_wechatno', 'pj_wechatno', 78, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}', '{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\\"currentPage\\":1","消息":"接口返回错误"},{"模式":"\\"pageStartRow\\":0","消息":"接口返回错误"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:30,555 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:19:30,555 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:19:30,556 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:19:30,556 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('page_size', '10'), ('page_no', '1'), ('cateIds', ''), ('orderBy', ''), ('serial', '10549840601068216320'), ('name', '')])
2017-01-15 18:19:30,556 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:19:30,556 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:19:30,557 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/plist
2017-01-15 18:19:30,557 httpprotocol.py[line: 75] INFO: 参数为：b'page_size=10&page_no=1&cateIds=&orderBy=&serial=10549840601068216320&name='
2017-01-15 18:19:30,557 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:19:30,782 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:19:30,782 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"dataList":[{"id":27105,"name":"微信支付测试-二级","privateSerial":null,"price":0,"oriPrice":0,"description":"微信支付测试-二级","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/30/b9e21dc4-6cf2-4923-9ec7-4259ecea09c1.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":39,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27090,"name":"测试1222-3","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ea123913-89df-4384-929e-158617f67cbe.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":60,"standardLowPrice":980.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27072,"name":"二级规格1129-2","privateSerial":null,"price":0,"oriPrice":0,"description":"二级规格1129-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/29/9ecf031d-e9bd-427e-b147-cb4a1f8fe5d3.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":25,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27087,"name":"1221-1","privateSerial":null,"price":0,"oriPrice":0,"description":"1221-1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/21/1e844fc5-ee37-4393-97af-2a220971ef1f.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":48,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27040,"name":"一级变三级（改bug前）","privateSerial":null,"price":0,"oriPrice":0,"description":"一级规格1109-2一级规格1109-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/09/23b306d5-384d-4b3b-a4f7-a757d9fc0635.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":135,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27088,"name":"测试1222","privateSerial":null,"price":8,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ca612435-f6e1-4f0d-bc18-61e558e8f720.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":2341,"istop":0,"soldCount":4,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":7,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27089,"name":"测试1222-2","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/37bc7e08-1a2f-4c88-9542-ec5613686d7e.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":26,"standardLowPrice":2100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26955,"name":"乐视超级电视","privateSerial":null,"price":0,"oriPrice":0,"description":"乐视超级电视","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/10/31/3d3ca77e-d010-42f3-804f-bc8a563ec753.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":88,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26971,"name":"多级规格测试010","privateSerial":null,"price":0,"oriPrice":0,"description":"多级规格测试010","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/01/fface01c-5d06-400e-bf7b-2ae2fd64c858.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":15,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27057,"name":"裙子","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/13dbced7-faae-4e13-aebe-6f69d72dc7e0.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":101,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false}],"pageInfo":{"pageSize":10,"currentPage":1,"totalPages":5,"totalRows":47,"pageStartRow":0,"pageEndRow":10,"pagination":true,"hasNextPage":true,"hasPreviousPage":false,"params":null,"needCount":true}}
2017-01-15 18:19:30,786 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:19:28 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:19:30,786 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:19:30,787 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2017-01-15 18:19:30,787 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2017-01-15 18:19:30,787 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:19:30,787 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:19:30,787 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2017-01-15 18:19:30",step_action="{'\u65b9\u6cd5': 'post', 'url': '/goods/plist', '\u53c2\u6570': {'page_size': '10', 'page_no': '1', 'cateIds': '', 'orderBy': '', 'serial': '10549840601068216320', 'name': ''}}", expected_results="{'条件': [{'消息': '接口返回错误', '模式': ''currentPage':1'}, {'消息': '接口返回错误', '模式': ''pageStartRow':0'}], '检查': 'BODY', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115181925 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:30,789 testcase.py[line: 163] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2017-01-15 18:19:30,789 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:19:30,789 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:19:30" WHERE executed_history_id = 20170115181925 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:30,902 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2017-01-15 18:19:31,143 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', 'importance': '2', 'tc_external_id': '11', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '109', 'author_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-11', 'updater_id': '1', 'status': '1', 'modification_ts': '2016-07-29 18:31:36', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n<p>\n\tulr中的40758966216286146560取自base_info.serial字段</p>\n', 'updater_first_name': 'Testlink', 'id': '121', 'author_id': '1', 'steps': [{'id': '122', 'expected_results': '<p>\n\t{&quot;success&quot;:1,&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CMOrder&quot;,<br />\n\t&quot;function&quot;:&quot;test_create_mall_order&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;params&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:2,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1'}, {'id': '123', 'expected_results': '<p>\n\t{&quot;button_name&quot;:&quot;确认支付&quot;, &quot;page_title&quot;:&quot;储值卡&quot;}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;Pay5&quot;,<br />\n\t&quot;function&quot;:&quot;test_pay5&quot;,<br />\n\t&quot;method&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2'}, {'id': '124', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;getByWeixin&quot;: 0, &quot;codeType&quot;: 2, &quot;title&quot;: &quot;动态校验&quot;, &quot;subTitle&quot;: &quot;动态校验&quot;, &quot;notice&quot;: &quot;动态校验&quot;, &quot;description&quot;: &quot;动态校验&quot;,&quot;useLimit&quot;:&quot;动态校验&quot;,&nbsp; &quot;dateInfoType&quot;: &quot;动态校验&quot;, &quot;cardType&quot;: 1,&quot;listing&quot;: 1, &quot;fitAll&quot;: 1,&quot;detailTxt&quot;: &quot;动态校验&quot;,&quot;servicePhone&quot;:&quot;动态校验&quot;,&quot;cashLeastCost&quot;: &quot;动态校验&quot;,&quot;cashReduceCost&quot;: &quot;动态校验&quot;,&quot;discount&quot;: 0,&quot;channel&quot;: -1,&quot;branchId&quot;: -1,&quot;success&quot;: 1, &quot;skuQuantity&quot;:&quot;动态校验&quot;,&quot;output_arg1&quot;:&quot;GetInCoupon.card_code&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;GetInCoupon&quot;,<br />\n\t&quot;function&quot;:&quot;test_get_in_coupon&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;params&quot;:&quot;&quot;<br />\n\t}</p>\n', 'step_number': '3'}, {'id': '129', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;,&quot;coupon_weixin_verification_record&quot;:1}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_with_cash_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:&quot;[GetInCoupon.card_code]&quot;,&quot;yhCardType&quot;:&quot;CASH&quot;}<br />\n\t}</p>\n', 'step_number': '4'}], 'execution_type': '1', 'active': '0', 'node_order': '3', 'testcase_id': '120', 'creation_ts': '2016-07-26 12:12:10'}]
2017-01-15 18:19:31,278 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:31,279 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 120, 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:19:31,280 testplan.py[line: 72] INFO: 开始执行测试用例[id=120，name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]
2017-01-15 18:19:31,280 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 18:19:31,281 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:19:31,281 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 18:19:31" WHERE executed_history_id = 20170115181925 AND testcase_id = 120 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:31,420 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=120]的执行结果
2017-01-15 18:19:31,569 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'importance': '2', 'tc_external_id': '10', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '113', 'author_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-10', 'updater_id': '1', 'status': '1', 'modification_ts': '2016-11-29 17:52:17', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '', 'summary': '', 'updater_first_name': 'Testlink', 'id': '115', 'author_id': '1', 'steps': [{'id': '116', 'expected_results': '', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'step_number': '1'}, {'id': '117', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2'}], 'execution_type': '1', 'active': '1', 'node_order': '1000', 'testcase_id': '114', 'creation_ts': '2016-07-25 15:02:41'}]
2017-01-15 18:19:31,693 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:31,694 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:19:31,695 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 18:19:31,695 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 18:19:31,695 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:19:31,695 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:31,695 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:31,697 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:19:31,824 global_function.py[line: 19] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-创建储值卡支付订单', 'importance': '2', 'tc_external_id': '8', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '105', 'author_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-8', 'updater_id': '1', 'status': '1', 'modification_ts': '2016-11-29 17:33:09', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '', 'summary': '', 'updater_first_name': 'Testlink', 'id': '107', 'author_id': '1', 'steps': [{'id': '108', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1'}], 'execution_type': '1', 'active': '1', 'node_order': '1000', 'testcase_id': '106', 'creation_ts': '2016-07-21 11:26:32'}]
2017-01-15 18:19:31,955 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 18:19:32,580 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:32,580 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:19:32,582 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 18:19:32,582 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 18:19:32,582 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 18:19:32,582 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:32,582 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:32,583 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:19:32,583 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:19:32,584 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:19:32,584 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:19:32,584 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 18:19:32,584 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:19:32,584 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:19:32,584 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:19:32,584 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 18:19:32,585 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 18:19:32,585 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:19:32,891 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:19:32,892 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 18:19:32,892 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:19:30 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:19:32,892 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:19:32,892 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 18:19:32,893 testcase.py[line: 131] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 18:19:32,893 testcase.py[line: 138] INFO: 正在更新步骤执行结果
2017-01-15 18:19:32,893 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 18:19:32",step_action="{'\u8bf7\u6c42\u5934': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115181925 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:32,895 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:19:32,896 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:19:32" WHERE executed_history_id = 20170115181925 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:32,897 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 18:19:32,898 testcase.py[line: 131] INFO: 步骤[1]执行失败,停止执行用例[id=114, name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 18:19:32,898 testcase.py[line: 138] INFO: 正在更新步骤执行结果
2017-01-15 18:19:32,898 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="无", runtime="2017-01-15 18:19:31",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 106, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u521b\u5efa\u50a8\u503c\u5361\u652f\u4ed8\u8ba2\u5355'}", expected_results="" WHERE executed_history_id = 20170115181925 AND testcase_id = 114 AND step_id = 116 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:32,905 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:19:32,906 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:19:31" WHERE executed_history_id = 20170115181925 AND testcase_id = 114 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:33,056 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=114]的执行结果
2017-01-15 18:19:33,341 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-点击商品', 'importance': '2', 'tc_external_id': '2', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '79', 'author_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-2', 'updater_id': '1', 'status': '1', 'modification_ts': '2016-11-29 18:16:14', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '', 'summary': '', 'updater_first_name': 'Testlink', 'id': '81', 'author_id': '1', 'steps': [{'id': '82', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '1'}], 'execution_type': '1', 'active': '1', 'node_order': '1000', 'testcase_id': '80', 'creation_ts': '2016-07-20 11:05:03'}]
2017-01-15 18:19:33,523 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:33,524 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:19:33,525 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2017-01-15 18:19:33,526 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2017-01-15 18:19:33,526 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2017-01-15 18:19:33,526 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:33,526 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:33,528 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:19:33,528 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:19:33,528 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:19:33,529 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('id', 26838), ('serial', '10549840601068216320')])
2017-01-15 18:19:33,529 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:19:33,529 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:19:33,529 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2017-01-15 18:19:33,529 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:19:33,583 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:19:33,584 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/css/malls/detail.css?v=5.0.0-faae2">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/mall/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320",
			mallConfigSerial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script src="/common/js/request.js?v=5.0.0-faae2"></script>
	<script src="/common/js/extend-number.js?v=5.0.0-faae2"></script>
	<script src="/component/iscroll/js/iscroll.js?v=5.0.0-faae2"></script>
	<script src="/component/swiper/js/swiper.min.js?v=5.0.0-faae2"></script>
	<script src="/js/malls/detail.js?v=5.0.0-faae2"></script>
</body>
</html>
2017-01-15 18:19:33,589 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:19:31 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3983'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=C2A093CA2E5ED40254CB4EABAFC77525; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 18:19:33,589 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:19:33,589 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2017-01-15 18:19:33,589 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:19:33,589 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:19:33,589 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:19:33",step_action="{'\u65b9\u6cd5': 'get', 'url': '/goods/item?', '\u53c2\u6570': {'id': 26838, 'serial': '10549840601068216320'}}", expected_results="{'条件': [{'消息': '点击商品时无法打开购买页面', '模式': '立即购买'}], '检查': 'body', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115181925 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:33,591 testcase.py[line: 163] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2017-01-15 18:19:33,591 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:19:33,592 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:19:33" WHERE executed_history_id = 20170115181925 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:33,727 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2017-01-15 18:19:33,983 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-查看购物车商品列表', 'importance': '2', 'tc_external_id': '6', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '97', 'author_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-6', 'updater_id': '1', 'status': '1', 'modification_ts': '2016-11-29 18:13:45', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '', 'summary': '', 'updater_first_name': 'Testlink', 'id': '99', 'author_id': '1', 'steps': [{'id': '101', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;code&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;200&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '2'}], 'execution_type': '1', 'active': '1', 'node_order': '1000', 'testcase_id': '98', 'creation_ts': '2016-07-20 15:50:42'}]
2017-01-15 18:19:34,094 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:34,095 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 98, 'test-n-查看购物车商品列表', '微商城-查看购物车商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:19:34,096 testplan.py[line: 72] INFO: 开始执行测试用例[id=98，name=test-n-查看购物车商品列表]
2017-01-15 18:19:34,096 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2017-01-15 18:19:34,096 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}
2017-01-15 18:19:34,096 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:34,096 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 98, 'test-n-查看购物车商品列表', 'plan1_of_wechatno', 'pj_wechatno', 101, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:34,098 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:19:34,099 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:19:34,099 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:19:34,099 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:19:34,099 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 18:19:34,099 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:19:34,099 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:19:34,100 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2017-01-15 18:19:34,100 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:19:34,632 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:19:34,633 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"code":"4000","message":"Server Error"}
2017-01-15 18:19:34,633 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:19:32 GMT'), ('Content-Type', 'application/json;charset=ISO-8859-1'), ('Content-Length', '56'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:19:34,633 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:19:34,634 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：200
2017-01-15 18:19:34,634 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:19:34,634 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:19:34,634 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:19:34",step_action="{'\u65b9\u6cd5': 'get', 'url': '/cartlist?', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'条件': [{'消息': '把商品移出购物车中失败', '模式': '200'}], '检查': 'code', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115181925 AND testcase_id = 98 AND step_id = 101 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:34,637 testcase.py[line: 163] INFO: 测试用例[id=98, name=test-n-查看购物车商品列表]执行成功
2017-01-15 18:19:34,637 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:19:34,637 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:19:34" WHERE executed_history_id = 20170115181925 AND testcase_id = 98 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:34,778 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=98]的执行结果
2017-01-15 18:19:35,056 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-免费领取优惠券', 'importance': '2', 'tc_external_id': '12', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '125', 'author_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-12', 'updater_id': '1', 'status': '1', 'modification_ts': '2016-11-29 19:43:22', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'updater_first_name': 'Testlink', 'id': '127', 'author_id': '1', 'steps': [{'id': '181', 'expected_results': '', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1'}, {'id': '180', 'expected_results': '', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2'}, {'id': '128', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n', 'step_number': '3'}], 'execution_type': '1', 'active': '1', 'node_order': '1000', 'testcase_id': '126', 'creation_ts': '2016-07-26 15:06:38'}]
2017-01-15 18:19:35,170 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:35,171 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:19:35,172 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 18:19:35,172 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 18:19:35,172 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:19:35,172 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:19:35,172 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:19:35,172 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 18:19:35,178 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:19:35,179 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:19:35",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115181925 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:35,180 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 18:19:35,180 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:19:35,181 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:35,181 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:35,182 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:19:35,182 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:19:35,182 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 18:19:35,188 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:19:35,188 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:19:35",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115181925 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:35,191 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 18:19:35,191 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 18:19:35,191 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:35,191 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:35,192 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 18:19:35,192 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:19:35,192 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:19:35" WHERE executed_history_id = 20170115181925 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:35,325 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 18:19:35,613 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-储值卡支付-不使用优惠，会员账户支付', 'importance': '2', 'tc_external_id': '9', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '109', 'author_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-9', 'updater_id': '1', 'status': '1', 'modification_ts': '2016-07-29 17:13:06', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n', 'updater_first_name': 'Testlink', 'id': '111', 'author_id': '1', 'steps': [{'id': '112', 'expected_results': '<p>\n\t{&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;style&quot;:&quot;testcase&quot;,<br />\n\t<br />\n\t&quot;testcase_id&quot;:114,<br />\n\t<br />\n\t&quot;testcase_name&quot;:&quot;test-n-提交储值卡支付订单-pay5重定向&quot;<br />\n\t}</p>\n', 'step_number': '1'}, {'id': '119', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_without_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:-1,&quot;yhCardType&quot;:-1}<br />\n\t}</p>\n', 'step_number': '3'}], 'execution_type': '1', 'active': '0', 'node_order': '2', 'testcase_id': '110', 'creation_ts': '2016-07-22 14:48:17'}]
2017-01-15 18:19:35,734 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:35,735 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 110, 'test-n-储值卡支付-不使用优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:19:35,736 testplan.py[line: 72] INFO: 开始执行测试用例[id=110，name=test-n-储值卡支付-不使用优惠，会员账户支付]
2017-01-15 18:19:35,737 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-不使用优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 18:19:35,737 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:19:35,737 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 18:19:35" WHERE executed_history_id = 20170115181925 AND testcase_id = 110 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:19:35,863 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=110]的执行结果
2017-01-15 18:19:35,989 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'name': 'test-n-把商品加入购物车', 'importance': '2', 'tc_external_id': '4', 'estimated_exec_duration': '', 'is_open': '1', 'testsuite_id': '87', 'author_first_name': 'Testlink', 'full_tc_external_id': 'wecharno-4', 'updater_id': '1', 'status': '1', 'modification_ts': '2017-01-15 17:46:37', 'updater_login': 'admin', 'author_login': 'admin', 'author_last_name': 'Administrator', 'layout': '1', 'updater_last_name': 'Administrator', 'preconditions': '', 'summary': '', 'updater_first_name': 'Testlink', 'id': '89', 'author_id': '1', 'steps': [{'id': '175', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1'}, {'id': '174', 'expected_results': '', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2'}, {'id': '90', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'step_number': '3'}, {'id': '176', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '4'}, {'id': '177', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '5'}], 'execution_type': '1', 'active': '1', 'node_order': '1000', 'testcase_id': '88', 'creation_ts': '2016-07-20 12:07:40'}]
2017-01-15 18:19:36,111 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:19:36,112 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:19:36,113 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 18:19:36,113 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 18:19:36,113 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 18:19:36,113 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:19:36,113 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115181925', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:19:36,115 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:19:36,115 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:19:36,115 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 18:19:36,115 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 18:19:36,120 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 18:19:36,120 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 18:21:26,581 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 18:21:26,581 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 18:21:26,594 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 18:21:26,599 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 18:21:26,660 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 18:21:26,660 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 18:21:26,663 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 18:21:26,663 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 18:21:26,667 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 18:21:26,669 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 18:21:26,669 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 18:21:26,822 global_function.py[line: 19] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-登陆掌贝pos机', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'active': '1', 'id': '183', 'execution_type': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'active': '1', 'id': '182', 'execution_type': '1'}, {'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '150', 'execution_type': '1'}], 'id': '149', 'full_tc_external_id': 'pj_pos-1', 'creation_ts': '2016-07-27 18:32:10', 'updater_login': 'admin', 'node_order': '1000', 'execution_type': '1', 'importance': '2', 'preconditions': '<p>\n\t初始化用例</p>\n', 'author_first_name': 'Testlink', 'testcase_id': '148', 'active': '1', 'version': '1', 'tc_external_id': '1', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-30 15:41:36', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '147', 'summary': '', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:27,001 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 18:21:27,809 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:27,810 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '')
2017-01-15 18:21:27,811 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 18:21:27,812 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 18:21:27,812 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 18:21:27,812 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:27,812 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:27,814 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:21:27,814 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:21:27,814 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 18:21:27,818 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 18:21:27,818 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 18:21:27,818 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 18:21:27,818 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:21:27,819 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:21:27",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'检查': 'body', '输出': {'branch_id': 1}}" WHERE executed_history_id = 20170115182126 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:21:27,821 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 18:21:27,821 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 18:21:27,821 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:27,821 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:27,823 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:21:27,823 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 18:21:27,823 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 18:21:27,823 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 18:21:27,827 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 18:21:27,827 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 18:21:27,827 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 18:21:27,828 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:21:27,828 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:21:27",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'检查': 'body', '输出': {'serial_no': 2, 'device_no': 1}}" WHERE executed_history_id = 20170115182126 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:21:27,831 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 18:21:27,831 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 18:21:27,831 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:27,831 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:27,832 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 18:21:27,833 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 18:21:27,833 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:21:27,833 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:21:27,833 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 18:21:27,833 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 18:21:27,833 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 18:21:27,833 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 18:21:27,834 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 18:21:27,834 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 18:21:27,834 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 18:21:27,834 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 18:21:27,834 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'ProtocolVersion': '4.0', 'SerialNo': '[CaseStep.serial_no]', 'ProductVersion': '[global_product_version]'}
2017-01-15 18:21:28,210 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 18:21:28,210 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 18:21:28,210 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:21:25 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:21:28,210 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:21:28,210 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 18:21:28,211 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 18:21:28,211 testcase.py[line: 131] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 18:21:28,212 testcase.py[line: 138] INFO: 正在更新步骤执行结果
2017-01-15 18:21:28,212 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 18:21:27",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'ProductVersion': '[global_product_version]', 'ProtocolVersion': '4.0', 'SerialNo': '[CaseStep.serial_no]'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'条件': [{'消息': '登录失败,success不为true', '模式': {'success': True}}, {'消息': 'message不为成功', '模式': {'message': '成功'}}, {'消息': 'code不为4001', '模式': {'code': '4001'}}], '检查': 'body', '输出': {'Token': {'token': 'value'}, 'OperatorId': {'operator': {'id': 'value'}}}, '匹配规则': '键值相等'}" WHERE executed_history_id = 20170115182126 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:21:28,213 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:21:28,214 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:21:27" WHERE executed_history_id = 20170115182126 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:21:28,215 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 18:21:28,215 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_json>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 126, in test_interface_of_json\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 登录失败,success不为true\n')])
2017-01-15 18:21:28,215 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 18:21:28,215 main.py[line: 115] INFO: 运行指定项目
2017-01-15 18:21:28,334 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 18:21:28,334 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 18:21:28,336 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 18:21:28,336 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 18:21:28,489 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 18:21:28,601 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 18:21:28,601 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 18:21:28,729 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['98', '106', '110', '120', '102', '80', '114', '93', '126', '76', '88'])
2017-01-15 18:21:28,879 testplan.py[line: 45] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-查看购物车商品列表', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;code&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;200&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '101', 'execution_type': '1'}], 'id': '99', 'full_tc_external_id': 'wecharno-6', 'creation_ts': '2016-07-20 15:50:42', 'updater_login': 'admin', 'node_order': '1000', 'execution_type': '1', 'importance': '2', 'preconditions': '', 'author_first_name': 'Testlink', 'testcase_id': '98', 'active': '1', 'version': '1', 'tc_external_id': '6', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 18:13:45', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '97', 'summary': '', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:29,023 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:29,023 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 98, 'test-n-查看购物车商品列表', '微商城-查看购物车商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:21:29,024 testplan.py[line: 72] INFO: 开始执行测试用例[id=98，name=test-n-查看购物车商品列表]
2017-01-15 18:21:29,025 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2017-01-15 18:21:29,025 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}
2017-01-15 18:21:29,025 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:29,025 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 98, 'test-n-查看购物车商品列表', 'plan1_of_wechatno', 'pj_wechatno', 101, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:29,028 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:21:29,028 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:21:29,028 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:21:29,029 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:21:29,029 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 18:21:29,029 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:21:29,029 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:21:29,029 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2017-01-15 18:21:29,030 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:21:29,050 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:21:29,051 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"code":"4000","message":"Server Error"}
2017-01-15 18:21:29,051 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:21:26 GMT'), ('Content-Type', 'application/json;charset=ISO-8859-1'), ('Content-Length', '56'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:21:29,051 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:21:29,051 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：200
2017-01-15 18:21:29,051 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:21:29,051 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:21:29,051 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:21:29",step_action="{'\u65b9\u6cd5': 'get', 'url': '/cartlist?', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'条件': [{'消息': '把商品移出购物车中失败', '模式': '200'}], '检查': 'code', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115182126 AND testcase_id = 98 AND step_id = 101 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:29,054 testcase.py[line: 163] INFO: 测试用例[id=98, name=test-n-查看购物车商品列表]执行成功
2017-01-15 18:21:29,054 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:21:29,054 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:21:29" WHERE executed_history_id = 20170115182126 AND testcase_id = 98 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:29,181 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=98]的执行结果
2017-01-15 18:21:29,430 testplan.py[line: 45] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-创建储值卡支付订单', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'active': '1', 'id': '108', 'execution_type': '1'}], 'id': '107', 'full_tc_external_id': 'wecharno-8', 'creation_ts': '2016-07-21 11:26:32', 'updater_login': 'admin', 'node_order': '1000', 'execution_type': '1', 'importance': '2', 'preconditions': '', 'author_first_name': 'Testlink', 'testcase_id': '106', 'active': '1', 'version': '1', 'tc_external_id': '8', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:33:09', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '105', 'summary': '', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:29,541 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:29,541 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:21:29,542 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 18:21:29,542 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 18:21:29,542 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 18:21:29,542 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:29,542 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:29,544 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:21:29,544 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:21:29,544 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:21:29,544 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:21:29,545 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 18:21:29,545 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:21:29,545 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:21:29,545 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:21:29,545 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 18:21:29,545 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 18:21:29,545 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:21:29,588 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:21:29,588 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 18:21:29,588 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:21:27 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:21:29,588 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:21:29,588 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 18:21:29,589 testcase.py[line: 131] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 18:21:29,589 testcase.py[line: 138] INFO: 正在更新步骤执行结果
2017-01-15 18:21:29,589 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 18:21:29",step_action="{'\u8bf7\u6c42\u5934': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '检查': 'body', '输出': {'success': ''success':(.+?),', 'attach': 'attach':'(.+?)''}, '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115182126 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:29,591 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:21:29,591 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:21:29" WHERE executed_history_id = 20170115182126 AND testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:29,711 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=106]的执行结果
2017-01-15 18:21:29,980 testplan.py[line: 45] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-储值卡支付-不使用优惠，会员账户支付', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;style&quot;:&quot;testcase&quot;,<br />\n\t<br />\n\t&quot;testcase_id&quot;:114,<br />\n\t<br />\n\t&quot;testcase_name&quot;:&quot;test-n-提交储值卡支付订单-pay5重定向&quot;<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'active': '1', 'id': '112', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_without_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:-1,&quot;yhCardType&quot;:-1}<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;}</p>\n', 'active': '1', 'id': '119', 'execution_type': '1'}], 'id': '111', 'full_tc_external_id': 'wecharno-9', 'creation_ts': '2016-07-22 14:48:17', 'updater_login': 'admin', 'node_order': '2', 'execution_type': '1', 'importance': '2', 'preconditions': '', 'author_first_name': 'Testlink', 'testcase_id': '110', 'active': '0', 'version': '1', 'tc_external_id': '9', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-07-29 17:13:06', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '109', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:30,124 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:30,125 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 110, 'test-n-储值卡支付-不使用优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:21:30,126 testplan.py[line: 72] INFO: 开始执行测试用例[id=110，name=test-n-储值卡支付-不使用优惠，会员账户支付]
2017-01-15 18:21:30,126 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-不使用优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 18:21:30,126 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:21:30,126 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 18:21:30" WHERE executed_history_id = 20170115182126 AND testcase_id = 110 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:30,252 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=110]的执行结果
2017-01-15 18:21:30,382 testplan.py[line: 45] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CMOrder&quot;,<br />\n\t&quot;function&quot;:&quot;test_create_mall_order&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;params&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:2,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;success&quot;:1,&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'active': '1', 'id': '122', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;Pay5&quot;,<br />\n\t&quot;function&quot;:&quot;test_pay5&quot;,<br />\n\t&quot;method&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;button_name&quot;:&quot;确认支付&quot;, &quot;page_title&quot;:&quot;储值卡&quot;}</p>\n', 'active': '1', 'id': '123', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;GetInCoupon&quot;,<br />\n\t&quot;function&quot;:&quot;test_get_in_coupon&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;params&quot;:&quot;&quot;<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;getByWeixin&quot;: 0, &quot;codeType&quot;: 2, &quot;title&quot;: &quot;动态校验&quot;, &quot;subTitle&quot;: &quot;动态校验&quot;, &quot;notice&quot;: &quot;动态校验&quot;, &quot;description&quot;: &quot;动态校验&quot;,&quot;useLimit&quot;:&quot;动态校验&quot;,&nbsp; &quot;dateInfoType&quot;: &quot;动态校验&quot;, &quot;cardType&quot;: 1,&quot;listing&quot;: 1, &quot;fitAll&quot;: 1,&quot;detailTxt&quot;: &quot;动态校验&quot;,&quot;servicePhone&quot;:&quot;动态校验&quot;,&quot;cashLeastCost&quot;: &quot;动态校验&quot;,&quot;cashReduceCost&quot;: &quot;动态校验&quot;,&quot;discount&quot;: 0,&quot;channel&quot;: -1,&quot;branchId&quot;: -1,&quot;success&quot;: 1, &quot;skuQuantity&quot;:&quot;动态校验&quot;,&quot;output_arg1&quot;:&quot;GetInCoupon.card_code&quot;</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '124', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_with_cash_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:&quot;[GetInCoupon.card_code]&quot;,&quot;yhCardType&quot;:&quot;CASH&quot;}<br />\n\t}</p>\n', 'step_number': '4', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;,&quot;coupon_weixin_verification_record&quot;:1}</p>\n', 'active': '1', 'id': '129', 'execution_type': '1'}], 'id': '121', 'full_tc_external_id': 'wecharno-11', 'creation_ts': '2016-07-26 12:12:10', 'updater_login': 'admin', 'node_order': '3', 'execution_type': '1', 'importance': '2', 'preconditions': '', 'author_first_name': 'Testlink', 'testcase_id': '120', 'active': '0', 'version': '1', 'tc_external_id': '11', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-07-29 18:31:36', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '109', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n<p>\n\tulr中的40758966216286146560取自base_info.serial字段</p>\n', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:30,501 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:30,501 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 120, 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:21:30,502 testplan.py[line: 72] INFO: 开始执行测试用例[id=120，name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]
2017-01-15 18:21:30,503 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 18:21:30,503 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:21:30,503 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 18:21:30" WHERE executed_history_id = 20170115182126 AND testcase_id = 120 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:30,615 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=120]的执行结果
2017-01-15 18:21:30,750 testplan.py[line: 45] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-点击立即购买按钮', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/mall/tobuy/1?&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:&quot;26838&quot;,&quot;amount&quot;:1,&quot;type&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;到店支付&quot;,&quot;消息&quot;:&quot;无法打开商品详情&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '104', 'execution_type': '1'}], 'id': '103', 'full_tc_external_id': 'wecharno-7', 'creation_ts': '2016-07-20 16:48:26', 'updater_login': 'admin', 'node_order': '1001', 'execution_type': '1', 'importance': '2', 'preconditions': '', 'author_first_name': 'Testlink', 'testcase_id': '102', 'active': '1', 'version': '1', 'tc_external_id': '7', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 18:14:53', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '79', 'summary': '', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:30,908 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:30,909 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 102, 'test-n-点击立即购买按钮', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:21:30,911 testplan.py[line: 72] INFO: 开始执行测试用例[id=102，name=test-n-点击立即购买按钮]
2017-01-15 18:21:30,911 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}
2017-01-15 18:21:30,911 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}
2017-01-15 18:21:30,911 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:30,911 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 102, 'test-n-点击立即购买按钮', 'plan1_of_wechatno', 'pj_wechatno', 104, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:30,913 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:21:30,913 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:21:30,914 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:21:30,914 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', '26838'), ('amount', 1), ('type', 1), ('serial', '10549840601068216320')])
2017-01-15 18:21:30,914 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:21:30,914 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:21:30,914 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/mall/tobuy/1?mallGoodsId=26838&amount=1&type=1&serial=10549840601068216320
2017-01-15 18:21:30,915 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:21:31,434 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:21:31,434 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 
	 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta http-equiv="Expires" CONTENT="0">
<meta http-equiv="Cache-Control" CONTENT="no-cache">
<meta http-equiv="Pragma" CONTENT="no-cache">
<title>微商城</title>
<link rel="stylesheet" href="/css/mall/pure.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/grids-core.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/zepto.alert.css?v=5.0.0-faae2">

<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.ios7.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.animation.css?v=5.0.0-faae2">
</head>
<style type="text/css">
* {
	margin: 0;
	padding: 0;
}

html {
	color: #626262;
	overflow-y: auto;
	overflow-x: hidden;
}

body {
	margin-bottom: 20px;
	overflow-y: auto;
	overflow-x: hidden;
}

a {
	text-decoration: none;
}

ol,ul {
	list-style: outside none none;
}

.left {
	float: left;
}

.right {
	float: right;
}

.in-block {
	display: inline-block;
}

.orange {
	color: #c58d04;
}

.grey {
	color: #adadad;
}

.bg-color {
	background: #ececec;
}

#wrapper {
	width: 100%;
	margin: 0 auto;
}

.header {
	width: 100%;
}

.header ul {
	position:relative;
	overflow: hidden;
}

.header ul li {
	width: 50%;
	float: left;
	height: 2.8em;
	line-height: 2.8em;
	background: #fff;
	text-align: center;
	border-bottom:1px solid #f38b44;
	-moz-box-sizing:border-box; /* Firefox */
     -webkit-box-sizing:border-box; /* Safari */
     box-sizing:border-box;
}
.header ul .lines{
	position: absolute;
	width: 1%;
	height: 2.8em;
	line-height: 2.8em;
	border-right: 1px solid #FDE5D4;
	left: 49%;
	top: -1px;
 } 
.header ul li a {
	color: #8b898a;
}

.tab_content>div {
	height: auto;
	font-size: 0.8em;
	margin: 0.5em 0;
}

.empty-p {
	width: 80%;
	float: left;
	padding: 0.5em 0;
}

.has-p {
    width: 100%;
    margin: 0 auto;
    padding: 0 1em;
    height: auto;
    line-height: 2.5em;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -webkit-box-sizing: -webkit-border-box;
}
.has-p-one{
    background: url(/images/mall/contact.png) no-repeat left center;
    background-size: 12px 12px;
}
.has-p-two{
    background: url(/images/mall/take.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.has-p-three{
    background: url(/images/mall/time.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.input-right{
    position: relative;
}
.input-right-img{
    width: 1em;
    position: absolute;
    right: 0.6em;
    top: 0.3em;
}
#scheduledTime{
    width:11em;
    height: 2em;
    border:1px solid #a0a0a0;
    border-radius:4px;
    color:#a0a0a0;
    text-indent:.5em
}
.hiddens-p{
    text-overflow:ellipsis; 
    overflow:hidden; 
    white-space:nowrap;  
}

.right-dashed {
	border-left: 1px solid #eee;
	margin-top: 1em;
	padding-bottom:1em;
}

#edit {
	padding: 1em 0 1em 2em;
    width: 10px;
}

.header ul li.active{
    border-bottom: 4px solid #f38b44;
}
.header ul li.active a{
    color: #f38b44!important;
}
.buy_title{
	background:#f3f3f3;
	padding:0.3em 1em;
	margin: 0;
}
.content {
	width: 100%;
	background: #fff;
	overflow: hidden;	
	padding-bottom:8%;
}

.selectList {
	border-bottom: 1px solid #efefef;
	margin: 0 auto;
	overflow: hidden;
	padding: 0.5em 1em;
	font-size: 0.8em;
	clear:both;
}

.selectList img {
    display: inline-block;
    float: left;
    width: 25%;
    border-radius: 4px;
    -webkit-border-radius: 4px;
}

.button {
	display:block;	
	width: 99%;	
	height: 3em;
	color: #fff;
	border: none;
	border-radius: 4px;
	margin:0 auto 0.5em auto;
}

.addbtn {
	background: #33CC66;
}

.btn-wrap-5 {
	padding: 0 1em;
}
.buybtn {
	width: 100%;
	background: #f68d3c;
}

.footer {
	width: 100%;
	background: #fff;
	color: #b6b6b6;
	overflow: hidden;
	text-align: left;
	margin-bottom: 1em;
}

.all-end-button {
	width: 90%;
	margin: 1em auto 0.5em;
}

.all-end-button p:first-child {
	text-align: left;
}

.error-page{
	background: #ddd;
    padding-bottom: 2em;
}
.error-page img{
    margin:0 auto;
	padding-top: 2em;
}
.error-page p{
    text-align:center;
    color:#000;
    width:80%;
    margin:1em auto 2em;
}
#deliverFee{
	text-align:left;
	font-size:0.8em;
	color:#acb0af;
}
.order-div{
    margin-left: 26.8%;            
    position: relative;
}
.order-div>p:last-child{
    width: 100%;
    margin: 0;
    position: absolute;
    bottom: 0;
    left: 0;
}
.m-t-n{
    margin-top: 0;
}
.m-t-n>span{
    display: inline-block;
}
.m-t-n>span:first-child{
    width: 70%;
}
.m-t-n>span:last-child{
    width: 30%;
}
.mtn-span{
    float: right;
}
.t-r-span{
	text-align:right;
}
.ccc{
    color: #ccc;
}
.peisong{
    text-align: right;
    margin-bottom: 0;
    padding-right: 1em;
    padding-top: 0.4em;
}
.peisong-detail{
    color:#000;
}
.peisong-detail input{
    border: none;
}
.peisong-detail div>p{
    padding-left: 1.8em;
    padding-top: 0.8em;
    padding-bottom: 0.8em;
    margin: 0;
    clear:both;
}

.weipay{            
    background: url(/images/weixin2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}        
.peisong-detail div>p.pay{
    background: url(/images/money2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.cardpay{
    background: url(/images/cardpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.mdpay{
    background: url(/images/mdpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}

.peisong-detail div[class^="btn-wrap-"] {
	border-bottom: 1px solid #dadada;
	padding: 0 1em;
	height: 3em;
	position: relative;
}

.weipay,.pay,.mdpay,.cardpay{
    position: relative;
}
 .weipay>img,.mdpay>img,.pay>img,.cardpay>img,.zhifu input{
    width: 1.2em;
    height: 1.2em;
    position: absolute;
    right: 0;
    top: 50%;
    transform:translateY(-50%);
}

.pure-img-check {
	background: url(/images/weixuan2.png) no-repeat left center;
    background-size:1.05em 1.05em; 
    float: right;
    height: 1.05em;
    width: 1.05em;
}

.zhifu input{
    display: none;
}
#deliverFeeDiv, #FetchDiv {
	border-bottom: 1px solid #efefef;
    padding: 0.5em 1em;
}
#deliverFeeDiv p, #FetchDiv p{
	text-align:right;
}

#remark {
	padding: 0.5em 1em;
	height: 4em;
	font-size: 1.0em;
}

.tab-adress {
	position: relative;
}
.icon-wrap {
	/*float: right;*/
	position: absolute;
	top: 11px;
	right: 10px;
}
.icon-wrap-spe {
	top: 0;
}

/*toast提示*/
.toastBlock {
    display: none; 
    position: fixed;
    bottom: 50%;
    width: 100%;
    text-align: center;
    transition: opacity 1s ease-out;
    z-index: 19;
}
.toastBlock .toastContent {
    display: inline-block;
    padding: 18px;
    border-radius: 5px;
    font-size: 14px;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.7);
}
</style>
<body>
	<div id="wrapper">
		
			
			
			
				
					
					
						
						
						
						
						
					
					
				
				
			
			<div class="header">
				
					<ul class="tab">
						<li class='active' data='#deliverFeeDiv'><a href="#tab1">快递发货</a></li>						
						<li class=''><a href="#tab2">到店自提</a></li>
						<span class="lines"></span>
					</ul>
				
			</div>
			<p class="buy_title"></p>
			
			<div class="tab_container">
				<div id="tab1" class="tab_content pure-g" style="">
					<div class="pure-u-24-24 tab-adress j-tab-adress">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">17817738178<span>(17817738178)</span></span>
								</div>
								<div class="has-p">
									<span>配送地址：</span>
									<span class="pure-u-3-5">天津市县宁河县详细</span>
                                </div>

                                <span class="icon-wrap">
                                	
                                		
                                		
                                		<a class="url_adress" href="/toaddr/1?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
                                		</a>
                                		
                                	
                                </span>
							
							
						
					</div>
				</div>
				<div id="tab2" class="tab_content pure-g" style="display:none">
					<div class="pure-u-24-24">
						
							
								<div class="tab-adress j-tab-adress">
									<div class="has-p">
										<span>联系方式：</span>
										<span class="pure-u-3-5">452<span>(17817738178)</span></span>
									</div>
	                                <div class="has-p">
	                                	<span>门&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;店：</span>
	                                	<span class="pure-u-3-5">
	                                		广东省深圳市福田区
		                                	
		                                		Biu
		                                	
	                                	</span>
	                                </div>
	                                <span class="icon-wrap">
	                                	
	                                		
	                                		
	                                		<a class="url_adress" href="/toaddr/2?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
	                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
	                                		</a>
	                                		
	                                	
	                                </span>
                                </div>
                               	<div class="has-p">
                               		<span>到店时间：</span>
                               		<span class="input-right">
                               			<input type="text" id="scheduledTime" name="scheduledTime" class="text" placeholder="请选择"/><img src="/images/mall/input-right.png?v=5.0.0-faae2" class="input-right-img">
                               		</span>
                               	</div>
							
							
						
					</div>
				</div>
			</div>
			<p class="buy_title"></p>
			
			<div class="content">
				
					
						
							<div class="selectList">
								<img src="http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg"> 
								
									
									
										<div class="order-div">
											<p class="m-t-n"><span>接口-测试商品1</span><span class="mtn-span t-r-span">￥0.01</span></p>
											<p><span class="ccc mtn-span">X1</span></p>
                                        </div>	
									
								
							</div>
						
					
					
					
				
				<div id="deliverFeeDiv">
					 
						
						
							<p id="deliverFee">含运费：￥0.01</p>
							<p class="orange">合计：￥0.02</p>
						
					 
				</div>
				<div id="FetchDiv" style="display: none;">
					<p class="orange">合计：￥0.01</p>
				</div>
				<div id="remark">
					<span class="beizhu" style="float:left">备注：</span>
                   	<span class="beizhulan">
                   		<textarea rows="3" placeholder="可于此处给卖家留言备注" style="border:0;width: 85%;"></textarea>
                   	</span>
				</div>
			</div>
			<p class="buy_title"></p>
			<div class="footer">
				<div class="peisong-detail zhifu">
                	
                        <div class="btn-wrap-1">
                         	<p class="weipay">微信支付<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="1"/>
                         	</p>
                        </div>
                    
                  	
                  	
                        <div class="btn-wrap-2" style="">
                         	<p class="pay">货到付款<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="3"/>
                         	</p>
                        </div>
                   	
		
                    
                        <div class="btn-wrap-3" style="display:none">
                        	<p class="mdpay">到店支付<span class="pure-img-check"></span>
                        		<input type="radio" name="zhifu" value="2"/>
                        	</p>
                        </div>
                   	
                   	
                   	
                        <div class="btn-wrap-4">
                       		<p class="cardpay">储值卡支付<span class="pure-img-check"></span>
                       			<input type="radio" name="zhifu" value="4"/>
                       		</p>
                        </div>
                   	
                </div>
			</div>
			<div class="btn-wrap-5">
				<input type="button" class="button buybtn submit" value="确认提交" />
			</div>

			<div id="toastId" class="toastBlock">
			    <span class="toastContent"></span>
			</div>
			
		
	</div>
	<script type="text/javascript" src="/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/touch.js?v=5.0.0-faae2"></script>
    
	<script type="text/javascript" src="/js/mall/zepto.alert.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mall.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.zepto.js?v=5.0.0-faae2" ></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.core.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.scroller.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.datetime.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.i18n.zh.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			$("input[name='zhifu']:checked").prev('.pure-img').attr('src','/images/check.png');
			var tab = parseInt("1");
			/* if(tab == 1){
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else if (tab == 0){
			    $("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} else if(parseInt("1") != 0){
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} */
			
			if ("true" == "true" && 1 == 1) {
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else {
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			}
			
			// 控制显示图片比例
			var img_left_heights = $(".selectList img").width()*(0.75);
			$(".selectList img,.order-div").css('height',img_left_heights);
			
			// 取货日期
			var now = new Date();
            $('#scheduledTime').mobiscroll().datetime({
                minDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()+1),
                maxDate: new Date(now.getFullYear(), now.getMonth()+3, now.getDate()),
                stepMinute: 30,
                dateOrder :"yymmdd",
                dateFormat:"yy-mm-dd",
                timeWheels:"HHii",
                timeFormat:"HH:ii",
                //invalid: [{ start: '00:00', end: '08:00' },{ start: '22:00', end: '23:59' }],
                theme: 'ios7',
                lang: 'zh',
                display: 'bottom',
                mode: 'mixed'
            });
            $('#scheduledTime').click(function(){
                $('#scheduledTime').mobiscroll('show'); 
                return false;
            });
            
			$("ul li").click(function() {
				$("ul li").removeClass("active");
				$(this).addClass("active");
				if($(this).attr("data")=="#deliverFeeDiv"){
					$("#deliverFeeDiv").show();
					$("#FetchDiv").hide();
				}else{
					$("#deliverFeeDiv").hide();
					$("#FetchDiv").show();
				}
				$(".tab_content").hide();
				var href = $(this).find("a").attr("href");
				$(href).show();
				
				if(href.endWith("tab1")) {
					$(".btn-wrap-2").show();
					$(".btn-wrap-3").hide();
				} else if(href.endWith("tab2")) {
					$(".btn-wrap-2").hide();
					$(".btn-wrap-3").show();
				}
				//清空已选择的支付方式
				$("input[name='zhifu']").prop("checked", false);
				$(".zhifu .pure-img-check").css('background-image','url(/images/weixuan2.png)');
				return false;
			});
			//商户设置的满额包邮价
			/* var noDeliverFee = toPrice(parseFloat("200")/100);
			var totalFee = parseFloat("0.01");
			if(totalFee > noDeliverFee){
				$("#deliverFeeDiv .orange").text("合计：￥"+ totalFee);
				$("#deliverFee").text("含运费：￥0.00");
			} */
			$('.zhifu>div').click(function(){
	            $("input[name=zhifu]").prop("checked", false);
	            $(".pure-img-check").css('backgroundImage','url(/images/weixuan2.png)');
	            var img_obj = $(this).find('.pure-img-check');
	            var backgroundImage = img_obj.css('background-image');
	            var input_obj = $(this).find('input');
	            if(backgroundImage.indexOf("weixuan2.png") > 0){
	                img_obj.css('background-image','url(/images/check.png)');
	                input_obj.prop("checked", "checked");
	            }else{
	                img_obj.css('background-image','url(/images/weixuan2.png)');
	                input_obj.prop("checked", false);
	            }
	        });


	        $(".j-tab-adress").click(function(event) {
	        	var _url = $(this).find('.url_adress').prop("href");

	        	window.location.href = _url;
	        });
		});
		
		function validateRemark(){
			var text = filtEmoji($('.beizhulan textarea').val());
			if(text != "" && text != undefined){
				if(text.length>30){
					$.dialog({
                        widths : '80%',
                        content : '您输入的备注过长，请不要超过30个字',
                        title : 'no',
                        fullok : function() {
                            return true;
                        },                       
                        lock : true
                    });	
					return false;
				}
				return true;
			}
			return true;
		}
		function filtEmoji (str) {
			return unescape(escape(str).replace(/\%uD.{3}/g, ''));
		}
		
		$(".submit").click(function(event){
			var payType = $("input[name='zhifu']:checked").val();
			if(null == payType || "" == payType || typeof(payType) == "undefined") {
       		 $.dialog({
                    widths : '80%',
                    content : '请选择支付方式',
                    title : 'no',
                    fullok : function() {
                        return true;
                    },                       
                    lock : true
                });
       			return;
       		}
			$.dialog({
                content : "确认提交订单？",
                title : "no",
                okText: '取消',
                cancelText : '确定', 
                ok : function() {
                	$(".ft-right").removeAttr("disabled");
                	return;
                },
                cancel : function() {                        	
               		
               		if(payType == 1){
               			if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				doAlert("no", "无效物流方式");
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@532930c5";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/1", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "id=" + result.attach;
            	    			strParams += "&serial=10549840601068216320";
            	    			if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
            	        	});
            			}
               		}
               		
    				if(payType == 2){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@532930c5";
    					if(shopBranch == "") {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					var _fetchTime = $("#scheduledTime").val();
    					if(null == _fetchTime || "" == _fetchTime) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请选择取货时间',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						
    						var _remark = filtEmoji($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							fetchTime : _fetchTime,
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/2/2", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 3){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑收货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });

    						var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
    						// var _remark = encodeURI($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/1/3", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 4){
    					if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				$.dialog({
        	                    widths : '80%',
        	                    content : '无效物流方式',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@532930c5";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
            			// var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/4", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "?orderId=" + result.attach;
            					if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            					strParams += "&serial=10549840601068216320";
                				window.location.href = "/pay/5"+strParams;
            	        	});
            			}
            			
    				}
    				
                },
                lock : true
            });
		});
		
		//微信支付
		/* $(".payUseWX").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			var type = 0;
			$(".tab_content").each(function(){
				if($(this).css("display") != "none") {
					var attrId = $(this).attr("id");
					if(attrId == "tab1") {
						type = 1;//快递取货
					} else if(attrId == "tab2") {
						type = 2;//门店自提
					}
				}
			});
			if(type <= 0) {
				doAlert("no", "无效物流方式");
				return;
			}
			if(type == 1) {
				if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑收货地址");
					return;
				}
			}
			var _fetchTime = "";
			if(type == 2) {
				if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑取货地址");
					return;
				}
				_fetchTime = $("#scheduledTime").val();
				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
					doAlert("no", "请选择取货时间");
					return;
				}
				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@532930c5";
				if(shopBranch == "") {
					doAlert("no", "请编辑取货地址");
					return;
				}
			}
			
			var _remark = encodeURI($(".beizhulan").find("textarea").val());
			var params = {
				serial : "10549840601068216320",
				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
				fm : "1",
				mallGoodsId : "26838",
				amount : "1",
				cartIds : "",
				fetchTime : _fetchTime,
				remark : _remark
			};
			if(parseInt("1") == 1 && parseInt("1") == 2){
				var standardId = "";
				if(standardId != null && standardId != undefined){
					params.standardId = standardId;
				}
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				$.post("/cmorder/" + type+ "/1", params, function(result){
					dialog.close();
					
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					
					var strParams = "id=" + result.attach;
	    			strParams += "&serial=10549840601068216320";
	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
	        	});
			}
		}); */
		//货到付款
		/* $(".payAfrecv").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑收货地址");
				return;
			}
			
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				var _remark = encodeURI($(".beizhulan").find("textarea").val());
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/1/3", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
	        	});
			}
		}); */
		//到店支付
		// $(".payInshop").click(function(event) {
			/* if($(this).prop("disabled") == true)
        		return false;
			
			var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@532930c5";
			if(shopBranch == "") {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			var _fetchTime = $("#scheduledTime").val();
			if(null == _fetchTime || "" == _fetchTime) {
				doAlert("no", "请选择取货时间");
				return;
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				
				var _remark = $(".beizhulan").find("textarea").val();
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					fetchTime : _fetchTime,
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/2/2", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
	        	});
			} */
		// });
	
		// toast提示
		var toastTime=null;
		var displayTime=null;

		function setToast(html) {
		    if (toastTime != null) {
		        clearTimeout(toastTime);
		        clearTimeout(displayTime);
		    }
		    // $('toastId').style.display = 'block';
		    // $('toastId').style.opacity = 1;
		    $('#toastId').css({
		        display: 'block',
		        opacity: 1
		    });
		    $('#toastId .toastContent').text(html);

		    toastTime = setTimeout(function() {
		        // $('toastId').style.opacity = 0;
		        $('#toastId').css("opacity", 0);
		        displayTime = setTimeout(function() {
		            // $('toastId').style.display='none';
		            $('#toastId').css("display", "none");
		        }, 1000);
		    }, 1000);
		}

		function toastDisplay(str) {
		    setToast(str);
		}
	</script>
</body>
</html>
<!--加入判断用户是否关注公众号功能 add by lipengfei at 2015-11-9  -->
  	
	<script type="text/javascript" src="/js/bind/banner.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			//var SHOP_SERIAL = getCookie("SHOP_SERIAL");
			var SHOP_SERIAL = "10549840601068216320";
			if(null != SHOP_SERIAL && SHOP_SERIAL != ""){
				$.ajax({
					url : '/saofu_mobile/checkUserBindStatus',
					data : {
						"serial" : SHOP_SERIAL
					},
					type : 'post',
					cache : false,
					dataType : 'json',
					success : function(data) {
						if (data != null) {
							var guildFocusStr = data.guildFocusStr;
							if(guildFocusStr != null && guildFocusStr == "1"){
								var hasBindedShop = data.hasBindedShop;
								if(hasBindedShop == "0"){
									var qrName = data.QRPublicName;
									var qrUrl = data.QRCodeURL;
									if(qrName != "" && qrUrl != ""){
										var params = qrName+"**"+qrUrl;
										followModule(params);
									}
								}
							}
						} 
					},
					error : function() {
					}
				});
			}
		});
				
	</script>

2017-01-15 18:21:31,437 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:21:28 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=D6B6763B48FFA1E25B3F516CFD89B2A6; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 18:21:31,437 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:21:31,437 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：到店支付
2017-01-15 18:21:31,437 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:21:31,437 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:21:31,437 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:21:30",step_action="{'\u65b9\u6cd5': 'get', 'url': '/mall/tobuy/1?', '\u53c2\u6570': {'mallGoodsId': '26838', 'amount': 1, 'type': 1, 'serial': '10549840601068216320'}}", expected_results="{'条件': [{'消息': '无法打开商品详情', '模式': '到店支付'}], '检查': 'body', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115182126 AND testcase_id = 102 AND step_id = 104 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:31,439 testcase.py[line: 163] INFO: 测试用例[id=102, name=test-n-点击立即购买按钮]执行成功
2017-01-15 18:21:31,439 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:21:31,439 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:21:30" WHERE executed_history_id = 20170115182126 AND testcase_id = 102 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:31,564 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=102]的执行结果
2017-01-15 18:21:31,839 testplan.py[line: 45] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-点击商品', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '82', 'execution_type': '1'}], 'id': '81', 'full_tc_external_id': 'wecharno-2', 'creation_ts': '2016-07-20 11:05:03', 'updater_login': 'admin', 'node_order': '1000', 'execution_type': '1', 'importance': '2', 'preconditions': '', 'author_first_name': 'Testlink', 'testcase_id': '80', 'active': '1', 'version': '1', 'tc_external_id': '2', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 18:16:14', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '79', 'summary': '', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:31,986 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:31,986 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:21:31,988 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2017-01-15 18:21:31,988 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2017-01-15 18:21:31,988 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2017-01-15 18:21:31,988 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:31,989 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:31,990 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:21:31,990 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:21:31,990 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:21:31,990 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('id', 26838), ('serial', '10549840601068216320')])
2017-01-15 18:21:31,991 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:21:31,991 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:21:31,991 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2017-01-15 18:21:31,991 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:21:32,048 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:21:32,049 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/css/malls/detail.css?v=5.0.0-faae2">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/mall/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320",
			mallConfigSerial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script src="/common/js/request.js?v=5.0.0-faae2"></script>
	<script src="/common/js/extend-number.js?v=5.0.0-faae2"></script>
	<script src="/component/iscroll/js/iscroll.js?v=5.0.0-faae2"></script>
	<script src="/component/swiper/js/swiper.min.js?v=5.0.0-faae2"></script>
	<script src="/js/malls/detail.js?v=5.0.0-faae2"></script>
</body>
</html>
2017-01-15 18:21:32,050 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:21:29 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3983'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=1B2599F48AE5AC268A0B6B48B34DFF98; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 18:21:32,050 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:21:32,050 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2017-01-15 18:21:32,050 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:21:32,050 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:21:32,050 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:21:31",step_action="{'\u65b9\u6cd5': 'get', 'url': '/goods/item?', '\u53c2\u6570': {'id': 26838, 'serial': '10549840601068216320'}}", expected_results="{'条件': [{'消息': '点击商品时无法打开购买页面', '模式': '立即购买'}], '检查': 'body', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115182126 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:32,053 testcase.py[line: 163] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2017-01-15 18:21:32,053 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:21:32,053 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:21:31" WHERE executed_history_id = 20170115182126 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:32,209 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2017-01-15 18:21:32,474 testplan.py[line: 45] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '', 'active': '1', 'id': '116', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '117', 'execution_type': '1'}], 'id': '115', 'full_tc_external_id': 'wecharno-10', 'creation_ts': '2016-07-25 15:02:41', 'updater_login': 'admin', 'node_order': '1000', 'execution_type': '1', 'importance': '2', 'preconditions': '', 'author_first_name': 'Testlink', 'testcase_id': '114', 'active': '1', 'version': '1', 'tc_external_id': '10', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:52:17', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '113', 'summary': '', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:32,595 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:32,595 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:21:32,597 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 18:21:32,598 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 18:21:32,598 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:21:32,598 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:32,598 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:32,600 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:21:32,724 global_function.py[line: 19] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-创建储值卡支付订单', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'active': '1', 'id': '108', 'execution_type': '1'}], 'id': '107', 'full_tc_external_id': 'wecharno-8', 'creation_ts': '2016-07-21 11:26:32', 'updater_login': 'admin', 'node_order': '1000', 'execution_type': '1', 'importance': '2', 'preconditions': '', 'author_first_name': 'Testlink', 'testcase_id': '106', 'active': '1', 'version': '1', 'tc_external_id': '8', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 17:33:09', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '105', 'summary': '', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:32,848 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 18:21:33,138 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:33,139 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:21:33,140 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 18:21:33,140 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 18:21:33,140 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 18:21:33,140 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:33,141 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:33,142 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:21:33,142 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:21:33,143 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:21:33,143 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:21:33,144 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 18:21:33,144 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:21:33,144 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:21:33,145 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:21:33,145 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 18:21:33,145 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 18:21:33,146 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:21:33,186 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:21:33,186 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 18:21:33,186 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:21:30 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:21:33,186 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:21:33,186 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 18:21:33,187 testcase.py[line: 131] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 18:21:33,187 testcase.py[line: 138] INFO: 正在更新步骤执行结果
2017-01-15 18:21:33,187 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 18:21:33",step_action="{'\u8bf7\u6c42\u5934': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '检查': 'body', '输出': {'success': ''success':(.+?),', 'attach': 'attach':'(.+?)''}, '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115182126 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:33,190 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:21:33,190 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:21:33" WHERE executed_history_id = 20170115182126 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:33,192 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 18:21:33,192 testcase.py[line: 131] INFO: 步骤[1]执行失败,停止执行用例[id=114, name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 18:21:33,192 testcase.py[line: 138] INFO: 正在更新步骤执行结果
2017-01-15 18:21:33,192 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="无", runtime="2017-01-15 18:21:32",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 106, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u521b\u5efa\u50a8\u503c\u5361\u652f\u4ed8\u8ba2\u5355'}", expected_results="" WHERE executed_history_id = 20170115182126 AND testcase_id = 114 AND step_id = 116 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:33,196 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:21:33,196 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:21:32" WHERE executed_history_id = 20170115182126 AND testcase_id = 114 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:33,311 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=114]的执行结果
2017-01-15 18:21:33,563 testplan.py[line: 45] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-把商品移出购物车', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,</p>\n<p>\n\t&quot;用例id&quot;:88,</p>\n<p>\n\t&quot;用例名称&quot;:&quot;test-n-把商品加入购物车&quot;<br />\n\t}</p>\n<p>\n\t&nbsp;</p>\n', 'step_number': '1', 'expected_results': '', 'active': '1', 'id': '95', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cart/delfromcart?&quot;,<br />\n\t&quot;参数&quot;:{&quot;strIds&quot;:&quot;[CaseStep.strIds]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品移出购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '96', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;[]&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '178', 'execution_type': '1'}], 'id': '94', 'full_tc_external_id': 'wecharno-5', 'creation_ts': '2016-07-20 12:25:46', 'updater_login': 'admin', 'node_order': '1000', 'execution_type': '1', 'importance': '2', 'preconditions': '', 'author_first_name': 'Testlink', 'testcase_id': '93', 'active': '1', 'version': '1', 'tc_external_id': '5', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 18:05:21', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '91', 'summary': '', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:33,711 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:33,711 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 93, 'test-n-把商品移出购物车', '微商城-把商品移出购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:21:33,713 testplan.py[line: 72] INFO: 开始执行测试用例[id=93，name=test-n-把商品移出购物车]
2017-01-15 18:21:33,713 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} 
2017-01-15 18:21:33,713 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:21:33,714 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:33,714 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 95, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} ', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:33,716 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:21:33,843 global_function.py[line: 19] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-把商品加入购物车', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '175', 'execution_type': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'expected_results': '', 'active': '1', 'id': '174', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '90', 'execution_type': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '4', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'active': '1', 'id': '176', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '5', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '177', 'execution_type': '1'}], 'id': '89', 'full_tc_external_id': 'wecharno-4', 'creation_ts': '2016-07-20 12:07:40', 'updater_login': 'admin', 'node_order': '1000', 'execution_type': '1', 'importance': '2', 'preconditions': '', 'author_first_name': 'Testlink', 'testcase_id': '88', 'active': '1', 'version': '1', 'tc_external_id': '4', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2017-01-15 17:46:37', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '87', 'summary': '', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:33,977 global_function.py[line: 39] INFO: 正在读取套件[id=87]的协议，host，端口配置...
2017-01-15 18:21:34,265 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:34,265 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 88, 'test-n-把商品加入购物车', '把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:21:34,267 global_function.py[line: 71] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 18:21:34,267 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 18:21:34,267 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 18:21:34,267 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:34,267 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:34,268 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:21:34,268 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:21:34,268 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 18:21:34,268 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 18:21:34,271 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 18:21:34,271 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 18:21:34,271 testcase.py[line: 116] ERROR: 步骤[1]执行出错,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 18:21:34,271 testcase.py[line: 123] INFO: 正在更新步骤执行结果
2017-01-15 18:21:34,272 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="1054 (42S22): Unknown column channel_serial1 in where clause", protocol_method="无", runtime="2017-01-15 18:21:34",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial1=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'检查': 'body', '输出': {'customer_id': 1}}" WHERE executed_history_id = 20170115182126 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:34,274 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:21:34,274 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:21:34" WHERE executed_history_id = 20170115182126 and testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:34,276 global_function.py[line: 82] INFO: 指定用例[88]已执行完
2017-01-15 18:21:34,276 testcase.py[line: 116] ERROR: 步骤[1]执行出错,停止执行用例[id=93, name=test-n-把商品移出购物车]
2017-01-15 18:21:34,276 testcase.py[line: 123] INFO: 正在更新步骤执行结果
2017-01-15 18:21:34,276 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="1054 (42S22): Unknown column channel_serial1 in where clause", protocol_method="无", runtime="2017-01-15 18:21:33",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 88, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u628a\u5546\u54c1\u52a0\u5165\u8d2d\u7269\u8f66'}", expected_results="" WHERE executed_history_id = 20170115182126 AND testcase_id = 93 AND step_id = 95 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:34,278 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:21:34,278 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:21:33" WHERE executed_history_id = 20170115182126 AND testcase_id = 93 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:34,392 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=93]的执行结果
2017-01-15 18:21:34,633 testplan.py[line: 45] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-免费领取优惠券', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'expected_results': '', 'active': '1', 'id': '181', 'execution_type': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'expected_results': '', 'active': '1', 'id': '180', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '128', 'execution_type': '1'}], 'id': '127', 'full_tc_external_id': 'wecharno-12', 'creation_ts': '2016-07-26 15:06:38', 'updater_login': 'admin', 'node_order': '1000', 'execution_type': '1', 'importance': '2', 'preconditions': '', 'author_first_name': 'Testlink', 'testcase_id': '126', 'active': '1', 'version': '1', 'tc_external_id': '12', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 19:43:22', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '125', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:34,745 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:34,745 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:21:34,747 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 18:21:34,747 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 18:21:34,748 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:21:34,748 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:21:34,748 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:21:34,748 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 18:21:34,754 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:21:34,754 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:21:34",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115182126 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:34,756 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 18:21:34,756 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:21:34,756 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:34,756 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:34,757 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:21:34,757 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:21:34,757 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 18:21:34,764 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:21:34,764 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:21:34",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115182126 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:34,766 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 18:21:34,766 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 18:21:34,766 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:34,766 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:34,767 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 18:21:34,768 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:21:34,768 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:21:34" WHERE executed_history_id = 20170115182126 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:34,887 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 18:21:35,205 testplan.py[line: 45] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-显示默认页面', 'steps': [{'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/plist&quot;,<br />\n\t&quot;参数&quot;:{&quot;page_size&quot;:&quot;10&quot;,&quot;page_no&quot;:&quot;1&quot;,&quot;cateIds&quot;:&quot;&quot;,&quot;orderBy&quot;:&quot;&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;name&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t｛&ldquo;检查&rdquo;:&ldquo;BODY&rdquo;，</p>\n<p>\n\t&ldquo;匹配规则&rdquo;：&ldquo;包含字符串&rdquo;，</p>\n<p>\n\t&ldquo;条件&rdquo;：【｛&ldquo;模式&rdquo;：&ldquo;\\&quot;currentPage\\&quot;:1&rdquo;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝，｛&ldquo;模式&rdquo;：&ldquo;\\&quot;pageStartRow\\&quot;:0&quot;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝】</p>\n<p>\n\t｝</p>\n', 'active': '1', 'id': '78', 'execution_type': '2'}], 'id': '77', 'full_tc_external_id': 'wecharno-1', 'creation_ts': '2016-07-18 15:52:00', 'updater_login': 'admin', 'node_order': '1000', 'execution_type': '2', 'importance': '2', 'preconditions': '', 'author_first_name': 'Testlink', 'testcase_id': '76', 'active': '1', 'version': '1', 'tc_external_id': '1', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2016-11-29 18:17:12', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '75', 'summary': '', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:35,335 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:35,335 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 76, 'test-n-显示默认页面', '微商城-显示商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:21:35,336 testplan.py[line: 72] INFO: 开始执行测试用例[id=76，name=test-n-显示默认页面]
2017-01-15 18:21:35,336 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}
2017-01-15 18:21:35,336 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\"currentPage\":1","消息":"接口返回错误"},{"模式":"\"pageStartRow\":0","消息":"接口返回错误"}]}
2017-01-15 18:21:35,336 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:35,336 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 76, 'test-n-显示默认页面', 'plan1_of_wechatno', 'pj_wechatno', 78, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}', '{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\\"currentPage\\":1","消息":"接口返回错误"},{"模式":"\\"pageStartRow\\":0","消息":"接口返回错误"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:35,337 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:21:35,338 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:21:35,338 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:21:35,338 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('page_size', '10'), ('page_no', '1'), ('cateIds', ''), ('orderBy', ''), ('serial', '10549840601068216320'), ('name', '')])
2017-01-15 18:21:35,338 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:21:35,338 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:21:35,338 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/plist
2017-01-15 18:21:35,338 httpprotocol.py[line: 75] INFO: 参数为：b'page_size=10&page_no=1&cateIds=&orderBy=&serial=10549840601068216320&name='
2017-01-15 18:21:35,338 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:21:35,585 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:21:35,585 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"dataList":[{"id":27105,"name":"微信支付测试-二级","privateSerial":null,"price":0,"oriPrice":0,"description":"微信支付测试-二级","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/30/b9e21dc4-6cf2-4923-9ec7-4259ecea09c1.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":39,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27090,"name":"测试1222-3","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ea123913-89df-4384-929e-158617f67cbe.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":60,"standardLowPrice":980.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27072,"name":"二级规格1129-2","privateSerial":null,"price":0,"oriPrice":0,"description":"二级规格1129-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/29/9ecf031d-e9bd-427e-b147-cb4a1f8fe5d3.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":25,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27087,"name":"1221-1","privateSerial":null,"price":0,"oriPrice":0,"description":"1221-1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/21/1e844fc5-ee37-4393-97af-2a220971ef1f.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":48,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27040,"name":"一级变三级（改bug前）","privateSerial":null,"price":0,"oriPrice":0,"description":"一级规格1109-2一级规格1109-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/09/23b306d5-384d-4b3b-a4f7-a757d9fc0635.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":135,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27088,"name":"测试1222","privateSerial":null,"price":8,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ca612435-f6e1-4f0d-bc18-61e558e8f720.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":2341,"istop":0,"soldCount":4,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":7,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27089,"name":"测试1222-2","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/37bc7e08-1a2f-4c88-9542-ec5613686d7e.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":26,"standardLowPrice":2100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26955,"name":"乐视超级电视","privateSerial":null,"price":0,"oriPrice":0,"description":"乐视超级电视","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/10/31/3d3ca77e-d010-42f3-804f-bc8a563ec753.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":88,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26971,"name":"多级规格测试010","privateSerial":null,"price":0,"oriPrice":0,"description":"多级规格测试010","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/01/fface01c-5d06-400e-bf7b-2ae2fd64c858.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":15,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27057,"name":"裙子","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/13dbced7-faae-4e13-aebe-6f69d72dc7e0.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":101,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false}],"pageInfo":{"pageSize":10,"currentPage":1,"totalPages":5,"totalRows":47,"pageStartRow":0,"pageEndRow":10,"pagination":true,"hasNextPage":true,"hasPreviousPage":false,"params":null,"needCount":true}}
2017-01-15 18:21:35,589 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:21:33 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:21:35,589 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:21:35,590 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2017-01-15 18:21:35,590 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2017-01-15 18:21:35,590 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:21:35,590 testcase.py[line: 160] INFO: 正在更新步骤执行结果
2017-01-15 18:21:35,590 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2017-01-15 18:21:35",step_action="{'\u65b9\u6cd5': 'post', 'url': '/goods/plist', '\u53c2\u6570': {'page_size': '10', 'page_no': '1', 'cateIds': '', 'orderBy': '', 'serial': '10549840601068216320', 'name': ''}}", expected_results="{'条件': [{'消息': '接口返回错误', '模式': ''currentPage':1'}, {'消息': '接口返回错误', '模式': ''pageStartRow':0'}], '检查': 'BODY', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115182126 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:35,592 testcase.py[line: 163] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2017-01-15 18:21:35,592 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:21:35,592 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:21:35" WHERE executed_history_id = 20170115182126 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:35,712 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2017-01-15 18:21:35,984 testplan.py[line: 45] INFO: 获取测试用例信息 [{'is_open': '1', 'author_login': 'admin', 'status': '1', 'estimated_exec_duration': '', 'name': 'test-n-把商品加入购物车', 'steps': [{'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '175', 'execution_type': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2', 'expected_results': '', 'active': '1', 'id': '174', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'step_number': '3', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '90', 'execution_type': '1'}, {'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '4', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'active': '1', 'id': '176', 'execution_type': '1'}, {'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '5', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'active': '1', 'id': '177', 'execution_type': '1'}], 'id': '89', 'full_tc_external_id': 'wecharno-4', 'creation_ts': '2016-07-20 12:07:40', 'updater_login': 'admin', 'node_order': '1000', 'execution_type': '1', 'importance': '2', 'preconditions': '', 'author_first_name': 'Testlink', 'testcase_id': '88', 'active': '1', 'version': '1', 'tc_external_id': '4', 'layout': '1', 'author_last_name': 'Administrator', 'modification_ts': '2017-01-15 17:46:37', 'updater_id': '1', 'author_id': '1', 'updater_first_name': 'Testlink', 'testsuite_id': '87', 'summary': '', 'updater_last_name': 'Administrator'}]
2017-01-15 18:21:36,129 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:21:36,129 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:21:36,130 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 18:21:36,131 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 18:21:36,131 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 18:21:36,131 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:21:36,131 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115182126', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:21:36,132 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:21:36,132 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:21:36,133 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 18:21:36,133 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 18:21:36,136 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 18:21:36,136 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 18:21:36,136 testcase.py[line: 116] ERROR: 步骤[1]执行出错,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 18:21:36,136 testcase.py[line: 123] INFO: 正在更新步骤执行结果
2017-01-15 18:21:36,136 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="1054 (42S22): Unknown column channel_serial1 in where clause", protocol_method="无", runtime="2017-01-15 18:21:36",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial1=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'检查': 'body', '输出': {'customer_id': 1}}" WHERE executed_history_id = 20170115182126 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:36,138 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:21:36,138 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:21:36" WHERE executed_history_id = 20170115182126 AND testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:21:36,292 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=88]的执行结果
2017-01-15 18:21:36,409 testplan.py[line: 97] INFO: 测试计划[project=pj_wechatno ,testplan=plan1_of_wechatno]已执行完
2017-01-15 18:21:36,409 main.py[line: 242] INFO: 接口测试已执行完成，正在关闭数据库连接
2017-01-15 18:21:36,410 htmlreporter.py[line: 37] INFO: 正在查询测试用例总数
2017-01-15 18:21:36,410 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE executed_history_id = %s  data：('20170115182126',)
2017-01-15 18:21:36,411 htmlreporter.py[line: 43] INFO: 正在查询执行通过的用例数
2017-01-15 18:21:36,411 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Pass', '20170115182126')
2017-01-15 18:21:36,412 htmlreporter.py[line: 49] INFO: 正在查询执行失败的用例数
2017-01-15 18:21:36,412 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Fail', '20170115182126')
2017-01-15 18:21:36,413 htmlreporter.py[line: 55] INFO: 正在查询执行出错的用例数
2017-01-15 18:21:36,413 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Error', '20170115182126')
2017-01-15 18:21:36,414 htmlreporter.py[line: 61] INFO: 正在查询未执行的用例数
2017-01-15 18:21:36,414 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Block', '20170115182126')
2017-01-15 18:21:36,415 htmlreporter.py[line: 87] INFO: 正在查询已运的测试计划
2017-01-15 18:21:36,415 mydb.py[line: 104] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20170115182126',)
2017-01-15 18:21:36,416 htmlreporter.py[line: 113] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]的测试用例执行结果
2017-01-15 18:21:36,416 mydb.py[line: 104] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20170115182126')
2017-01-15 18:21:36,417 htmlreporter.py[line: 120] INFO: 正在记录测试测试计划[project：pj_pos, testplan：无计划]的测试用例运行结果到测试报告
2017-01-15 18:21:36,418 htmlreporter.py[line: 113] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例执行结果
2017-01-15 18:21:36,418 mydb.py[line: 104] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20170115182126')
2017-01-15 18:21:36,420 htmlreporter.py[line: 120] INFO: 正在记录测试测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例运行结果到测试报告
2017-01-15 18:21:36,421 htmlreporter.py[line: 134] INFO: 正在查询已运的测试计划
2017-01-15 18:21:36,421 mydb.py[line: 104] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20170115182126',)
2017-01-15 18:21:36,422 htmlreporter.py[line: 146] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]已运行的测试用例
2017-01-15 18:21:36,423 mydb.py[line: 104] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20170115182126')
2017-01-15 18:21:36,424 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=148]步骤运行结果
2017-01-15 18:21:36,424 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_pos', '无计划', 148, '20170115182126')
2017-01-15 18:21:36,426 htmlreporter.py[line: 146] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]已运行的测试用例
2017-01-15 18:21:36,426 mydb.py[line: 104] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20170115182126')
2017-01-15 18:21:36,427 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=98]步骤运行结果
2017-01-15 18:21:36,428 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 98, '20170115182126')
2017-01-15 18:21:36,429 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=106]步骤运行结果
2017-01-15 18:21:36,429 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 106, '20170115182126')
2017-01-15 18:21:36,431 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=110]步骤运行结果
2017-01-15 18:21:36,431 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 110, '20170115182126')
2017-01-15 18:21:36,432 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=120]步骤运行结果
2017-01-15 18:21:36,432 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 120, '20170115182126')
2017-01-15 18:21:36,434 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=102]步骤运行结果
2017-01-15 18:21:36,434 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 102, '20170115182126')
2017-01-15 18:21:36,436 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=80]步骤运行结果
2017-01-15 18:21:36,436 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 80, '20170115182126')
2017-01-15 18:21:36,438 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=114]步骤运行结果
2017-01-15 18:21:36,438 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 114, '20170115182126')
2017-01-15 18:21:36,439 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=93]步骤运行结果
2017-01-15 18:21:36,440 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 93, '20170115182126')
2017-01-15 18:21:36,441 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=88]步骤运行结果
2017-01-15 18:21:36,441 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 88, '20170115182126')
2017-01-15 18:21:36,443 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=126]步骤运行结果
2017-01-15 18:21:36,443 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 126, '20170115182126')
2017-01-15 18:21:36,445 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=76]步骤运行结果
2017-01-15 18:21:36,445 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 76, '20170115182126')
2017-01-15 18:21:36,447 htmlreporter.py[line: 199] INFO: 正在设置测试报告结果文件名
2017-01-15 18:21:36,447 htmlreporter.py[line: 209] INFO: 测试报告文件名所在路径为：E:\\Projects\\report\\test_report20170115182126.html
2017-01-15 18:21:36,447 htmlreporter.py[line: 202] INFO: 正在生成测试报告
2017-01-15 18:21:36,450 main.py[line: 265] INFO: 生成测试报告成功
2017-01-15 18:21:36,620 main.py[line: 272] INFO: E:\\Projects\\report\\test_report20170115182126.html
2017-01-15 18:21:36,621 main.py[line: 275] INFO: 正在发送测试报告邮件...
2017-01-15 18:21:37,220 main.py[line: 279] INFO: 发送邮件成功
2017-01-15 18:33:27,451 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 18:33:27,451 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 18:33:27,467 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 18:33:27,472 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 18:33:27,533 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 18:33:27,533 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 18:33:27,535 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 18:33:27,535 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 18:33:27,537 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 18:33:27,540 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 18:33:27,541 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 18:33:27,756 global_function.py[line: 19] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2016-11-30 15:41:36', 'node_order': '1000', 'execution_type': '1', 'status': '1', 'name': 'test-n-登陆掌贝pos机', 'author_first_name': 'Testlink', 'active': '1', 'author_id': '1', 'testsuite_id': '147', 'id': '149', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '148', 'full_tc_external_id': 'pj_pos-1', 'summary': '', 'steps': [{'active': '1', 'step_number': '1', 'id': '183', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1'}, {'active': '1', 'step_number': '2', 'id': '182', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'execution_type': '1'}, {'active': '1', 'step_number': '3', 'id': '150', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}], 'tc_external_id': '1', 'layout': '1', 'creation_ts': '2016-07-27 18:32:10', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': '<p>\n\t初始化用例</p>\n'}]
2017-01-15 18:33:28,013 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 18:33:28,727 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:28,727 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 18:33:28,728 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 18:33:28,728 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 18:33:28,729 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 18:33:28,729 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:28,729 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:28,730 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:33:28,730 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:33:28,730 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 18:33:28,734 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 18:33:28,734 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 18:33:28,735 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 18:33:28,735 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:33:28,735 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:33:28",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115183327 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:33:28,737 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 18:33:28,737 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 18:33:28,737 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:28,737 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:28,739 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:33:28,739 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 18:33:28,739 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 18:33:28,739 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 18:33:28,741 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 18:33:28,742 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 18:33:28,742 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 18:33:28,742 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:33:28,742 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:33:28",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'serial_no': 2, 'device_no': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115183327 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:33:28,744 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 18:33:28,744 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 18:33:28,744 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:28,744 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:28,745 testcase.py[line: 78] INFO: 开始执行步骤操作[第3步]
2017-01-15 18:33:28,745 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 18:33:28,745 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:33:28,746 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:33:28,746 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 18:33:28,746 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 18:33:28,746 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 18:33:28,746 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 18:33:28,746 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 18:33:28,746 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 18:33:28,746 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 18:33:28,747 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 18:33:28,747 httpprotocol.py[line: 76] INFO: 请求头为：{'ProductVersion': '[global_product_version]', 'SerialNo': '[CaseStep.serial_no]', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'ProtocolVersion': '4.0'}
2017-01-15 18:33:29,128 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 18:33:29,128 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 18:33:29,128 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:33:26 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:33:29,128 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:33:29,128 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 18:33:29,128 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 18:33:29,129 testcase.py[line: 130] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 18:33:29,129 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 18:33:29,129 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 18:33:28",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'SerialNo': '[CaseStep.serial_no]', 'ProtocolVersion': '4.0', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '[CaseStep.device_no]', 'ProductVersion': '[global_product_version]'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'条件': [{'消息': '登录失败,success不为true', '模式': {'success': True}}, {'消息': 'message不为成功', '模式': {'message': '成功'}}, {'消息': 'code不为4001', '模式': {'code': '4001'}}], '匹配规则': '键值相等', '输出': {'Token': {'token': 'value'}, 'OperatorId': {'operator': {'id': 'value'}}}, '检查': 'body'}" WHERE executed_history_id = 20170115183327 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:33:29,131 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:33:29,131 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:33:28" WHERE executed_history_id = 20170115183327 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:33:29,133 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 18:33:29,133 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_json>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 126, in test_interface_of_json\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 登录失败,success不为true\n')])
2017-01-15 18:33:29,133 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 18:33:29,133 main.py[line: 115] INFO: 运行指定项目
2017-01-15 18:33:29,261 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 18:33:29,261 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 18:33:29,262 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 18:33:29,262 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 18:33:29,404 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 18:33:29,528 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 18:33:29,528 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 18:33:29,652 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['102', '93', '106', '114', '98', '120', '76', '88', '80', '126', '110'])
2017-01-15 18:33:29,772 testplan.py[line: 45] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2016-11-29 18:14:53', 'node_order': '1001', 'execution_type': '1', 'status': '1', 'name': 'test-n-点击立即购买按钮', 'author_first_name': 'Testlink', 'active': '1', 'author_id': '1', 'testsuite_id': '79', 'id': '103', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '102', 'full_tc_external_id': 'wecharno-7', 'summary': '', 'steps': [{'active': '1', 'step_number': '1', 'id': '104', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/mall/tobuy/1?&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:&quot;26838&quot;,&quot;amount&quot;:1,&quot;type&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;到店支付&quot;,&quot;消息&quot;:&quot;无法打开商品详情&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}], 'tc_external_id': '7', 'layout': '1', 'creation_ts': '2016-07-20 16:48:26', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': ''}]
2017-01-15 18:33:29,905 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:29,905 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 102, 'test-n-点击立即购买按钮', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:33:29,907 testplan.py[line: 72] INFO: 开始执行测试用例[id=102，name=test-n-点击立即购买按钮]
2017-01-15 18:33:29,908 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}
2017-01-15 18:33:29,908 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}
2017-01-15 18:33:29,908 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:29,908 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 102, 'test-n-点击立即购买按钮', 'plan1_of_wechatno', 'pj_wechatno', 104, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:29,910 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:33:29,910 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:33:29,910 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:33:29,910 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', '26838'), ('amount', 1), ('type', 1), ('serial', '10549840601068216320')])
2017-01-15 18:33:29,910 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:33:29,911 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:33:29,911 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/mall/tobuy/1?mallGoodsId=26838&amount=1&type=1&serial=10549840601068216320
2017-01-15 18:33:29,911 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:33:30,300 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:33:30,300 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 
	 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta http-equiv="Expires" CONTENT="0">
<meta http-equiv="Cache-Control" CONTENT="no-cache">
<meta http-equiv="Pragma" CONTENT="no-cache">
<title>微商城</title>
<link rel="stylesheet" href="/css/mall/pure.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/grids-core.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/zepto.alert.css?v=5.0.0-faae2">

<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.ios7.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.animation.css?v=5.0.0-faae2">
</head>
<style type="text/css">
* {
	margin: 0;
	padding: 0;
}

html {
	color: #626262;
	overflow-y: auto;
	overflow-x: hidden;
}

body {
	margin-bottom: 20px;
	overflow-y: auto;
	overflow-x: hidden;
}

a {
	text-decoration: none;
}

ol,ul {
	list-style: outside none none;
}

.left {
	float: left;
}

.right {
	float: right;
}

.in-block {
	display: inline-block;
}

.orange {
	color: #c58d04;
}

.grey {
	color: #adadad;
}

.bg-color {
	background: #ececec;
}

#wrapper {
	width: 100%;
	margin: 0 auto;
}

.header {
	width: 100%;
}

.header ul {
	position:relative;
	overflow: hidden;
}

.header ul li {
	width: 50%;
	float: left;
	height: 2.8em;
	line-height: 2.8em;
	background: #fff;
	text-align: center;
	border-bottom:1px solid #f38b44;
	-moz-box-sizing:border-box; /* Firefox */
     -webkit-box-sizing:border-box; /* Safari */
     box-sizing:border-box;
}
.header ul .lines{
	position: absolute;
	width: 1%;
	height: 2.8em;
	line-height: 2.8em;
	border-right: 1px solid #FDE5D4;
	left: 49%;
	top: -1px;
 } 
.header ul li a {
	color: #8b898a;
}

.tab_content>div {
	height: auto;
	font-size: 0.8em;
	margin: 0.5em 0;
}

.empty-p {
	width: 80%;
	float: left;
	padding: 0.5em 0;
}

.has-p {
    width: 100%;
    margin: 0 auto;
    padding: 0 1em;
    height: auto;
    line-height: 2.5em;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -webkit-box-sizing: -webkit-border-box;
}
.has-p-one{
    background: url(/images/mall/contact.png) no-repeat left center;
    background-size: 12px 12px;
}
.has-p-two{
    background: url(/images/mall/take.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.has-p-three{
    background: url(/images/mall/time.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.input-right{
    position: relative;
}
.input-right-img{
    width: 1em;
    position: absolute;
    right: 0.6em;
    top: 0.3em;
}
#scheduledTime{
    width:11em;
    height: 2em;
    border:1px solid #a0a0a0;
    border-radius:4px;
    color:#a0a0a0;
    text-indent:.5em
}
.hiddens-p{
    text-overflow:ellipsis; 
    overflow:hidden; 
    white-space:nowrap;  
}

.right-dashed {
	border-left: 1px solid #eee;
	margin-top: 1em;
	padding-bottom:1em;
}

#edit {
	padding: 1em 0 1em 2em;
    width: 10px;
}

.header ul li.active{
    border-bottom: 4px solid #f38b44;
}
.header ul li.active a{
    color: #f38b44!important;
}
.buy_title{
	background:#f3f3f3;
	padding:0.3em 1em;
	margin: 0;
}
.content {
	width: 100%;
	background: #fff;
	overflow: hidden;	
	padding-bottom:8%;
}

.selectList {
	border-bottom: 1px solid #efefef;
	margin: 0 auto;
	overflow: hidden;
	padding: 0.5em 1em;
	font-size: 0.8em;
	clear:both;
}

.selectList img {
    display: inline-block;
    float: left;
    width: 25%;
    border-radius: 4px;
    -webkit-border-radius: 4px;
}

.button {
	display:block;	
	width: 99%;	
	height: 3em;
	color: #fff;
	border: none;
	border-radius: 4px;
	margin:0 auto 0.5em auto;
}

.addbtn {
	background: #33CC66;
}

.btn-wrap-5 {
	padding: 0 1em;
}
.buybtn {
	width: 100%;
	background: #f68d3c;
}

.footer {
	width: 100%;
	background: #fff;
	color: #b6b6b6;
	overflow: hidden;
	text-align: left;
	margin-bottom: 1em;
}

.all-end-button {
	width: 90%;
	margin: 1em auto 0.5em;
}

.all-end-button p:first-child {
	text-align: left;
}

.error-page{
	background: #ddd;
    padding-bottom: 2em;
}
.error-page img{
    margin:0 auto;
	padding-top: 2em;
}
.error-page p{
    text-align:center;
    color:#000;
    width:80%;
    margin:1em auto 2em;
}
#deliverFee{
	text-align:left;
	font-size:0.8em;
	color:#acb0af;
}
.order-div{
    margin-left: 26.8%;            
    position: relative;
}
.order-div>p:last-child{
    width: 100%;
    margin: 0;
    position: absolute;
    bottom: 0;
    left: 0;
}
.m-t-n{
    margin-top: 0;
}
.m-t-n>span{
    display: inline-block;
}
.m-t-n>span:first-child{
    width: 70%;
}
.m-t-n>span:last-child{
    width: 30%;
}
.mtn-span{
    float: right;
}
.t-r-span{
	text-align:right;
}
.ccc{
    color: #ccc;
}
.peisong{
    text-align: right;
    margin-bottom: 0;
    padding-right: 1em;
    padding-top: 0.4em;
}
.peisong-detail{
    color:#000;
}
.peisong-detail input{
    border: none;
}
.peisong-detail div>p{
    padding-left: 1.8em;
    padding-top: 0.8em;
    padding-bottom: 0.8em;
    margin: 0;
    clear:both;
}

.weipay{            
    background: url(/images/weixin2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}        
.peisong-detail div>p.pay{
    background: url(/images/money2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.cardpay{
    background: url(/images/cardpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.mdpay{
    background: url(/images/mdpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}

.peisong-detail div[class^="btn-wrap-"] {
	border-bottom: 1px solid #dadada;
	padding: 0 1em;
	height: 3em;
	position: relative;
}

.weipay,.pay,.mdpay,.cardpay{
    position: relative;
}
 .weipay>img,.mdpay>img,.pay>img,.cardpay>img,.zhifu input{
    width: 1.2em;
    height: 1.2em;
    position: absolute;
    right: 0;
    top: 50%;
    transform:translateY(-50%);
}

.pure-img-check {
	background: url(/images/weixuan2.png) no-repeat left center;
    background-size:1.05em 1.05em; 
    float: right;
    height: 1.05em;
    width: 1.05em;
}

.zhifu input{
    display: none;
}
#deliverFeeDiv, #FetchDiv {
	border-bottom: 1px solid #efefef;
    padding: 0.5em 1em;
}
#deliverFeeDiv p, #FetchDiv p{
	text-align:right;
}

#remark {
	padding: 0.5em 1em;
	height: 4em;
	font-size: 1.0em;
}

.tab-adress {
	position: relative;
}
.icon-wrap {
	/*float: right;*/
	position: absolute;
	top: 11px;
	right: 10px;
}
.icon-wrap-spe {
	top: 0;
}

/*toast提示*/
.toastBlock {
    display: none; 
    position: fixed;
    bottom: 50%;
    width: 100%;
    text-align: center;
    transition: opacity 1s ease-out;
    z-index: 19;
}
.toastBlock .toastContent {
    display: inline-block;
    padding: 18px;
    border-radius: 5px;
    font-size: 14px;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.7);
}
</style>
<body>
	<div id="wrapper">
		
			
			
			
				
					
					
						
						
						
						
						
					
					
				
				
			
			<div class="header">
				
					<ul class="tab">
						<li class='active' data='#deliverFeeDiv'><a href="#tab1">快递发货</a></li>						
						<li class=''><a href="#tab2">到店自提</a></li>
						<span class="lines"></span>
					</ul>
				
			</div>
			<p class="buy_title"></p>
			
			<div class="tab_container">
				<div id="tab1" class="tab_content pure-g" style="">
					<div class="pure-u-24-24 tab-adress j-tab-adress">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">17817738178<span>(17817738178)</span></span>
								</div>
								<div class="has-p">
									<span>配送地址：</span>
									<span class="pure-u-3-5">天津市县宁河县详细</span>
                                </div>

                                <span class="icon-wrap">
                                	
                                		
                                		
                                		<a class="url_adress" href="/toaddr/1?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
                                		</a>
                                		
                                	
                                </span>
							
							
						
					</div>
				</div>
				<div id="tab2" class="tab_content pure-g" style="display:none">
					<div class="pure-u-24-24">
						
							
								<div class="tab-adress j-tab-adress">
									<div class="has-p">
										<span>联系方式：</span>
										<span class="pure-u-3-5">452<span>(17817738178)</span></span>
									</div>
	                                <div class="has-p">
	                                	<span>门&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;店：</span>
	                                	<span class="pure-u-3-5">
	                                		广东省深圳市福田区
		                                	
		                                		Biu
		                                	
	                                	</span>
	                                </div>
	                                <span class="icon-wrap">
	                                	
	                                		
	                                		
	                                		<a class="url_adress" href="/toaddr/2?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
	                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
	                                		</a>
	                                		
	                                	
	                                </span>
                                </div>
                               	<div class="has-p">
                               		<span>到店时间：</span>
                               		<span class="input-right">
                               			<input type="text" id="scheduledTime" name="scheduledTime" class="text" placeholder="请选择"/><img src="/images/mall/input-right.png?v=5.0.0-faae2" class="input-right-img">
                               		</span>
                               	</div>
							
							
						
					</div>
				</div>
			</div>
			<p class="buy_title"></p>
			
			<div class="content">
				
					
						
							<div class="selectList">
								<img src="http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg"> 
								
									
									
										<div class="order-div">
											<p class="m-t-n"><span>接口-测试商品1</span><span class="mtn-span t-r-span">￥0.01</span></p>
											<p><span class="ccc mtn-span">X1</span></p>
                                        </div>	
									
								
							</div>
						
					
					
					
				
				<div id="deliverFeeDiv">
					 
						
						
							<p id="deliverFee">含运费：￥0.01</p>
							<p class="orange">合计：￥0.02</p>
						
					 
				</div>
				<div id="FetchDiv" style="display: none;">
					<p class="orange">合计：￥0.01</p>
				</div>
				<div id="remark">
					<span class="beizhu" style="float:left">备注：</span>
                   	<span class="beizhulan">
                   		<textarea rows="3" placeholder="可于此处给卖家留言备注" style="border:0;width: 85%;"></textarea>
                   	</span>
				</div>
			</div>
			<p class="buy_title"></p>
			<div class="footer">
				<div class="peisong-detail zhifu">
                	
                        <div class="btn-wrap-1">
                         	<p class="weipay">微信支付<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="1"/>
                         	</p>
                        </div>
                    
                  	
                  	
                        <div class="btn-wrap-2" style="">
                         	<p class="pay">货到付款<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="3"/>
                         	</p>
                        </div>
                   	
		
                    
                        <div class="btn-wrap-3" style="display:none">
                        	<p class="mdpay">到店支付<span class="pure-img-check"></span>
                        		<input type="radio" name="zhifu" value="2"/>
                        	</p>
                        </div>
                   	
                   	
                   	
                        <div class="btn-wrap-4">
                       		<p class="cardpay">储值卡支付<span class="pure-img-check"></span>
                       			<input type="radio" name="zhifu" value="4"/>
                       		</p>
                        </div>
                   	
                </div>
			</div>
			<div class="btn-wrap-5">
				<input type="button" class="button buybtn submit" value="确认提交" />
			</div>

			<div id="toastId" class="toastBlock">
			    <span class="toastContent"></span>
			</div>
			
		
	</div>
	<script type="text/javascript" src="/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/touch.js?v=5.0.0-faae2"></script>
    
	<script type="text/javascript" src="/js/mall/zepto.alert.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mall.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.zepto.js?v=5.0.0-faae2" ></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.core.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.scroller.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.datetime.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.i18n.zh.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			$("input[name='zhifu']:checked").prev('.pure-img').attr('src','/images/check.png');
			var tab = parseInt("1");
			/* if(tab == 1){
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else if (tab == 0){
			    $("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} else if(parseInt("1") != 0){
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} */
			
			if ("true" == "true" && 1 == 1) {
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else {
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			}
			
			// 控制显示图片比例
			var img_left_heights = $(".selectList img").width()*(0.75);
			$(".selectList img,.order-div").css('height',img_left_heights);
			
			// 取货日期
			var now = new Date();
            $('#scheduledTime').mobiscroll().datetime({
                minDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()+1),
                maxDate: new Date(now.getFullYear(), now.getMonth()+3, now.getDate()),
                stepMinute: 30,
                dateOrder :"yymmdd",
                dateFormat:"yy-mm-dd",
                timeWheels:"HHii",
                timeFormat:"HH:ii",
                //invalid: [{ start: '00:00', end: '08:00' },{ start: '22:00', end: '23:59' }],
                theme: 'ios7',
                lang: 'zh',
                display: 'bottom',
                mode: 'mixed'
            });
            $('#scheduledTime').click(function(){
                $('#scheduledTime').mobiscroll('show'); 
                return false;
            });
            
			$("ul li").click(function() {
				$("ul li").removeClass("active");
				$(this).addClass("active");
				if($(this).attr("data")=="#deliverFeeDiv"){
					$("#deliverFeeDiv").show();
					$("#FetchDiv").hide();
				}else{
					$("#deliverFeeDiv").hide();
					$("#FetchDiv").show();
				}
				$(".tab_content").hide();
				var href = $(this).find("a").attr("href");
				$(href).show();
				
				if(href.endWith("tab1")) {
					$(".btn-wrap-2").show();
					$(".btn-wrap-3").hide();
				} else if(href.endWith("tab2")) {
					$(".btn-wrap-2").hide();
					$(".btn-wrap-3").show();
				}
				//清空已选择的支付方式
				$("input[name='zhifu']").prop("checked", false);
				$(".zhifu .pure-img-check").css('background-image','url(/images/weixuan2.png)');
				return false;
			});
			//商户设置的满额包邮价
			/* var noDeliverFee = toPrice(parseFloat("200")/100);
			var totalFee = parseFloat("0.01");
			if(totalFee > noDeliverFee){
				$("#deliverFeeDiv .orange").text("合计：￥"+ totalFee);
				$("#deliverFee").text("含运费：￥0.00");
			} */
			$('.zhifu>div').click(function(){
	            $("input[name=zhifu]").prop("checked", false);
	            $(".pure-img-check").css('backgroundImage','url(/images/weixuan2.png)');
	            var img_obj = $(this).find('.pure-img-check');
	            var backgroundImage = img_obj.css('background-image');
	            var input_obj = $(this).find('input');
	            if(backgroundImage.indexOf("weixuan2.png") > 0){
	                img_obj.css('background-image','url(/images/check.png)');
	                input_obj.prop("checked", "checked");
	            }else{
	                img_obj.css('background-image','url(/images/weixuan2.png)');
	                input_obj.prop("checked", false);
	            }
	        });


	        $(".j-tab-adress").click(function(event) {
	        	var _url = $(this).find('.url_adress').prop("href");

	        	window.location.href = _url;
	        });
		});
		
		function validateRemark(){
			var text = filtEmoji($('.beizhulan textarea').val());
			if(text != "" && text != undefined){
				if(text.length>30){
					$.dialog({
                        widths : '80%',
                        content : '您输入的备注过长，请不要超过30个字',
                        title : 'no',
                        fullok : function() {
                            return true;
                        },                       
                        lock : true
                    });	
					return false;
				}
				return true;
			}
			return true;
		}
		function filtEmoji (str) {
			return unescape(escape(str).replace(/\%uD.{3}/g, ''));
		}
		
		$(".submit").click(function(event){
			var payType = $("input[name='zhifu']:checked").val();
			if(null == payType || "" == payType || typeof(payType) == "undefined") {
       		 $.dialog({
                    widths : '80%',
                    content : '请选择支付方式',
                    title : 'no',
                    fullok : function() {
                        return true;
                    },                       
                    lock : true
                });
       			return;
       		}
			$.dialog({
                content : "确认提交订单？",
                title : "no",
                okText: '取消',
                cancelText : '确定', 
                ok : function() {
                	$(".ft-right").removeAttr("disabled");
                	return;
                },
                cancel : function() {                        	
               		
               		if(payType == 1){
               			if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				doAlert("no", "无效物流方式");
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@20052441";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/1", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "id=" + result.attach;
            	    			strParams += "&serial=10549840601068216320";
            	    			if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
            	        	});
            			}
               		}
               		
    				if(payType == 2){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@20052441";
    					if(shopBranch == "") {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					var _fetchTime = $("#scheduledTime").val();
    					if(null == _fetchTime || "" == _fetchTime) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请选择取货时间',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						
    						var _remark = filtEmoji($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							fetchTime : _fetchTime,
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/2/2", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 3){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑收货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });

    						var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
    						// var _remark = encodeURI($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/1/3", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 4){
    					if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				$.dialog({
        	                    widths : '80%',
        	                    content : '无效物流方式',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@20052441";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
            			// var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/4", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "?orderId=" + result.attach;
            					if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            					strParams += "&serial=10549840601068216320";
                				window.location.href = "/pay/5"+strParams;
            	        	});
            			}
            			
    				}
    				
                },
                lock : true
            });
		});
		
		//微信支付
		/* $(".payUseWX").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			var type = 0;
			$(".tab_content").each(function(){
				if($(this).css("display") != "none") {
					var attrId = $(this).attr("id");
					if(attrId == "tab1") {
						type = 1;//快递取货
					} else if(attrId == "tab2") {
						type = 2;//门店自提
					}
				}
			});
			if(type <= 0) {
				doAlert("no", "无效物流方式");
				return;
			}
			if(type == 1) {
				if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑收货地址");
					return;
				}
			}
			var _fetchTime = "";
			if(type == 2) {
				if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑取货地址");
					return;
				}
				_fetchTime = $("#scheduledTime").val();
				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
					doAlert("no", "请选择取货时间");
					return;
				}
				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@20052441";
				if(shopBranch == "") {
					doAlert("no", "请编辑取货地址");
					return;
				}
			}
			
			var _remark = encodeURI($(".beizhulan").find("textarea").val());
			var params = {
				serial : "10549840601068216320",
				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
				fm : "1",
				mallGoodsId : "26838",
				amount : "1",
				cartIds : "",
				fetchTime : _fetchTime,
				remark : _remark
			};
			if(parseInt("1") == 1 && parseInt("1") == 2){
				var standardId = "";
				if(standardId != null && standardId != undefined){
					params.standardId = standardId;
				}
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				$.post("/cmorder/" + type+ "/1", params, function(result){
					dialog.close();
					
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					
					var strParams = "id=" + result.attach;
	    			strParams += "&serial=10549840601068216320";
	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
	        	});
			}
		}); */
		//货到付款
		/* $(".payAfrecv").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑收货地址");
				return;
			}
			
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				var _remark = encodeURI($(".beizhulan").find("textarea").val());
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/1/3", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
	        	});
			}
		}); */
		//到店支付
		// $(".payInshop").click(function(event) {
			/* if($(this).prop("disabled") == true)
        		return false;
			
			var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@20052441";
			if(shopBranch == "") {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			var _fetchTime = $("#scheduledTime").val();
			if(null == _fetchTime || "" == _fetchTime) {
				doAlert("no", "请选择取货时间");
				return;
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				
				var _remark = $(".beizhulan").find("textarea").val();
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					fetchTime : _fetchTime,
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/2/2", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
	        	});
			} */
		// });
	
		// toast提示
		var toastTime=null;
		var displayTime=null;

		function setToast(html) {
		    if (toastTime != null) {
		        clearTimeout(toastTime);
		        clearTimeout(displayTime);
		    }
		    // $('toastId').style.display = 'block';
		    // $('toastId').style.opacity = 1;
		    $('#toastId').css({
		        display: 'block',
		        opacity: 1
		    });
		    $('#toastId .toastContent').text(html);

		    toastTime = setTimeout(function() {
		        // $('toastId').style.opacity = 0;
		        $('#toastId').css("opacity", 0);
		        displayTime = setTimeout(function() {
		            // $('toastId').style.display='none';
		            $('#toastId').css("display", "none");
		        }, 1000);
		    }, 1000);
		}

		function toastDisplay(str) {
		    setToast(str);
		}
	</script>
</body>
</html>
<!--加入判断用户是否关注公众号功能 add by lipengfei at 2015-11-9  -->
  	
	<script type="text/javascript" src="/js/bind/banner.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			//var SHOP_SERIAL = getCookie("SHOP_SERIAL");
			var SHOP_SERIAL = "10549840601068216320";
			if(null != SHOP_SERIAL && SHOP_SERIAL != ""){
				$.ajax({
					url : '/saofu_mobile/checkUserBindStatus',
					data : {
						"serial" : SHOP_SERIAL
					},
					type : 'post',
					cache : false,
					dataType : 'json',
					success : function(data) {
						if (data != null) {
							var guildFocusStr = data.guildFocusStr;
							if(guildFocusStr != null && guildFocusStr == "1"){
								var hasBindedShop = data.hasBindedShop;
								if(hasBindedShop == "0"){
									var qrName = data.QRPublicName;
									var qrUrl = data.QRCodeURL;
									if(qrName != "" && qrUrl != ""){
										var params = qrName+"**"+qrUrl;
										followModule(params);
									}
								}
							}
						} 
					},
					error : function() {
					}
				});
			}
		});
				
	</script>

2017-01-15 18:33:30,306 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:33:27 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=BEF6CE7DD60A939FE82BD2E1612581D6; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 18:33:30,306 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:33:30,306 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：到店支付
2017-01-15 18:33:30,306 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:33:30,307 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:33:30,307 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:33:29",step_action="{'\u65b9\u6cd5': 'get', 'url': '/mall/tobuy/1?', '\u53c2\u6570': {'mallGoodsId': '26838', 'amount': 1, 'type': 1, 'serial': '10549840601068216320'}}", expected_results="{'条件': [{'消息': '无法打开商品详情', '模式': '到店支付'}], '匹配规则': '包含字符串', '检查': 'body'}" WHERE executed_history_id = 20170115183327 AND testcase_id = 102 AND step_id = 104 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:30,309 testcase.py[line: 162] INFO: 测试用例[id=102, name=test-n-点击立即购买按钮]执行成功
2017-01-15 18:33:30,309 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:33:30,309 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:33:29" WHERE executed_history_id = 20170115183327 AND testcase_id = 102 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:30,441 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=102]的执行结果
2017-01-15 18:33:30,702 testplan.py[line: 45] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2016-11-29 18:05:21', 'node_order': '1000', 'execution_type': '1', 'status': '1', 'name': 'test-n-把商品移出购物车', 'author_first_name': 'Testlink', 'active': '1', 'author_id': '1', 'testsuite_id': '91', 'id': '94', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '93', 'full_tc_external_id': 'wecharno-5', 'summary': '', 'steps': [{'active': '1', 'step_number': '1', 'id': '95', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,</p>\n<p>\n\t&quot;用例id&quot;:88,</p>\n<p>\n\t&quot;用例名称&quot;:&quot;test-n-把商品加入购物车&quot;<br />\n\t}</p>\n<p>\n\t&nbsp;</p>\n', 'expected_results': '', 'execution_type': '1'}, {'active': '1', 'step_number': '2', 'id': '96', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cart/delfromcart?&quot;,<br />\n\t&quot;参数&quot;:{&quot;strIds&quot;:&quot;[CaseStep.strIds]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品移出购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}, {'active': '1', 'step_number': '3', 'id': '178', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;[]&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}], 'tc_external_id': '5', 'layout': '1', 'creation_ts': '2016-07-20 12:25:46', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': ''}]
2017-01-15 18:33:30,826 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:30,827 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 93, 'test-n-把商品移出购物车', '微商城-把商品移出购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:33:30,828 testplan.py[line: 72] INFO: 开始执行测试用例[id=93，name=test-n-把商品移出购物车]
2017-01-15 18:33:30,829 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} 
2017-01-15 18:33:30,829 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:33:30,829 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:30,829 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 95, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} ', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:30,831 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:33:31,097 global_function.py[line: 19] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2017-01-15 17:46:37', 'node_order': '1000', 'execution_type': '1', 'status': '1', 'name': 'test-n-把商品加入购物车', 'author_first_name': 'Testlink', 'active': '1', 'author_id': '1', 'testsuite_id': '87', 'id': '89', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '88', 'full_tc_external_id': 'wecharno-4', 'summary': '', 'steps': [{'active': '1', 'step_number': '1', 'id': '175', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}, {'active': '1', 'step_number': '2', 'id': '174', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '', 'execution_type': '1'}, {'active': '1', 'step_number': '3', 'id': '90', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}, {'active': '1', 'step_number': '4', 'id': '176', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1'}, {'active': '1', 'step_number': '5', 'id': '177', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}], 'tc_external_id': '4', 'layout': '1', 'creation_ts': '2016-07-20 12:07:40', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': ''}]
2017-01-15 18:33:31,357 global_function.py[line: 39] INFO: 正在读取套件[id=87]的协议，host，端口配置...
2017-01-15 18:33:31,677 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:31,677 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 88, 'test-n-把商品加入购物车', '把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 18:33:31,679 global_function.py[line: 71] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 18:33:31,679 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 18:33:31,679 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 18:33:31,679 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:31,679 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:31,681 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:33:31,681 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:33:31,681 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 18:33:31,681 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 18:33:31,684 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 18:33:31,684 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 18:33:31,684 testcase.py[line: 115] ERROR: 步骤[1]执行出错,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 18:33:31,685 testcase.py[line: 122] INFO: 正在更新步骤执行结果
2017-01-15 18:33:31,685 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="1054 (42S22): Unknown column channel_serial1 in where clause", protocol_method="无", runtime="2017-01-15 18:33:31",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial1=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115183327 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:31,687 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:33:31,687 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:33:31" WHERE executed_history_id = 20170115183327 and testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:31,688 global_function.py[line: 82] INFO: 指定用例[88]已执行完
2017-01-15 18:33:31,688 testcase.py[line: 115] ERROR: 步骤[1]执行出错,停止执行用例[id=93, name=test-n-把商品移出购物车]
2017-01-15 18:33:31,688 testcase.py[line: 122] INFO: 正在更新步骤执行结果
2017-01-15 18:33:31,688 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="1054 (42S22): Unknown column channel_serial1 in where clause", protocol_method="无", runtime="2017-01-15 18:33:30",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 88, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u628a\u5546\u54c1\u52a0\u5165\u8d2d\u7269\u8f66'}", expected_results="" WHERE executed_history_id = 20170115183327 AND testcase_id = 93 AND step_id = 95 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:31,690 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:33:31,690 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:33:30" WHERE executed_history_id = 20170115183327 AND testcase_id = 93 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:31,803 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=93]的执行结果
2017-01-15 18:33:32,183 testplan.py[line: 45] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2016-11-29 17:33:09', 'node_order': '1000', 'execution_type': '1', 'status': '1', 'name': 'test-n-创建储值卡支付订单', 'author_first_name': 'Testlink', 'active': '1', 'author_id': '1', 'testsuite_id': '105', 'id': '107', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '106', 'full_tc_external_id': 'wecharno-8', 'summary': '', 'steps': [{'active': '1', 'step_number': '1', 'id': '108', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1'}], 'tc_external_id': '8', 'layout': '1', 'creation_ts': '2016-07-21 11:26:32', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': ''}]
2017-01-15 18:33:32,309 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:32,309 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:33:32,310 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 18:33:32,310 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 18:33:32,310 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 18:33:32,310 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:32,310 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:32,312 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:33:32,312 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:33:32,313 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:33:32,313 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:33:32,313 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 18:33:32,313 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:33:32,313 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:33:32,313 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:33:32,314 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 18:33:32,314 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 18:33:32,314 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 18:33:32,361 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:33:32,361 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 18:33:32,362 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:33:30 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:33:32,362 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:33:32,362 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 18:33:32,364 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 18:33:32,364 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 18:33:32,364 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 18:33:32",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '匹配规则': '包含字符串', '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body'}" WHERE executed_history_id = 20170115183327 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:32,369 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:33:32,370 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:33:32" WHERE executed_history_id = 20170115183327 AND testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:32,511 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=106]的执行结果
2017-01-15 18:33:32,766 testplan.py[line: 45] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2016-11-29 17:52:17', 'node_order': '1000', 'execution_type': '1', 'status': '1', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'author_first_name': 'Testlink', 'active': '1', 'author_id': '1', 'testsuite_id': '113', 'id': '115', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '114', 'full_tc_external_id': 'wecharno-10', 'summary': '', 'steps': [{'active': '1', 'step_number': '1', 'id': '116', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'expected_results': '', 'execution_type': '1'}, {'active': '1', 'step_number': '2', 'id': '117', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}], 'tc_external_id': '10', 'layout': '1', 'creation_ts': '2016-07-25 15:02:41', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': ''}]
2017-01-15 18:33:32,918 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:32,918 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:33:32,920 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 18:33:32,920 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 18:33:32,920 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:33:32,920 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:32,920 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:32,922 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:33:33,078 global_function.py[line: 19] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2016-11-29 17:33:09', 'node_order': '1000', 'execution_type': '1', 'status': '1', 'name': 'test-n-创建储值卡支付订单', 'author_first_name': 'Testlink', 'active': '1', 'author_id': '1', 'testsuite_id': '105', 'id': '107', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '106', 'full_tc_external_id': 'wecharno-8', 'summary': '', 'steps': [{'active': '1', 'step_number': '1', 'id': '108', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1'}], 'tc_external_id': '8', 'layout': '1', 'creation_ts': '2016-07-21 11:26:32', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': ''}]
2017-01-15 18:33:33,213 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 18:33:33,463 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:33,463 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 18:33:33,464 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 18:33:33,464 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 18:33:33,464 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 18:33:33,464 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:33,464 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:33,466 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:33:33,466 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:33:33,466 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:33:33,466 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:33:33,466 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 18:33:33,466 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:33:33,466 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:33:33,467 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:33:33,467 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 18:33:33,467 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 18:33:33,467 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}
2017-01-15 18:33:33,509 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:33:33,509 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 18:33:33,509 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:33:31 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:33:33,509 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:33:33,509 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 18:33:33,510 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 18:33:33,510 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 18:33:33,510 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 18:33:33",step_action="{'\u8bf7\u6c42\u5934': {'charset': 'utf-8', 'Content-Type': 'application/x-www-form-urlencoded'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '匹配规则': '包含字符串', '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body'}" WHERE executed_history_id = 20170115183327 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:33,512 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:33:33,512 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:33:33" WHERE executed_history_id = 20170115183327 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:33,513 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 18:33:33,513 testcase.py[line: 130] INFO: 步骤[1]执行失败,停止执行用例[id=114, name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 18:33:33,513 testcase.py[line: 137] INFO: 正在更新步骤执行结果
2017-01-15 18:33:33,513 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="无", runtime="2017-01-15 18:33:32",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 106, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u521b\u5efa\u50a8\u503c\u5361\u652f\u4ed8\u8ba2\u5355'}", expected_results="" WHERE executed_history_id = 20170115183327 AND testcase_id = 114 AND step_id = 116 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:33,515 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:33:33,515 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:33:32" WHERE executed_history_id = 20170115183327 AND testcase_id = 114 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:33,648 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=114]的执行结果
2017-01-15 18:33:33,916 testplan.py[line: 45] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2016-11-29 18:13:45', 'node_order': '1000', 'execution_type': '1', 'status': '1', 'name': 'test-n-查看购物车商品列表', 'author_first_name': 'Testlink', 'active': '1', 'author_id': '1', 'testsuite_id': '97', 'id': '99', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '98', 'full_tc_external_id': 'wecharno-6', 'summary': '', 'steps': [{'active': '1', 'step_number': '2', 'id': '101', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;code&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;200&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}], 'tc_external_id': '6', 'layout': '1', 'creation_ts': '2016-07-20 15:50:42', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': ''}]
2017-01-15 18:33:34,052 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:34,052 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 98, 'test-n-查看购物车商品列表', '微商城-查看购物车商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:33:34,054 testplan.py[line: 72] INFO: 开始执行测试用例[id=98，name=test-n-查看购物车商品列表]
2017-01-15 18:33:34,054 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2017-01-15 18:33:34,054 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}
2017-01-15 18:33:34,054 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:34,055 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 98, 'test-n-查看购物车商品列表', 'plan1_of_wechatno', 'pj_wechatno', 101, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:34,056 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:33:34,056 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:33:34,057 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:33:34,057 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:33:34,057 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 18:33:34,057 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:33:34,057 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:33:34,057 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2017-01-15 18:33:34,058 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:33:34,172 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:33:34,173 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"code":"4000","message":"Server Error"}
2017-01-15 18:33:34,173 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:33:31 GMT'), ('Content-Type', 'application/json;charset=ISO-8859-1'), ('Content-Length', '56'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:33:34,174 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:33:34,174 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：200
2017-01-15 18:33:34,174 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:33:34,174 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:33:34,174 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:33:34",step_action="{'\u65b9\u6cd5': 'get', 'url': '/cartlist?', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'条件': [{'消息': '把商品移出购物车中失败', '模式': '200'}], '匹配规则': '包含字符串', '检查': 'code'}" WHERE executed_history_id = 20170115183327 AND testcase_id = 98 AND step_id = 101 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:34,176 testcase.py[line: 162] INFO: 测试用例[id=98, name=test-n-查看购物车商品列表]执行成功
2017-01-15 18:33:34,176 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:33:34,176 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:33:34" WHERE executed_history_id = 20170115183327 AND testcase_id = 98 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:34,297 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=98]的执行结果
2017-01-15 18:33:34,546 testplan.py[line: 45] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2016-07-29 18:31:36', 'node_order': '3', 'execution_type': '1', 'status': '1', 'name': 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', 'author_first_name': 'Testlink', 'active': '0', 'author_id': '1', 'testsuite_id': '109', 'id': '121', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '120', 'full_tc_external_id': 'wecharno-11', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n<p>\n\tulr中的40758966216286146560取自base_info.serial字段</p>\n', 'steps': [{'active': '1', 'step_number': '1', 'id': '122', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CMOrder&quot;,<br />\n\t&quot;function&quot;:&quot;test_create_mall_order&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;params&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:2,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;success&quot;:1,&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'execution_type': '1'}, {'active': '1', 'step_number': '2', 'id': '123', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;Pay5&quot;,<br />\n\t&quot;function&quot;:&quot;test_pay5&quot;,<br />\n\t&quot;method&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;button_name&quot;:&quot;确认支付&quot;, &quot;page_title&quot;:&quot;储值卡&quot;}</p>\n', 'execution_type': '1'}, {'active': '1', 'step_number': '3', 'id': '124', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;GetInCoupon&quot;,<br />\n\t&quot;function&quot;:&quot;test_get_in_coupon&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;params&quot;:&quot;&quot;<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;getByWeixin&quot;: 0, &quot;codeType&quot;: 2, &quot;title&quot;: &quot;动态校验&quot;, &quot;subTitle&quot;: &quot;动态校验&quot;, &quot;notice&quot;: &quot;动态校验&quot;, &quot;description&quot;: &quot;动态校验&quot;,&quot;useLimit&quot;:&quot;动态校验&quot;,&nbsp; &quot;dateInfoType&quot;: &quot;动态校验&quot;, &quot;cardType&quot;: 1,&quot;listing&quot;: 1, &quot;fitAll&quot;: 1,&quot;detailTxt&quot;: &quot;动态校验&quot;,&quot;servicePhone&quot;:&quot;动态校验&quot;,&quot;cashLeastCost&quot;: &quot;动态校验&quot;,&quot;cashReduceCost&quot;: &quot;动态校验&quot;,&quot;discount&quot;: 0,&quot;channel&quot;: -1,&quot;branchId&quot;: -1,&quot;success&quot;: 1, &quot;skuQuantity&quot;:&quot;动态校验&quot;,&quot;output_arg1&quot;:&quot;GetInCoupon.card_code&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}, {'active': '1', 'step_number': '4', 'id': '129', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_with_cash_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:&quot;[GetInCoupon.card_code]&quot;,&quot;yhCardType&quot;:&quot;CASH&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;,&quot;coupon_weixin_verification_record&quot;:1}</p>\n', 'execution_type': '1'}], 'tc_external_id': '11', 'layout': '1', 'creation_ts': '2016-07-26 12:12:10', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': ''}]
2017-01-15 18:33:34,665 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:34,665 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 120, 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:33:34,666 testplan.py[line: 72] INFO: 开始执行测试用例[id=120，name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]
2017-01-15 18:33:34,666 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 18:33:34,666 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:33:34,666 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 18:33:34" WHERE executed_history_id = 20170115183327 AND testcase_id = 120 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:34,782 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=120]的执行结果
2017-01-15 18:33:34,956 testplan.py[line: 45] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2016-11-29 18:17:12', 'node_order': '1000', 'execution_type': '2', 'status': '1', 'name': 'test-n-显示默认页面', 'author_first_name': 'Testlink', 'active': '1', 'author_id': '1', 'testsuite_id': '75', 'id': '77', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '76', 'full_tc_external_id': 'wecharno-1', 'summary': '', 'steps': [{'active': '1', 'step_number': '1', 'id': '78', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/plist&quot;,<br />\n\t&quot;参数&quot;:{&quot;page_size&quot;:&quot;10&quot;,&quot;page_no&quot;:&quot;1&quot;,&quot;cateIds&quot;:&quot;&quot;,&quot;orderBy&quot;:&quot;&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;name&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t｛&ldquo;检查&rdquo;:&ldquo;BODY&rdquo;，</p>\n<p>\n\t&ldquo;匹配规则&rdquo;：&ldquo;包含字符串&rdquo;，</p>\n<p>\n\t&ldquo;条件&rdquo;：【｛&ldquo;模式&rdquo;：&ldquo;\\&quot;currentPage\\&quot;:1&rdquo;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝，｛&ldquo;模式&rdquo;：&ldquo;\\&quot;pageStartRow\\&quot;:0&quot;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝】</p>\n<p>\n\t｝</p>\n', 'execution_type': '2'}], 'tc_external_id': '1', 'layout': '1', 'creation_ts': '2016-07-18 15:52:00', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': ''}]
2017-01-15 18:33:35,170 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:35,170 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 76, 'test-n-显示默认页面', '微商城-显示商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:33:35,172 testplan.py[line: 72] INFO: 开始执行测试用例[id=76，name=test-n-显示默认页面]
2017-01-15 18:33:35,173 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}
2017-01-15 18:33:35,173 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\"currentPage\":1","消息":"接口返回错误"},{"模式":"\"pageStartRow\":0","消息":"接口返回错误"}]}
2017-01-15 18:33:35,173 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:35,173 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 76, 'test-n-显示默认页面', 'plan1_of_wechatno', 'pj_wechatno', 78, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}', '{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\\"currentPage\\":1","消息":"接口返回错误"},{"模式":"\\"pageStartRow\\":0","消息":"接口返回错误"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:35,175 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:33:35,175 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:33:35,176 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:33:35,176 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('page_size', '10'), ('page_no', '1'), ('cateIds', ''), ('orderBy', ''), ('serial', '10549840601068216320'), ('name', '')])
2017-01-15 18:33:35,176 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:33:35,176 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:33:35,177 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/plist
2017-01-15 18:33:35,177 httpprotocol.py[line: 75] INFO: 参数为：b'page_size=10&page_no=1&cateIds=&orderBy=&serial=10549840601068216320&name='
2017-01-15 18:33:35,177 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:33:35,412 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:33:35,412 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"dataList":[{"id":27105,"name":"微信支付测试-二级","privateSerial":null,"price":0,"oriPrice":0,"description":"微信支付测试-二级","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/30/b9e21dc4-6cf2-4923-9ec7-4259ecea09c1.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":39,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27090,"name":"测试1222-3","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ea123913-89df-4384-929e-158617f67cbe.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":60,"standardLowPrice":980.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27072,"name":"二级规格1129-2","privateSerial":null,"price":0,"oriPrice":0,"description":"二级规格1129-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/29/9ecf031d-e9bd-427e-b147-cb4a1f8fe5d3.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":25,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27087,"name":"1221-1","privateSerial":null,"price":0,"oriPrice":0,"description":"1221-1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/21/1e844fc5-ee37-4393-97af-2a220971ef1f.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":48,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27040,"name":"一级变三级（改bug前）","privateSerial":null,"price":0,"oriPrice":0,"description":"一级规格1109-2一级规格1109-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/09/23b306d5-384d-4b3b-a4f7-a757d9fc0635.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":135,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27088,"name":"测试1222","privateSerial":null,"price":8,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ca612435-f6e1-4f0d-bc18-61e558e8f720.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":2341,"istop":0,"soldCount":4,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":7,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27089,"name":"测试1222-2","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/37bc7e08-1a2f-4c88-9542-ec5613686d7e.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":26,"standardLowPrice":2100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26955,"name":"乐视超级电视","privateSerial":null,"price":0,"oriPrice":0,"description":"乐视超级电视","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/10/31/3d3ca77e-d010-42f3-804f-bc8a563ec753.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":88,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26971,"name":"多级规格测试010","privateSerial":null,"price":0,"oriPrice":0,"description":"多级规格测试010","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/01/fface01c-5d06-400e-bf7b-2ae2fd64c858.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":15,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27057,"name":"裙子","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/13dbced7-faae-4e13-aebe-6f69d72dc7e0.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":101,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false}],"pageInfo":{"pageSize":10,"currentPage":1,"totalPages":5,"totalRows":47,"pageStartRow":0,"pageEndRow":10,"pagination":true,"hasNextPage":true,"hasPreviousPage":false,"params":null,"needCount":true}}
2017-01-15 18:33:35,413 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:33:33 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:33:35,414 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:33:35,414 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2017-01-15 18:33:35,414 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2017-01-15 18:33:35,414 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:33:35,414 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:33:35,414 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2017-01-15 18:33:35",step_action="{'\u65b9\u6cd5': 'post', 'url': '/goods/plist', '\u53c2\u6570': {'page_size': '10', 'page_no': '1', 'cateIds': '', 'orderBy': '', 'serial': '10549840601068216320', 'name': ''}}", expected_results="{'条件': [{'消息': '接口返回错误', '模式': ''currentPage':1'}, {'消息': '接口返回错误', '模式': ''pageStartRow':0'}], '匹配规则': '包含字符串', '检查': 'BODY'}" WHERE executed_history_id = 20170115183327 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:35,417 testcase.py[line: 162] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2017-01-15 18:33:35,417 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:33:35,417 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:33:35" WHERE executed_history_id = 20170115183327 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:35,566 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2017-01-15 18:33:35,828 testplan.py[line: 45] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2017-01-15 17:46:37', 'node_order': '1000', 'execution_type': '1', 'status': '1', 'name': 'test-n-把商品加入购物车', 'author_first_name': 'Testlink', 'active': '1', 'author_id': '1', 'testsuite_id': '87', 'id': '89', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '88', 'full_tc_external_id': 'wecharno-4', 'summary': '', 'steps': [{'active': '1', 'step_number': '1', 'id': '175', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}, {'active': '1', 'step_number': '2', 'id': '174', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '', 'execution_type': '1'}, {'active': '1', 'step_number': '3', 'id': '90', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}, {'active': '1', 'step_number': '4', 'id': '176', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1'}, {'active': '1', 'step_number': '5', 'id': '177', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}], 'tc_external_id': '4', 'layout': '1', 'creation_ts': '2016-07-20 12:07:40', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': ''}]
2017-01-15 18:33:35,972 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:35,972 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:33:35,974 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 18:33:35,974 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 18:33:35,974 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 18:33:35,974 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:35,974 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:35,976 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:33:35,976 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:33:35,976 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 18:33:35,976 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 18:33:35,979 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 18:33:35,979 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 18:33:35,979 testcase.py[line: 115] ERROR: 步骤[1]执行出错,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 18:33:35,979 testcase.py[line: 122] INFO: 正在更新步骤执行结果
2017-01-15 18:33:35,979 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="1054 (42S22): Unknown column channel_serial1 in where clause", protocol_method="无", runtime="2017-01-15 18:33:35",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial1=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115183327 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:35,982 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:33:35,982 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:33:35" WHERE executed_history_id = 20170115183327 AND testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:36,139 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=88]的执行结果
2017-01-15 18:33:36,398 testplan.py[line: 45] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2016-11-29 18:16:14', 'node_order': '1000', 'execution_type': '1', 'status': '1', 'name': 'test-n-点击商品', 'author_first_name': 'Testlink', 'active': '1', 'author_id': '1', 'testsuite_id': '79', 'id': '81', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '80', 'full_tc_external_id': 'wecharno-2', 'summary': '', 'steps': [{'active': '1', 'step_number': '1', 'id': '82', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}], 'tc_external_id': '2', 'layout': '1', 'creation_ts': '2016-07-20 11:05:03', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': ''}]
2017-01-15 18:33:36,513 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:36,513 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:33:36,514 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2017-01-15 18:33:36,514 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2017-01-15 18:33:36,514 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2017-01-15 18:33:36,514 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:36,514 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:36,515 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:33:36,516 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:33:36,516 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:33:36,516 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('id', 26838), ('serial', '10549840601068216320')])
2017-01-15 18:33:36,516 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:33:36,516 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:33:36,516 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2017-01-15 18:33:36,516 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:33:36,561 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:33:36,561 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/css/malls/detail.css?v=5.0.0-faae2">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/mall/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320",
			mallConfigSerial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script src="/common/js/request.js?v=5.0.0-faae2"></script>
	<script src="/common/js/extend-number.js?v=5.0.0-faae2"></script>
	<script src="/component/iscroll/js/iscroll.js?v=5.0.0-faae2"></script>
	<script src="/component/swiper/js/swiper.min.js?v=5.0.0-faae2"></script>
	<script src="/js/malls/detail.js?v=5.0.0-faae2"></script>
</body>
</html>
2017-01-15 18:33:36,565 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:33:34 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3983'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=C0F0DD792A9BB17B68ED1426337E2116; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 18:33:36,565 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:33:36,565 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2017-01-15 18:33:36,565 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:33:36,566 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:33:36,566 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:33:36",step_action="{'\u65b9\u6cd5': 'get', 'url': '/goods/item?', '\u53c2\u6570': {'id': 26838, 'serial': '10549840601068216320'}}", expected_results="{'条件': [{'消息': '点击商品时无法打开购买页面', '模式': '立即购买'}], '匹配规则': '包含字符串', '检查': 'body'}" WHERE executed_history_id = 20170115183327 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:36,568 testcase.py[line: 162] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2017-01-15 18:33:36,568 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:33:36,568 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:33:36" WHERE executed_history_id = 20170115183327 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:36,696 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2017-01-15 18:33:36,959 testplan.py[line: 45] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2016-11-29 19:43:22', 'node_order': '1000', 'execution_type': '1', 'status': '1', 'name': 'test-n-免费领取优惠券', 'author_first_name': 'Testlink', 'active': '1', 'author_id': '1', 'testsuite_id': '125', 'id': '127', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '126', 'full_tc_external_id': 'wecharno-12', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'steps': [{'active': '1', 'step_number': '1', 'id': '181', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '', 'execution_type': '1'}, {'active': '1', 'step_number': '2', 'id': '180', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n', 'expected_results': '', 'execution_type': '1'}, {'active': '1', 'step_number': '3', 'id': '128', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1'}], 'tc_external_id': '12', 'layout': '1', 'creation_ts': '2016-07-26 15:06:38', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': ''}]
2017-01-15 18:33:37,089 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:37,089 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:33:37,091 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 18:33:37,092 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 18:33:37,092 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:33:37,092 testcase.py[line: 78] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:33:37,092 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:33:37,092 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 18:33:37,098 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:33:37,098 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:33:37",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115183327 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:37,100 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 18:33:37,100 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:33:37,101 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:37,101 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:37,102 testcase.py[line: 78] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:33:37,102 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:33:37,102 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 18:33:37,109 testcase.py[line: 159] INFO: 正在更新步骤执行结果
2017-01-15 18:33:37,109 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:33:37",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115183327 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:37,111 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 18:33:37,112 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 18:33:37,112 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:33:37,112 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:33:37,113 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 18:33:37,113 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:33:37,114 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:33:37" WHERE executed_history_id = 20170115183327 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:37,233 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 18:33:37,488 testplan.py[line: 45] INFO: 获取测试用例信息 [{'importance': '2', 'modification_ts': '2016-07-29 17:13:06', 'node_order': '2', 'execution_type': '1', 'status': '1', 'name': 'test-n-储值卡支付-不使用优惠，会员账户支付', 'author_first_name': 'Testlink', 'active': '0', 'author_id': '1', 'testsuite_id': '109', 'id': '111', 'author_last_name': 'Administrator', 'updater_id': '1', 'is_open': '1', 'updater_first_name': 'Testlink', 'testcase_id': '110', 'full_tc_external_id': 'wecharno-9', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n', 'steps': [{'active': '1', 'step_number': '1', 'id': '112', 'actions': '<p>\n\t{<br />\n\t&quot;style&quot;:&quot;testcase&quot;,<br />\n\t<br />\n\t&quot;testcase_id&quot;:114,<br />\n\t<br />\n\t&quot;testcase_name&quot;:&quot;test-n-提交储值卡支付订单-pay5重定向&quot;<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'execution_type': '1'}, {'active': '1', 'step_number': '3', 'id': '119', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_without_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:-1,&quot;yhCardType&quot;:-1}<br />\n\t}</p>\n', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;}</p>\n', 'execution_type': '1'}], 'tc_external_id': '9', 'layout': '1', 'creation_ts': '2016-07-22 14:48:17', 'updater_login': 'admin', 'estimated_exec_duration': '', 'author_login': 'admin', 'updater_last_name': 'Administrator', 'version': '1', 'preconditions': ''}]
2017-01-15 18:33:37,598 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:33:37,599 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115183327', 110, 'test-n-储值卡支付-不使用优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:33:37,600 testplan.py[line: 72] INFO: 开始执行测试用例[id=110，name=test-n-储值卡支付-不使用优惠，会员账户支付]
2017-01-15 18:33:37,600 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-不使用优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 18:33:37,600 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:33:37,600 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 18:33:37" WHERE executed_history_id = 20170115183327 AND testcase_id = 110 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:33:37,716 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=110]的执行结果
2017-01-15 18:33:37,717 testplan.py[line: 97] INFO: 测试计划[project=pj_wechatno ,testplan=plan1_of_wechatno]已执行完
2017-01-15 18:33:37,717 main.py[line: 242] INFO: 接口测试已执行完成，正在关闭数据库连接
2017-01-15 18:33:37,718 htmlreporter.py[line: 37] INFO: 正在查询测试用例总数
2017-01-15 18:33:37,718 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE executed_history_id = %s  data：('20170115183327',)
2017-01-15 18:33:37,723 htmlreporter.py[line: 43] INFO: 正在查询执行通过的用例数
2017-01-15 18:33:37,724 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Pass', '20170115183327')
2017-01-15 18:33:37,725 htmlreporter.py[line: 49] INFO: 正在查询执行失败的用例数
2017-01-15 18:33:37,726 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Fail', '20170115183327')
2017-01-15 18:33:37,727 htmlreporter.py[line: 55] INFO: 正在查询执行出错的用例数
2017-01-15 18:33:37,727 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Error', '20170115183327')
2017-01-15 18:33:37,727 htmlreporter.py[line: 61] INFO: 正在查询未执行的用例数
2017-01-15 18:33:37,728 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Block', '20170115183327')
2017-01-15 18:33:37,728 htmlreporter.py[line: 87] INFO: 正在查询已运的测试计划
2017-01-15 18:33:37,729 mydb.py[line: 104] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20170115183327',)
2017-01-15 18:33:37,730 htmlreporter.py[line: 113] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]的测试用例执行结果
2017-01-15 18:33:37,730 mydb.py[line: 104] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20170115183327')
2017-01-15 18:33:37,731 htmlreporter.py[line: 120] INFO: 正在记录测试测试计划[project：pj_pos, testplan：无计划]的测试用例运行结果到测试报告
2017-01-15 18:33:37,732 htmlreporter.py[line: 113] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例执行结果
2017-01-15 18:33:37,732 mydb.py[line: 104] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20170115183327')
2017-01-15 18:33:37,734 htmlreporter.py[line: 120] INFO: 正在记录测试测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例运行结果到测试报告
2017-01-15 18:33:37,735 htmlreporter.py[line: 134] INFO: 正在查询已运的测试计划
2017-01-15 18:33:37,735 mydb.py[line: 104] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20170115183327',)
2017-01-15 18:33:37,736 htmlreporter.py[line: 146] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]已运行的测试用例
2017-01-15 18:33:37,737 mydb.py[line: 104] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20170115183327')
2017-01-15 18:33:37,738 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=148]步骤运行结果
2017-01-15 18:33:37,738 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_pos', '无计划', 148, '20170115183327')
2017-01-15 18:33:37,740 htmlreporter.py[line: 146] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]已运行的测试用例
2017-01-15 18:33:37,740 mydb.py[line: 104] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20170115183327')
2017-01-15 18:33:37,742 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=102]步骤运行结果
2017-01-15 18:33:37,742 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 102, '20170115183327')
2017-01-15 18:33:37,744 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=93]步骤运行结果
2017-01-15 18:33:37,744 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 93, '20170115183327')
2017-01-15 18:33:37,749 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=88]步骤运行结果
2017-01-15 18:33:37,749 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 88, '20170115183327')
2017-01-15 18:33:37,751 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=106]步骤运行结果
2017-01-15 18:33:37,751 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 106, '20170115183327')
2017-01-15 18:33:37,753 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=114]步骤运行结果
2017-01-15 18:33:37,753 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 114, '20170115183327')
2017-01-15 18:33:37,754 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=98]步骤运行结果
2017-01-15 18:33:37,755 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 98, '20170115183327')
2017-01-15 18:33:37,758 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=120]步骤运行结果
2017-01-15 18:33:37,758 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 120, '20170115183327')
2017-01-15 18:33:37,760 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=76]步骤运行结果
2017-01-15 18:33:37,760 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 76, '20170115183327')
2017-01-15 18:33:37,761 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=80]步骤运行结果
2017-01-15 18:33:37,762 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 80, '20170115183327')
2017-01-15 18:33:37,763 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=126]步骤运行结果
2017-01-15 18:33:37,763 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 126, '20170115183327')
2017-01-15 18:33:37,765 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=110]步骤运行结果
2017-01-15 18:33:37,766 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 110, '20170115183327')
2017-01-15 18:33:37,767 htmlreporter.py[line: 199] INFO: 正在设置测试报告结果文件名
2017-01-15 18:33:37,768 htmlreporter.py[line: 209] INFO: 测试报告文件名所在路径为：E:\\Projects\\report\\test_report20170115183327.html
2017-01-15 18:33:37,768 htmlreporter.py[line: 202] INFO: 正在生成测试报告
2017-01-15 18:33:37,772 main.py[line: 265] INFO: 生成测试报告成功
2017-01-15 18:33:37,922 main.py[line: 272] INFO: E:\\Projects\\report\\test_report20170115183327.html
2017-01-15 18:33:37,923 main.py[line: 275] INFO: 正在发送测试报告邮件...
2017-01-15 18:33:40,442 main.py[line: 279] INFO: 发送邮件成功
2017-01-15 18:42:24,280 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2017-01-15 18:42:24,281 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2017-01-15 18:42:24,296 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2017-01-15 18:42:24,300 global_var.py[line: 31] INFO: 正在获取testlink
2017-01-15 18:42:24,387 main.py[line: 57] INFO: 正在创建测试用例报告报表
2017-01-15 18:42:24,387 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2017-01-15 18:42:24,389 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2017-01-15 18:42:24,389 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2017-01-15 18:42:24,393 main.py[line: 63] INFO: 正在读取运行模式配置
2017-01-15 18:42:24,396 main.py[line: 70] INFO: 正在运行全局初始化用例……
2017-01-15 18:42:24,396 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2017-01-15 18:42:24,649 global_function.py[line: 19] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '183', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1'}, {'id': '182', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2'}, {'id': '150', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'step_number': '3'}], 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-30 15:41:36', 'tc_external_id': '1', 'creation_ts': '2016-07-27 18:32:10', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '1000', 'summary': '', 'testsuite_id': '147', 'id': '149', 'updater_last_name': 'Administrator', 'name': 'test-n-登陆掌贝pos机', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'testcase_id': '148', 'estimated_exec_duration': '', 'full_tc_external_id': 'pj_pos-1', 'importance': '2', 'active': '1', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:24,778 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2017-01-15 18:42:25,489 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:25,489 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '0000-00-00 00:00:00')
2017-01-15 18:42:25,490 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2017-01-15 18:42:25,491 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2017-01-15 18:42:25,491 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2017-01-15 18:42:25,491 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:25,491 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:25,493 testcase.py[line: 84] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:42:25,494 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:42:25,494 mydb.py[line: 87] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2017-01-15 18:42:25,497 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2017-01-15 18:42:25,498 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 18:42:25,498 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2017-01-15 18:42:25,498 testcase.py[line: 165] INFO: 正在更新步骤执行结果
2017-01-15 18:42:25,498 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:42:25",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT branch_id FROM account_operator WHERE id = %s', '\u53c2\u6570': [1318]}", expected_results="{'输出': {'branch_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115184224 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:42:25,502 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2017-01-15 18:42:25,502 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2017-01-15 18:42:25,502 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:25,503 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:25,505 testcase.py[line: 84] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:42:25,506 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2017-01-15 18:42:25,506 casestep.py[line: 149] INFO: 转换后的参数体为：(1485916418,)
2017-01-15 18:42:25,506 mydb.py[line: 87] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2017-01-15 18:42:25,510 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2017-01-15 18:42:25,510 casestep.py[line: 205] INFO: 正在保存服务器返回结果到自定义变量
2017-01-15 18:42:25,510 casestep.py[line: 240] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2017-01-15 18:42:25,510 testcase.py[line: 165] INFO: 正在更新步骤执行结果
2017-01-15 18:42:25,511 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:42:25",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '\u53c2\u6570': [1485916418]}", expected_results="{'输出': {'serial_no': 2, 'device_no': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115184224 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:42:25,515 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2017-01-15 18:42:25,515 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2017-01-15 18:42:25,516 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:25,516 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:25,517 testcase.py[line: 84] INFO: 开始执行步骤操作[第3步]
2017-01-15 18:42:25,517 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2017-01-15 18:42:25,517 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:42:25,518 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:42:25,518 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2017-01-15 18:42:25,518 casestep.py[line: 124] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2017-01-15 18:42:25,518 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_product_version]
2017-01-15 18:42:25,518 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2017-01-15 18:42:25,518 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('DeviceId', '[CaseStep.device_no]'), ('SerialNo', '[CaseStep.serial_no]'), ('Content-Type', 'application/json;charset=utf-8'), ('ProductVersion', '[global_product_version]'), ('ProtocolVersion', '4.0')])
2017-01-15 18:42:25,519 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2017-01-15 18:42:25,519 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2017-01-15 18:42:25,519 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2017-01-15 18:42:25,520 httpprotocol.py[line: 76] INFO: 请求头为：{'DeviceId': '[CaseStep.device_no]', 'SerialNo': '[CaseStep.serial_no]', 'ProtocolVersion': '4.0', 'ProductVersion': '[global_product_version]', 'Content-Type': 'application/json;charset=utf-8'}
2017-01-15 18:42:25,907 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2017-01-15 18:42:25,907 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"code":"4000","reason":"查询设备信息失败，设备未出货或未激活","success":false}
2017-01-15 18:42:25,907 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:42:23 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:42:25,907 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:42:25,907 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2017-01-15 18:42:25,907 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：False
2017-01-15 18:42:25,908 testcase.py[line: 136] INFO: 步骤[3]执行失败,停止执行用例[id=148, name=test-n-登陆掌贝pos机]
2017-01-15 18:42:25,908 testcase.py[line: 143] INFO: 正在更新步骤执行结果
2017-01-15 18:42:25,908 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 126, in test_interface_of_json    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 113, in assert_result    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[消息])AssertionError: True != False : 登录失败,success不为true", protocol_method="post", runtime="2017-01-15 18:42:25",step_action="{'\u51fd\u6570': 'test_interface_of_json', '\u8bf7\u6c42\u5934': {'DeviceId': '[CaseStep.device_no]', 'SerialNo': '[CaseStep.serial_no]', 'ProtocolVersion': '4.0', 'ProductVersion': '[global_product_version]', 'Content-Type': 'application/json;charset=utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/saofu-client/password/login', '\u53c2\u6570': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}}", expected_results="{'条件': [{'消息': '登录失败,success不为true', '模式': {'success': True}}, {'消息': 'message不为成功', '模式': {'message': '成功'}}, {'消息': 'code不为4001', '模式': {'code': '4001'}}], '输出': {'OperatorId': {'operator': {'id': 'value'}}, 'Token': {'token': 'value'}}, '检查': 'body', '匹配规则': '键值相等'}" WHERE executed_history_id = 20170115184224 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:42:25,910 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:42:25,910 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:42:25" WHERE executed_history_id = 20170115184224 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2017-01-15 18:42:25,912 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2017-01-15 18:42:25,912 main.py[line: 75] INFO: 用例[148]运行结果：('Fail', [(<interface.InterfaceUnittestTestCase.InterfaceUnittestTestCase testMethod=test_interface_of_json>, 'Traceback (most recent call last):\n  File "E:\\Projects\\interface_project_for_dev\\interface\\InterfaceUnittestTestCase.py", line 126, in test_interface_of_json\n    self.assert_result(body)\n  File "E:\\Projects\\interface_project_for_dev\\unittesttestcase.py", line 113, in assert_result\n    self.assertEqual(dict_level_list[len(dict_level_list) -1], last_value, item[\'消息\'])\nAssertionError: True != False : 登录失败,success不为true\n')])
2017-01-15 18:42:25,912 main.py[line: 78] INFO: 按项目运行测试
2017-01-15 18:42:25,912 main.py[line: 115] INFO: 运行指定项目
2017-01-15 18:42:26,042 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2017-01-15 18:42:26,042 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2017-01-15 18:42:26,044 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2017-01-15 18:42:26,044 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2017-01-15 18:42:26,178 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2017-01-15 18:42:26,385 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2017-01-15 18:42:26,385 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2017-01-15 18:42:26,619 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['120', '106', '102', '93', '76', '114', '80', '98', '126', '110', '88'])
2017-01-15 18:42:26,786 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '122', 'expected_results': '<p>\n\t{&quot;success&quot;:1,&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CMOrder&quot;,<br />\n\t&quot;function&quot;:&quot;test_create_mall_order&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;params&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:2,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1'}, {'id': '123', 'expected_results': '<p>\n\t{&quot;button_name&quot;:&quot;确认支付&quot;, &quot;page_title&quot;:&quot;储值卡&quot;}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;Pay5&quot;,<br />\n\t&quot;function&quot;:&quot;test_pay5&quot;,<br />\n\t&quot;method&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2'}, {'id': '124', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;getByWeixin&quot;: 0, &quot;codeType&quot;: 2, &quot;title&quot;: &quot;动态校验&quot;, &quot;subTitle&quot;: &quot;动态校验&quot;, &quot;notice&quot;: &quot;动态校验&quot;, &quot;description&quot;: &quot;动态校验&quot;,&quot;useLimit&quot;:&quot;动态校验&quot;,&nbsp; &quot;dateInfoType&quot;: &quot;动态校验&quot;, &quot;cardType&quot;: 1,&quot;listing&quot;: 1, &quot;fitAll&quot;: 1,&quot;detailTxt&quot;: &quot;动态校验&quot;,&quot;servicePhone&quot;:&quot;动态校验&quot;,&quot;cashLeastCost&quot;: &quot;动态校验&quot;,&quot;cashReduceCost&quot;: &quot;动态校验&quot;,&quot;discount&quot;: 0,&quot;channel&quot;: -1,&quot;branchId&quot;: -1,&quot;success&quot;: 1, &quot;skuQuantity&quot;:&quot;动态校验&quot;,&quot;output_arg1&quot;:&quot;GetInCoupon.card_code&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;GetInCoupon&quot;,<br />\n\t&quot;function&quot;:&quot;test_get_in_coupon&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;params&quot;:&quot;&quot;<br />\n\t}</p>\n', 'step_number': '3'}, {'id': '129', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;,&quot;coupon_weixin_verification_record&quot;:1}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_with_cash_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:&quot;[GetInCoupon.card_code]&quot;,&quot;yhCardType&quot;:&quot;CASH&quot;}<br />\n\t}</p>\n', 'step_number': '4'}], 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-07-29 18:31:36', 'tc_external_id': '11', 'creation_ts': '2016-07-26 12:12:10', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '3', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n<p>\n\tulr中的40758966216286146560取自base_info.serial字段</p>\n', 'testsuite_id': '109', 'id': '121', 'updater_last_name': 'Administrator', 'name': 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '', 'testcase_id': '120', 'estimated_exec_duration': '', 'full_tc_external_id': 'wecharno-11', 'importance': '2', 'active': '0', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:26,935 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:26,936 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 120, 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:42:26,939 testplan.py[line: 72] INFO: 开始执行测试用例[id=120，name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]
2017-01-15 18:42:26,940 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 18:42:26,940 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:42:26,940 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 18:42:26" WHERE executed_history_id = 20170115184224 AND testcase_id = 120 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:27,079 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=120]的执行结果
2017-01-15 18:42:27,232 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '108', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1'}], 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 17:33:09', 'tc_external_id': '8', 'creation_ts': '2016-07-21 11:26:32', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '1000', 'summary': '', 'testsuite_id': '105', 'id': '107', 'updater_last_name': 'Administrator', 'name': 'test-n-创建储值卡支付订单', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '', 'testcase_id': '106', 'estimated_exec_duration': '', 'full_tc_external_id': 'wecharno-8', 'importance': '2', 'active': '1', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:27,402 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:27,402 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:42:27,406 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 18:42:27,407 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 18:42:27,407 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 18:42:27,407 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:27,407 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:27,409 testcase.py[line: 84] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:42:27,409 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:42:27,409 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:42:27,409 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:42:27,409 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 18:42:27,410 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:42:27,410 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:42:27,410 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:42:27,410 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 18:42:27,410 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 18:42:27,411 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:42:27,455 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:42:27,455 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 18:42:27,455 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:42:25 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:42:27,455 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:42:27,456 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 18:42:27,456 testcase.py[line: 136] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 18:42:27,456 testcase.py[line: 143] INFO: 正在更新步骤执行结果
2017-01-15 18:42:27,457 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 18:42:27",step_action="{'\u8bf7\u6c42\u5934': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115184224 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:27,460 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:42:27,460 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:42:27" WHERE executed_history_id = 20170115184224 AND testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:27,622 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=106]的执行结果
2017-01-15 18:42:27,905 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '104', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;到店支付&quot;,&quot;消息&quot;:&quot;无法打开商品详情&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/mall/tobuy/1?&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:&quot;26838&quot;,&quot;amount&quot;:1,&quot;type&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '1'}], 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 18:14:53', 'tc_external_id': '7', 'creation_ts': '2016-07-20 16:48:26', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '1001', 'summary': '', 'testsuite_id': '79', 'id': '103', 'updater_last_name': 'Administrator', 'name': 'test-n-点击立即购买按钮', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '', 'testcase_id': '102', 'estimated_exec_duration': '', 'full_tc_external_id': 'wecharno-7', 'importance': '2', 'active': '1', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:28,017 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:28,018 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 102, 'test-n-点击立即购买按钮', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:42:28,019 testplan.py[line: 72] INFO: 开始执行测试用例[id=102，name=test-n-点击立即购买按钮]
2017-01-15 18:42:28,019 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}
2017-01-15 18:42:28,019 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}
2017-01-15 18:42:28,019 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:28,019 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 102, 'test-n-点击立即购买按钮', 'plan1_of_wechatno', 'pj_wechatno', 104, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:28,021 testcase.py[line: 84] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:42:28,021 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:42:28,021 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:42:28,021 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('mallGoodsId', '26838'), ('amount', 1), ('type', 1), ('serial', '10549840601068216320')])
2017-01-15 18:42:28,021 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:42:28,021 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:42:28,021 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/mall/tobuy/1?mallGoodsId=26838&amount=1&type=1&serial=10549840601068216320
2017-01-15 18:42:28,022 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:42:28,502 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:42:28,503 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 
	 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta http-equiv="Expires" CONTENT="0">
<meta http-equiv="Cache-Control" CONTENT="no-cache">
<meta http-equiv="Pragma" CONTENT="no-cache">
<title>微商城</title>
<link rel="stylesheet" href="/css/mall/pure.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/grids-core.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/zepto.alert.css?v=5.0.0-faae2">

<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.ios7.css?v=5.0.0-faae2">
<link rel="stylesheet" href="/css/mall/mobiscroll.animation.css?v=5.0.0-faae2">
</head>
<style type="text/css">
* {
	margin: 0;
	padding: 0;
}

html {
	color: #626262;
	overflow-y: auto;
	overflow-x: hidden;
}

body {
	margin-bottom: 20px;
	overflow-y: auto;
	overflow-x: hidden;
}

a {
	text-decoration: none;
}

ol,ul {
	list-style: outside none none;
}

.left {
	float: left;
}

.right {
	float: right;
}

.in-block {
	display: inline-block;
}

.orange {
	color: #c58d04;
}

.grey {
	color: #adadad;
}

.bg-color {
	background: #ececec;
}

#wrapper {
	width: 100%;
	margin: 0 auto;
}

.header {
	width: 100%;
}

.header ul {
	position:relative;
	overflow: hidden;
}

.header ul li {
	width: 50%;
	float: left;
	height: 2.8em;
	line-height: 2.8em;
	background: #fff;
	text-align: center;
	border-bottom:1px solid #f38b44;
	-moz-box-sizing:border-box; /* Firefox */
     -webkit-box-sizing:border-box; /* Safari */
     box-sizing:border-box;
}
.header ul .lines{
	position: absolute;
	width: 1%;
	height: 2.8em;
	line-height: 2.8em;
	border-right: 1px solid #FDE5D4;
	left: 49%;
	top: -1px;
 } 
.header ul li a {
	color: #8b898a;
}

.tab_content>div {
	height: auto;
	font-size: 0.8em;
	margin: 0.5em 0;
}

.empty-p {
	width: 80%;
	float: left;
	padding: 0.5em 0;
}

.has-p {
    width: 100%;
    margin: 0 auto;
    padding: 0 1em;
    height: auto;
    line-height: 2.5em;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -webkit-box-sizing: -webkit-border-box;
}
.has-p-one{
    background: url(/images/mall/contact.png) no-repeat left center;
    background-size: 12px 12px;
}
.has-p-two{
    background: url(/images/mall/take.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.has-p-three{
    background: url(/images/mall/time.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.input-right{
    position: relative;
}
.input-right-img{
    width: 1em;
    position: absolute;
    right: 0.6em;
    top: 0.3em;
}
#scheduledTime{
    width:11em;
    height: 2em;
    border:1px solid #a0a0a0;
    border-radius:4px;
    color:#a0a0a0;
    text-indent:.5em
}
.hiddens-p{
    text-overflow:ellipsis; 
    overflow:hidden; 
    white-space:nowrap;  
}

.right-dashed {
	border-left: 1px solid #eee;
	margin-top: 1em;
	padding-bottom:1em;
}

#edit {
	padding: 1em 0 1em 2em;
    width: 10px;
}

.header ul li.active{
    border-bottom: 4px solid #f38b44;
}
.header ul li.active a{
    color: #f38b44!important;
}
.buy_title{
	background:#f3f3f3;
	padding:0.3em 1em;
	margin: 0;
}
.content {
	width: 100%;
	background: #fff;
	overflow: hidden;	
	padding-bottom:8%;
}

.selectList {
	border-bottom: 1px solid #efefef;
	margin: 0 auto;
	overflow: hidden;
	padding: 0.5em 1em;
	font-size: 0.8em;
	clear:both;
}

.selectList img {
    display: inline-block;
    float: left;
    width: 25%;
    border-radius: 4px;
    -webkit-border-radius: 4px;
}

.button {
	display:block;	
	width: 99%;	
	height: 3em;
	color: #fff;
	border: none;
	border-radius: 4px;
	margin:0 auto 0.5em auto;
}

.addbtn {
	background: #33CC66;
}

.btn-wrap-5 {
	padding: 0 1em;
}
.buybtn {
	width: 100%;
	background: #f68d3c;
}

.footer {
	width: 100%;
	background: #fff;
	color: #b6b6b6;
	overflow: hidden;
	text-align: left;
	margin-bottom: 1em;
}

.all-end-button {
	width: 90%;
	margin: 1em auto 0.5em;
}

.all-end-button p:first-child {
	text-align: left;
}

.error-page{
	background: #ddd;
    padding-bottom: 2em;
}
.error-page img{
    margin:0 auto;
	padding-top: 2em;
}
.error-page p{
    text-align:center;
    color:#000;
    width:80%;
    margin:1em auto 2em;
}
#deliverFee{
	text-align:left;
	font-size:0.8em;
	color:#acb0af;
}
.order-div{
    margin-left: 26.8%;            
    position: relative;
}
.order-div>p:last-child{
    width: 100%;
    margin: 0;
    position: absolute;
    bottom: 0;
    left: 0;
}
.m-t-n{
    margin-top: 0;
}
.m-t-n>span{
    display: inline-block;
}
.m-t-n>span:first-child{
    width: 70%;
}
.m-t-n>span:last-child{
    width: 30%;
}
.mtn-span{
    float: right;
}
.t-r-span{
	text-align:right;
}
.ccc{
    color: #ccc;
}
.peisong{
    text-align: right;
    margin-bottom: 0;
    padding-right: 1em;
    padding-top: 0.4em;
}
.peisong-detail{
    color:#000;
}
.peisong-detail input{
    border: none;
}
.peisong-detail div>p{
    padding-left: 1.8em;
    padding-top: 0.8em;
    padding-bottom: 0.8em;
    margin: 0;
    clear:both;
}

.weipay{            
    background: url(/images/weixin2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}        
.peisong-detail div>p.pay{
    background: url(/images/money2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.cardpay{
    background: url(/images/cardpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.mdpay{
    background: url(/images/mdpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}

.peisong-detail div[class^="btn-wrap-"] {
	border-bottom: 1px solid #dadada;
	padding: 0 1em;
	height: 3em;
	position: relative;
}

.weipay,.pay,.mdpay,.cardpay{
    position: relative;
}
 .weipay>img,.mdpay>img,.pay>img,.cardpay>img,.zhifu input{
    width: 1.2em;
    height: 1.2em;
    position: absolute;
    right: 0;
    top: 50%;
    transform:translateY(-50%);
}

.pure-img-check {
	background: url(/images/weixuan2.png) no-repeat left center;
    background-size:1.05em 1.05em; 
    float: right;
    height: 1.05em;
    width: 1.05em;
}

.zhifu input{
    display: none;
}
#deliverFeeDiv, #FetchDiv {
	border-bottom: 1px solid #efefef;
    padding: 0.5em 1em;
}
#deliverFeeDiv p, #FetchDiv p{
	text-align:right;
}

#remark {
	padding: 0.5em 1em;
	height: 4em;
	font-size: 1.0em;
}

.tab-adress {
	position: relative;
}
.icon-wrap {
	/*float: right;*/
	position: absolute;
	top: 11px;
	right: 10px;
}
.icon-wrap-spe {
	top: 0;
}

/*toast提示*/
.toastBlock {
    display: none; 
    position: fixed;
    bottom: 50%;
    width: 100%;
    text-align: center;
    transition: opacity 1s ease-out;
    z-index: 19;
}
.toastBlock .toastContent {
    display: inline-block;
    padding: 18px;
    border-radius: 5px;
    font-size: 14px;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.7);
}
</style>
<body>
	<div id="wrapper">
		
			
			
			
				
					
					
						
						
						
						
						
					
					
				
				
			
			<div class="header">
				
					<ul class="tab">
						<li class='active' data='#deliverFeeDiv'><a href="#tab1">快递发货</a></li>						
						<li class=''><a href="#tab2">到店自提</a></li>
						<span class="lines"></span>
					</ul>
				
			</div>
			<p class="buy_title"></p>
			
			<div class="tab_container">
				<div id="tab1" class="tab_content pure-g" style="">
					<div class="pure-u-24-24 tab-adress j-tab-adress">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">17817738178<span>(17817738178)</span></span>
								</div>
								<div class="has-p">
									<span>配送地址：</span>
									<span class="pure-u-3-5">天津市县宁河县详细</span>
                                </div>

                                <span class="icon-wrap">
                                	
                                		
                                		
                                		<a class="url_adress" href="/toaddr/1?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
                                		</a>
                                		
                                	
                                </span>
							
							
						
					</div>
				</div>
				<div id="tab2" class="tab_content pure-g" style="display:none">
					<div class="pure-u-24-24">
						
							
								<div class="tab-adress j-tab-adress">
									<div class="has-p">
										<span>联系方式：</span>
										<span class="pure-u-3-5">452<span>(17817738178)</span></span>
									</div>
	                                <div class="has-p">
	                                	<span>门&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;店：</span>
	                                	<span class="pure-u-3-5">
	                                		广东省深圳市福田区
		                                	
		                                		Biu
		                                	
	                                	</span>
	                                </div>
	                                <span class="icon-wrap">
	                                	
	                                		
	                                		
	                                		<a class="url_adress" href="/toaddr/2?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
	                                			<img src="/images/enter.png?v=5.0.0-faae2" class="pure-img" id="edit">
	                                		</a>
	                                		
	                                	
	                                </span>
                                </div>
                               	<div class="has-p">
                               		<span>到店时间：</span>
                               		<span class="input-right">
                               			<input type="text" id="scheduledTime" name="scheduledTime" class="text" placeholder="请选择"/><img src="/images/mall/input-right.png?v=5.0.0-faae2" class="input-right-img">
                               		</span>
                               	</div>
							
							
						
					</div>
				</div>
			</div>
			<p class="buy_title"></p>
			
			<div class="content">
				
					
						
							<div class="selectList">
								<img src="http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg"> 
								
									
									
										<div class="order-div">
											<p class="m-t-n"><span>接口-测试商品1</span><span class="mtn-span t-r-span">￥0.01</span></p>
											<p><span class="ccc mtn-span">X1</span></p>
                                        </div>	
									
								
							</div>
						
					
					
					
				
				<div id="deliverFeeDiv">
					 
						
						
							<p id="deliverFee">含运费：￥0.01</p>
							<p class="orange">合计：￥0.02</p>
						
					 
				</div>
				<div id="FetchDiv" style="display: none;">
					<p class="orange">合计：￥0.01</p>
				</div>
				<div id="remark">
					<span class="beizhu" style="float:left">备注：</span>
                   	<span class="beizhulan">
                   		<textarea rows="3" placeholder="可于此处给卖家留言备注" style="border:0;width: 85%;"></textarea>
                   	</span>
				</div>
			</div>
			<p class="buy_title"></p>
			<div class="footer">
				<div class="peisong-detail zhifu">
                	
                        <div class="btn-wrap-1">
                         	<p class="weipay">微信支付<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="1"/>
                         	</p>
                        </div>
                    
                  	
                  	
                        <div class="btn-wrap-2" style="">
                         	<p class="pay">货到付款<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="3"/>
                         	</p>
                        </div>
                   	
		
                    
                        <div class="btn-wrap-3" style="display:none">
                        	<p class="mdpay">到店支付<span class="pure-img-check"></span>
                        		<input type="radio" name="zhifu" value="2"/>
                        	</p>
                        </div>
                   	
                   	
                   	
                        <div class="btn-wrap-4">
                       		<p class="cardpay">储值卡支付<span class="pure-img-check"></span>
                       			<input type="radio" name="zhifu" value="4"/>
                       		</p>
                        </div>
                   	
                </div>
			</div>
			<div class="btn-wrap-5">
				<input type="button" class="button buybtn submit" value="确认提交" />
			</div>

			<div id="toastId" class="toastBlock">
			    <span class="toastContent"></span>
			</div>
			
		
	</div>
	<script type="text/javascript" src="/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/touch.js?v=5.0.0-faae2"></script>
    
	<script type="text/javascript" src="/js/mall/zepto.alert.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mall.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.zepto.js?v=5.0.0-faae2" ></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.core.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.scroller.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.datetime.js?v=5.0.0-faae2"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.i18n.zh.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			$("input[name='zhifu']:checked").prev('.pure-img').attr('src','/images/check.png');
			var tab = parseInt("1");
			/* if(tab == 1){
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else if (tab == 0){
			    $("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} else if(parseInt("1") != 0){
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} */
			
			if ("true" == "true" && 1 == 1) {
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else {
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			}
			
			// 控制显示图片比例
			var img_left_heights = $(".selectList img").width()*(0.75);
			$(".selectList img,.order-div").css('height',img_left_heights);
			
			// 取货日期
			var now = new Date();
            $('#scheduledTime').mobiscroll().datetime({
                minDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()+1),
                maxDate: new Date(now.getFullYear(), now.getMonth()+3, now.getDate()),
                stepMinute: 30,
                dateOrder :"yymmdd",
                dateFormat:"yy-mm-dd",
                timeWheels:"HHii",
                timeFormat:"HH:ii",
                //invalid: [{ start: '00:00', end: '08:00' },{ start: '22:00', end: '23:59' }],
                theme: 'ios7',
                lang: 'zh',
                display: 'bottom',
                mode: 'mixed'
            });
            $('#scheduledTime').click(function(){
                $('#scheduledTime').mobiscroll('show'); 
                return false;
            });
            
			$("ul li").click(function() {
				$("ul li").removeClass("active");
				$(this).addClass("active");
				if($(this).attr("data")=="#deliverFeeDiv"){
					$("#deliverFeeDiv").show();
					$("#FetchDiv").hide();
				}else{
					$("#deliverFeeDiv").hide();
					$("#FetchDiv").show();
				}
				$(".tab_content").hide();
				var href = $(this).find("a").attr("href");
				$(href).show();
				
				if(href.endWith("tab1")) {
					$(".btn-wrap-2").show();
					$(".btn-wrap-3").hide();
				} else if(href.endWith("tab2")) {
					$(".btn-wrap-2").hide();
					$(".btn-wrap-3").show();
				}
				//清空已选择的支付方式
				$("input[name='zhifu']").prop("checked", false);
				$(".zhifu .pure-img-check").css('background-image','url(/images/weixuan2.png)');
				return false;
			});
			//商户设置的满额包邮价
			/* var noDeliverFee = toPrice(parseFloat("200")/100);
			var totalFee = parseFloat("0.01");
			if(totalFee > noDeliverFee){
				$("#deliverFeeDiv .orange").text("合计：￥"+ totalFee);
				$("#deliverFee").text("含运费：￥0.00");
			} */
			$('.zhifu>div').click(function(){
	            $("input[name=zhifu]").prop("checked", false);
	            $(".pure-img-check").css('backgroundImage','url(/images/weixuan2.png)');
	            var img_obj = $(this).find('.pure-img-check');
	            var backgroundImage = img_obj.css('background-image');
	            var input_obj = $(this).find('input');
	            if(backgroundImage.indexOf("weixuan2.png") > 0){
	                img_obj.css('background-image','url(/images/check.png)');
	                input_obj.prop("checked", "checked");
	            }else{
	                img_obj.css('background-image','url(/images/weixuan2.png)');
	                input_obj.prop("checked", false);
	            }
	        });


	        $(".j-tab-adress").click(function(event) {
	        	var _url = $(this).find('.url_adress').prop("href");

	        	window.location.href = _url;
	        });
		});
		
		function validateRemark(){
			var text = filtEmoji($('.beizhulan textarea').val());
			if(text != "" && text != undefined){
				if(text.length>30){
					$.dialog({
                        widths : '80%',
                        content : '您输入的备注过长，请不要超过30个字',
                        title : 'no',
                        fullok : function() {
                            return true;
                        },                       
                        lock : true
                    });	
					return false;
				}
				return true;
			}
			return true;
		}
		function filtEmoji (str) {
			return unescape(escape(str).replace(/\%uD.{3}/g, ''));
		}
		
		$(".submit").click(function(event){
			var payType = $("input[name='zhifu']:checked").val();
			if(null == payType || "" == payType || typeof(payType) == "undefined") {
       		 $.dialog({
                    widths : '80%',
                    content : '请选择支付方式',
                    title : 'no',
                    fullok : function() {
                        return true;
                    },                       
                    lock : true
                });
       			return;
       		}
			$.dialog({
                content : "确认提交订单？",
                title : "no",
                okText: '取消',
                cancelText : '确定', 
                ok : function() {
                	$(".ft-right").removeAttr("disabled");
                	return;
                },
                cancel : function() {                        	
               		
               		if(payType == 1){
               			if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				doAlert("no", "无效物流方式");
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@12cdf45e";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/1", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "id=" + result.attach;
            	    			strParams += "&serial=10549840601068216320";
            	    			if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
            	        	});
            			}
               		}
               		
    				if(payType == 2){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@12cdf45e";
    					if(shopBranch == "") {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					var _fetchTime = $("#scheduledTime").val();
    					if(null == _fetchTime || "" == _fetchTime) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请选择取货时间',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						
    						var _remark = filtEmoji($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							fetchTime : _fetchTime,
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/2/2", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 3){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑收货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });

    						var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
    						// var _remark = encodeURI($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/1/3", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								// doAlert("no", result.message);
    								toastDisplay(result.message);
    								return;
    							}
    							window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 4){
    					if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				$.dialog({
        	                    widths : '80%',
        	                    content : '无效物流方式',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@12cdf45e";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI(filtEmoji($(".beizhulan").find("textarea").val()));
            			// var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/4", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						// doAlert("no", result.message);
            						toastDisplay(result.message);
            						return;
            					}
            					
            					var strParams = "?orderId=" + result.attach;
            					if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            					strParams += "&serial=10549840601068216320";
                				window.location.href = "/pay/5"+strParams;
            	        	});
            			}
            			
    				}
    				
                },
                lock : true
            });
		});
		
		//微信支付
		/* $(".payUseWX").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			var type = 0;
			$(".tab_content").each(function(){
				if($(this).css("display") != "none") {
					var attrId = $(this).attr("id");
					if(attrId == "tab1") {
						type = 1;//快递取货
					} else if(attrId == "tab2") {
						type = 2;//门店自提
					}
				}
			});
			if(type <= 0) {
				doAlert("no", "无效物流方式");
				return;
			}
			if(type == 1) {
				if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑收货地址");
					return;
				}
			}
			var _fetchTime = "";
			if(type == 2) {
				if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑取货地址");
					return;
				}
				_fetchTime = $("#scheduledTime").val();
				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
					doAlert("no", "请选择取货时间");
					return;
				}
				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@12cdf45e";
				if(shopBranch == "") {
					doAlert("no", "请编辑取货地址");
					return;
				}
			}
			
			var _remark = encodeURI($(".beizhulan").find("textarea").val());
			var params = {
				serial : "10549840601068216320",
				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
				fm : "1",
				mallGoodsId : "26838",
				amount : "1",
				cartIds : "",
				fetchTime : _fetchTime,
				remark : _remark
			};
			if(parseInt("1") == 1 && parseInt("1") == 2){
				var standardId = "";
				if(standardId != null && standardId != undefined){
					params.standardId = standardId;
				}
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				$.post("/cmorder/" + type+ "/1", params, function(result){
					dialog.close();
					
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					
					var strParams = "id=" + result.attach;
	    			strParams += "&serial=10549840601068216320";
	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
	        	});
			}
		}); */
		//货到付款
		/* $(".payAfrecv").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑收货地址");
				return;
			}
			
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				var _remark = encodeURI($(".beizhulan").find("textarea").val());
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/1/3", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
	        	});
			}
		}); */
		//到店支付
		// $(".payInshop").click(function(event) {
			/* if($(this).prop("disabled") == true)
        		return false;
			
			var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@12cdf45e";
			if(shopBranch == "") {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			var _fetchTime = $("#scheduledTime").val();
			if(null == _fetchTime || "" == _fetchTime) {
				doAlert("no", "请选择取货时间");
				return;
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				
				var _remark = $(".beizhulan").find("textarea").val();
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					fetchTime : _fetchTime,
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/2/2", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
	        	});
			} */
		// });
	
		// toast提示
		var toastTime=null;
		var displayTime=null;

		function setToast(html) {
		    if (toastTime != null) {
		        clearTimeout(toastTime);
		        clearTimeout(displayTime);
		    }
		    // $('toastId').style.display = 'block';
		    // $('toastId').style.opacity = 1;
		    $('#toastId').css({
		        display: 'block',
		        opacity: 1
		    });
		    $('#toastId .toastContent').text(html);

		    toastTime = setTimeout(function() {
		        // $('toastId').style.opacity = 0;
		        $('#toastId').css("opacity", 0);
		        displayTime = setTimeout(function() {
		            // $('toastId').style.display='none';
		            $('#toastId').css("display", "none");
		        }, 1000);
		    }, 1000);
		}

		function toastDisplay(str) {
		    setToast(str);
		}
	</script>
</body>
</html>
<!--加入判断用户是否关注公众号功能 add by lipengfei at 2015-11-9  -->
  	
	<script type="text/javascript" src="/js/bind/banner.js?v=5.0.0-faae2"></script>
	<script type="text/javascript">
		$(function() {
			//var SHOP_SERIAL = getCookie("SHOP_SERIAL");
			var SHOP_SERIAL = "10549840601068216320";
			if(null != SHOP_SERIAL && SHOP_SERIAL != ""){
				$.ajax({
					url : '/saofu_mobile/checkUserBindStatus',
					data : {
						"serial" : SHOP_SERIAL
					},
					type : 'post',
					cache : false,
					dataType : 'json',
					success : function(data) {
						if (data != null) {
							var guildFocusStr = data.guildFocusStr;
							if(guildFocusStr != null && guildFocusStr == "1"){
								var hasBindedShop = data.hasBindedShop;
								if(hasBindedShop == "0"){
									var qrName = data.QRPublicName;
									var qrUrl = data.QRCodeURL;
									if(qrName != "" && qrUrl != ""){
										var params = qrName+"**"+qrUrl;
										followModule(params);
									}
								}
							}
						} 
					},
					error : function() {
					}
				});
			}
		});
				
	</script>

2017-01-15 18:42:28,506 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:42:25 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=366C1D3B4774535A0B537E0640612E4F; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 18:42:28,506 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:42:28,506 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：到店支付
2017-01-15 18:42:28,506 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:42:28,506 testcase.py[line: 165] INFO: 正在更新步骤执行结果
2017-01-15 18:42:28,506 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:42:28",step_action="{'\u65b9\u6cd5': 'get', 'url': '/mall/tobuy/1?', '\u53c2\u6570': {'mallGoodsId': '26838', 'amount': 1, 'type': 1, 'serial': '10549840601068216320'}}", expected_results="{'条件': [{'消息': '无法打开商品详情', '模式': '到店支付'}], '检查': 'body', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115184224 AND testcase_id = 102 AND step_id = 104 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:28,508 testcase.py[line: 168] INFO: 测试用例[id=102, name=test-n-点击立即购买按钮]执行成功
2017-01-15 18:42:28,508 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:42:28,508 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:42:28" WHERE executed_history_id = 20170115184224 AND testcase_id = 102 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:28,624 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=102]的执行结果
2017-01-15 18:42:28,865 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '95', 'expected_results': '', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,</p>\n<p>\n\t&quot;用例id&quot;:88,</p>\n<p>\n\t&quot;用例名称&quot;:&quot;test-n-把商品加入购物车&quot;<br />\n\t}</p>\n<p>\n\t&nbsp;</p>\n', 'step_number': '1'}, {'id': '96', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品移出购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cart/delfromcart?&quot;,<br />\n\t&quot;参数&quot;:{&quot;strIds&quot;:&quot;[CaseStep.strIds]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2'}, {'id': '178', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;[]&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '3'}], 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 18:05:21', 'tc_external_id': '5', 'creation_ts': '2016-07-20 12:25:46', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '1000', 'summary': '', 'testsuite_id': '91', 'id': '94', 'updater_last_name': 'Administrator', 'name': 'test-n-把商品移出购物车', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '', 'testcase_id': '93', 'estimated_exec_duration': '', 'full_tc_external_id': 'wecharno-5', 'importance': '2', 'active': '1', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:28,991 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:28,991 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 93, 'test-n-把商品移出购物车', '微商城-把商品移出购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:42:28,992 testplan.py[line: 72] INFO: 开始执行测试用例[id=93，name=test-n-把商品移出购物车]
2017-01-15 18:42:28,992 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} 
2017-01-15 18:42:28,992 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:42:28,992 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:28,993 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 95, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} ', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:28,994 testcase.py[line: 84] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:42:29,240 global_function.py[line: 19] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '175', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1'}, {'id': '174', 'expected_results': '', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2'}, {'id': '90', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'step_number': '3'}, {'id': '176', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '4'}, {'id': '177', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '5'}], 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2017-01-15 17:46:37', 'tc_external_id': '4', 'creation_ts': '2016-07-20 12:07:40', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '1000', 'summary': '', 'testsuite_id': '87', 'id': '89', 'updater_last_name': 'Administrator', 'name': 'test-n-把商品加入购物车', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '', 'testcase_id': '88', 'estimated_exec_duration': '', 'full_tc_external_id': 'wecharno-4', 'importance': '2', 'active': '1', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:29,426 global_function.py[line: 39] INFO: 正在读取套件[id=87]的协议，host，端口配置...
2017-01-15 18:42:29,815 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:29,815 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 88, 'test-n-把商品加入购物车', '把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 18:42:29,816 global_function.py[line: 71] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 18:42:29,816 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 18:42:29,816 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 18:42:29,817 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:29,817 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:29,818 testcase.py[line: 84] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:42:29,818 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:42:29,818 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 18:42:29,818 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 18:42:29,821 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 18:42:29,821 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 18:42:29,821 testcase.py[line: 121] ERROR: 步骤[1]执行出错,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 18:42:29,821 testcase.py[line: 128] INFO: 正在更新步骤执行结果
2017-01-15 18:42:29,821 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="1054 (42S22): Unknown column channel_serial1 in where clause", protocol_method="无", runtime="2017-01-15 18:42:29",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial1=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115184224 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:29,823 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:42:29,823 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:42:29" WHERE executed_history_id = 20170115184224 and testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:29,825 global_function.py[line: 82] INFO: 指定用例[88]已执行完
2017-01-15 18:42:29,825 testcase.py[line: 121] ERROR: 步骤[1]执行出错,停止执行用例[id=93, name=test-n-把商品移出购物车]
2017-01-15 18:42:29,825 testcase.py[line: 128] INFO: 正在更新步骤执行结果
2017-01-15 18:42:29,826 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="1054 (42S22): Unknown column channel_serial1 in where clause", protocol_method="无", runtime="2017-01-15 18:42:28",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 88, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u628a\u5546\u54c1\u52a0\u5165\u8d2d\u7269\u8f66'}", expected_results="" WHERE executed_history_id = 20170115184224 AND testcase_id = 93 AND step_id = 95 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:29,827 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:42:29,827 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:42:28" WHERE executed_history_id = 20170115184224 AND testcase_id = 93 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:29,950 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=93]的执行结果
2017-01-15 18:42:30,225 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '78', 'expected_results': '<p>\n\t｛&ldquo;检查&rdquo;:&ldquo;BODY&rdquo;，</p>\n<p>\n\t&ldquo;匹配规则&rdquo;：&ldquo;包含字符串&rdquo;，</p>\n<p>\n\t&ldquo;条件&rdquo;：【｛&ldquo;模式&rdquo;：&ldquo;\\&quot;currentPage\\&quot;:1&rdquo;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝，｛&ldquo;模式&rdquo;：&ldquo;\\&quot;pageStartRow\\&quot;:0&quot;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝】</p>\n<p>\n\t｝</p>\n', 'execution_type': '2', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/plist&quot;,<br />\n\t&quot;参数&quot;:{&quot;page_size&quot;:&quot;10&quot;,&quot;page_no&quot;:&quot;1&quot;,&quot;cateIds&quot;:&quot;&quot;,&quot;orderBy&quot;:&quot;&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;name&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1'}], 'execution_type': '2', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 18:17:12', 'tc_external_id': '1', 'creation_ts': '2016-07-18 15:52:00', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '1000', 'summary': '', 'testsuite_id': '75', 'id': '77', 'updater_last_name': 'Administrator', 'name': 'test-n-显示默认页面', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '', 'testcase_id': '76', 'estimated_exec_duration': '', 'full_tc_external_id': 'wecharno-1', 'importance': '2', 'active': '1', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:30,375 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:30,375 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 76, 'test-n-显示默认页面', '微商城-显示商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:42:30,376 testplan.py[line: 72] INFO: 开始执行测试用例[id=76，name=test-n-显示默认页面]
2017-01-15 18:42:30,376 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}
2017-01-15 18:42:30,377 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\"currentPage\":1","消息":"接口返回错误"},{"模式":"\"pageStartRow\":0","消息":"接口返回错误"}]}
2017-01-15 18:42:30,377 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:30,377 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 76, 'test-n-显示默认页面', 'plan1_of_wechatno', 'pj_wechatno', 78, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}', '{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\\"currentPage\\":1","消息":"接口返回错误"},{"模式":"\\"pageStartRow\\":0","消息":"接口返回错误"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:30,378 testcase.py[line: 84] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:42:30,379 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:42:30,379 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:42:30,379 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('page_size', '10'), ('page_no', '1'), ('cateIds', ''), ('orderBy', ''), ('serial', '10549840601068216320'), ('name', '')])
2017-01-15 18:42:30,379 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:42:30,380 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:42:30,380 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/plist
2017-01-15 18:42:30,380 httpprotocol.py[line: 75] INFO: 参数为：b'page_size=10&page_no=1&cateIds=&orderBy=&serial=10549840601068216320&name='
2017-01-15 18:42:30,380 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:42:30,591 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:42:30,591 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"dataList":[{"id":27105,"name":"微信支付测试-二级","privateSerial":null,"price":0,"oriPrice":0,"description":"微信支付测试-二级","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/30/b9e21dc4-6cf2-4923-9ec7-4259ecea09c1.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":39,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27090,"name":"测试1222-3","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ea123913-89df-4384-929e-158617f67cbe.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":60,"standardLowPrice":980.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27072,"name":"二级规格1129-2","privateSerial":null,"price":0,"oriPrice":0,"description":"二级规格1129-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/29/9ecf031d-e9bd-427e-b147-cb4a1f8fe5d3.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":300,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":25,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27087,"name":"1221-1","privateSerial":null,"price":0,"oriPrice":0,"description":"1221-1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/21/1e844fc5-ee37-4393-97af-2a220971ef1f.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":48,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27040,"name":"一级变三级（改bug前）","privateSerial":null,"price":0,"oriPrice":0,"description":"一级规格1109-2一级规格1109-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/09/23b306d5-384d-4b3b-a4f7-a757d9fc0635.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":135,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27088,"name":"测试1222","privateSerial":null,"price":8,"oriPrice":0,"description":"测试1222","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/ca612435-f6e1-4f0d-bc18-61e558e8f720.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":2341,"istop":0,"soldCount":4,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":7,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27089,"name":"测试1222-2","privateSerial":null,"price":0,"oriPrice":0,"description":"测试1222-2","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/12/22/37bc7e08-1a2f-4c88-9542-ec5613686d7e.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":26,"standardLowPrice":2100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26955,"name":"乐视超级电视","privateSerial":null,"price":0,"oriPrice":0,"description":"乐视超级电视","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/10/31/3d3ca77e-d010-42f3-804f-bc8a563ec753.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":88,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26971,"name":"多级规格测试010","privateSerial":null,"price":0,"oriPrice":0,"description":"多级规格测试010","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/01/fface01c-5d06-400e-bf7b-2ae2fd64c858.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":293,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":15,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27057,"name":"裙子","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/13dbced7-faae-4e13-aebe-6f69d72dc7e0.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":101,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false}],"pageInfo":{"pageSize":10,"currentPage":1,"totalPages":5,"totalRows":47,"pageStartRow":0,"pageEndRow":10,"pagination":true,"hasNextPage":true,"hasPreviousPage":false,"params":null,"needCount":true}}
2017-01-15 18:42:30,594 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:42:28 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:42:30,594 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:42:30,595 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2017-01-15 18:42:30,595 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2017-01-15 18:42:30,595 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:42:30,595 testcase.py[line: 165] INFO: 正在更新步骤执行结果
2017-01-15 18:42:30,595 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2017-01-15 18:42:30",step_action="{'\u65b9\u6cd5': 'post', 'url': '/goods/plist', '\u53c2\u6570': {'page_size': '10', 'page_no': '1', 'cateIds': '', 'orderBy': '', 'serial': '10549840601068216320', 'name': ''}}", expected_results="{'条件': [{'消息': '接口返回错误', '模式': ''currentPage':1'}, {'消息': '接口返回错误', '模式': ''pageStartRow':0'}], '检查': 'BODY', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115184224 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:30,597 testcase.py[line: 168] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2017-01-15 18:42:30,597 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:42:30,597 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:42:30" WHERE executed_history_id = 20170115184224 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:30,718 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2017-01-15 18:42:30,974 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '116', 'expected_results': '', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'step_number': '1'}, {'id': '117', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '2'}], 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 17:52:17', 'tc_external_id': '10', 'creation_ts': '2016-07-25 15:02:41', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '1000', 'summary': '', 'testsuite_id': '113', 'id': '115', 'updater_last_name': 'Administrator', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '', 'testcase_id': '114', 'estimated_exec_duration': '', 'full_tc_external_id': 'wecharno-10', 'importance': '2', 'active': '1', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:31,086 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:31,086 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:42:31,087 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 18:42:31,087 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2017-01-15 18:42:31,087 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:42:31,087 testcase.py[line: 51] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:31,087 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:31,088 testcase.py[line: 84] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:42:31,223 global_function.py[line: 19] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '108', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'step_number': '1'}], 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 17:33:09', 'tc_external_id': '8', 'creation_ts': '2016-07-21 11:26:32', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '1000', 'summary': '', 'testsuite_id': '105', 'id': '107', 'updater_last_name': 'Administrator', 'name': 'test-n-创建储值卡支付订单', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '', 'testcase_id': '106', 'estimated_exec_duration': '', 'full_tc_external_id': 'wecharno-8', 'importance': '2', 'active': '1', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:31,358 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2017-01-15 18:42:31,623 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:31,624 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '0000-00-00 00:00:00')
2017-01-15 18:42:31,625 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2017-01-15 18:42:31,625 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2017-01-15 18:42:31,625 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2017-01-15 18:42:31,625 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:31,625 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:31,626 testcase.py[line: 84] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:42:31,627 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:42:31,627 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:42:31,627 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:42:31,627 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY'), ('fm', 1), ('mallGoodsId', '26838'), ('amount', 1), ('cartIds', ''), ('fetchTime', ''), ('remark', '')])
2017-01-15 18:42:31,627 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:42:31,627 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:42:31,627 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2017-01-15 18:42:31,628 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2017-01-15 18:42:31,628 httpprotocol.py[line: 75] INFO: 参数为：b'serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&fm=1&mallGoodsId=26838&amount=1&cartIds=&fetchTime=&remark='
2017-01-15 18:42:31,628 httpprotocol.py[line: 76] INFO: 请求头为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8', 'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:42:31,673 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:42:31,673 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"message":"系统错误","attach":null}
2017-01-15 18:42:31,673 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:42:29 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:42:31,674 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:42:31,674 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2017-01-15 18:42:31,675 testcase.py[line: 136] INFO: 步骤[1]执行失败,停止执行用例[id=106, name=test-n-创建储值卡支付订单]
2017-01-15 18:42:31,675 testcase.py[line: 143] INFO: 正在更新步骤执行结果
2017-01-15 18:42:31,676 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="post", runtime="2017-01-15 18:42:31",step_action="{'\u8bf7\u6c42\u5934': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '\u65b9\u6cd5': 'post', 'url': '/cmorder/1/4', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'fm': 1, 'mallGoodsId': '26838', 'amount': 1, 'cartIds': '', 'fetchTime': '', 'remark': ''}}", expected_results="{'条件': [{'消息': '创建储值卡支付订单失败,success不为True', '模式': ''success':true'}], '输出': {'attach': 'attach':'(.+?)'', 'success': ''success':(.+?),'}, '检查': 'body', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115184224 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:31,681 global_function.py[line: 75] INFO: 正在更新用例执行结果
2017-01-15 18:42:31,681 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:42:31" WHERE executed_history_id = 20170115184224 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:31,685 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2017-01-15 18:42:31,685 testcase.py[line: 136] INFO: 步骤[1]执行失败,停止执行用例[id=114, name=test-n-提交储值卡支付订单-pay5重定向]
2017-01-15 18:42:31,686 testcase.py[line: 143] INFO: 正在更新步骤执行结果
2017-01-15 18:42:31,686 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Fail",reason="Traceback (most recent call last):  File E:\Projects\interface_project_for_dev\interface\InterfaceUnittestTestCase.py, line 65, in test_interface_of_urlencode    self.assert_result(body)  File E:\Projects\interface_project_for_dev\unittesttestcase.py, line 65, in assert_result    self.assertIn(pattern_str, response_to_check, item[消息])AssertionError: success:true not found in {success:false,message:系统错误,attach:null} : 创建储值卡支付订单失败,success不为True", protocol_method="无", runtime="2017-01-15 18:42:31",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884c\u7528\u4f8b', '\u7528\u4f8bid': 106, '\u7528\u4f8b\u540d\u79f0': 'test-n-\u521b\u5efa\u50a8\u503c\u5361\u652f\u4ed8\u8ba2\u5355'}", expected_results="" WHERE executed_history_id = 20170115184224 AND testcase_id = 114 AND step_id = 116 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:31,690 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:42:31,690 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Fail", runtime="2017-01-15 18:42:31" WHERE executed_history_id = 20170115184224 AND testcase_id = 114 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:31,842 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=114]的执行结果
2017-01-15 18:42:32,087 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '82', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'step_number': '1'}], 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 18:16:14', 'tc_external_id': '2', 'creation_ts': '2016-07-20 11:05:03', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '1000', 'summary': '', 'testsuite_id': '79', 'id': '81', 'updater_last_name': 'Administrator', 'name': 'test-n-点击商品', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '', 'testcase_id': '80', 'estimated_exec_duration': '', 'full_tc_external_id': 'wecharno-2', 'importance': '2', 'active': '1', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:32,199 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:32,199 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:42:32,201 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2017-01-15 18:42:32,202 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2017-01-15 18:42:32,202 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2017-01-15 18:42:32,202 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:32,202 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:32,204 testcase.py[line: 84] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:42:32,205 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:42:32,205 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:42:32,205 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('id', 26838), ('serial', '10549840601068216320')])
2017-01-15 18:42:32,205 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:42:32,205 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:42:32,205 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2017-01-15 18:42:32,206 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:42:32,253 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:42:32,253 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=5.0.0-faae2" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=5.0.0-faae2">
	<link rel="stylesheet" href="/css/malls/detail.css?v=5.0.0-faae2">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/mall/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320",
			mallConfigSerial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=5.0.0-faae2"></script>
	<script src="/common/js/request.js?v=5.0.0-faae2"></script>
	<script src="/common/js/extend-number.js?v=5.0.0-faae2"></script>
	<script src="/component/iscroll/js/iscroll.js?v=5.0.0-faae2"></script>
	<script src="/component/swiper/js/swiper.min.js?v=5.0.0-faae2"></script>
	<script src="/js/malls/detail.js?v=5.0.0-faae2"></script>
</body>
</html>
2017-01-15 18:42:32,253 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:42:29 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3983'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=14A613FF4F6F0475B13287F674F4C4D1; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2017-01-15 18:42:32,253 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:42:32,253 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2017-01-15 18:42:32,253 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:42:32,254 testcase.py[line: 165] INFO: 正在更新步骤执行结果
2017-01-15 18:42:32,254 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:42:32",step_action="{'\u65b9\u6cd5': 'get', 'url': '/goods/item?', '\u53c2\u6570': {'id': 26838, 'serial': '10549840601068216320'}}", expected_results="{'条件': [{'消息': '点击商品时无法打开购买页面', '模式': '立即购买'}], '检查': 'body', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115184224 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:32,256 testcase.py[line: 168] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2017-01-15 18:42:32,256 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:42:32,256 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:42:32" WHERE executed_history_id = 20170115184224 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:32,410 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2017-01-15 18:42:32,691 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '101', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;code&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;200&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '2'}], 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 18:13:45', 'tc_external_id': '6', 'creation_ts': '2016-07-20 15:50:42', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '1000', 'summary': '', 'testsuite_id': '97', 'id': '99', 'updater_last_name': 'Administrator', 'name': 'test-n-查看购物车商品列表', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '', 'testcase_id': '98', 'estimated_exec_duration': '', 'full_tc_external_id': 'wecharno-6', 'importance': '2', 'active': '1', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:32,806 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:32,806 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 98, 'test-n-查看购物车商品列表', '微商城-查看购物车商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:42:32,808 testplan.py[line: 72] INFO: 开始执行测试用例[id=98，name=test-n-查看购物车商品列表]
2017-01-15 18:42:32,808 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2017-01-15 18:42:32,808 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}
2017-01-15 18:42:32,808 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:32,808 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 98, 'test-n-查看购物车商品列表', 'plan1_of_wechatno', 'pj_wechatno', 101, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:32,810 testcase.py[line: 84] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:42:32,810 casestep.py[line: 171] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2017-01-15 18:42:32,810 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_serial]
2017-01-15 18:42:32,810 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:42:32,810 casestep.py[line: 149] INFO: 转换后的参数体为：OrderedDict([('serial', '[global_serial]'), ('openId', 'ous64uFCCLMyXYDJ-MkNilyCI5CY')])
2017-01-15 18:42:32,810 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:42:32,811 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2017-01-15 18:42:32,811 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=%5Bglobal_serial%5D&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2017-01-15 18:42:32,811 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2017-01-15 18:42:32,829 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2017-01-15 18:42:32,830 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":false,"code":"4000","message":"Server Error"}
2017-01-15 18:42:32,830 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Sun, 15 Jan 2017 10:42:30 GMT'), ('Content-Type', 'application/json;charset=ISO-8859-1'), ('Content-Length', '56'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2017-01-15 18:42:32,831 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2017-01-15 18:42:32,831 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：200
2017-01-15 18:42:32,831 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2017-01-15 18:42:32,831 testcase.py[line: 165] INFO: 正在更新步骤执行结果
2017-01-15 18:42:32,831 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2017-01-15 18:42:32",step_action="{'\u65b9\u6cd5': 'get', 'url': '/cartlist?', '\u53c2\u6570': {'serial': '[global_serial]', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}}", expected_results="{'条件': [{'消息': '把商品移出购物车中失败', '模式': '200'}], '检查': 'code', '匹配规则': '包含字符串'}" WHERE executed_history_id = 20170115184224 AND testcase_id = 98 AND step_id = 101 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:32,833 testcase.py[line: 168] INFO: 测试用例[id=98, name=test-n-查看购物车商品列表]执行成功
2017-01-15 18:42:32,833 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:42:32,833 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2017-01-15 18:42:32" WHERE executed_history_id = 20170115184224 AND testcase_id = 98 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:32,952 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=98]的执行结果
2017-01-15 18:42:33,197 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '181', 'expected_results': '', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1'}, {'id': '180', 'expected_results': '', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2'}, {'id': '128', 'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n', 'step_number': '3'}], 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-11-29 19:43:22', 'tc_external_id': '12', 'creation_ts': '2016-07-26 15:06:38', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '1000', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'testsuite_id': '125', 'id': '127', 'updater_last_name': 'Administrator', 'name': 'test-n-免费领取优惠券', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '', 'testcase_id': '126', 'estimated_exec_duration': '', 'full_tc_external_id': 'wecharno-12', 'importance': '2', 'active': '1', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:33,335 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:33,335 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:42:33,364 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2017-01-15 18:42:33,364 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2017-01-15 18:42:33,364 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:42:33,365 testcase.py[line: 84] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:42:33,365 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:42:33,365 mydb.py[line: 72] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2017-01-15 18:42:33,374 testcase.py[line: 165] INFO: 正在更新步骤执行结果
2017-01-15 18:42:33,375 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:42:33",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884cSQl', '\u66f4\u65b0': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '\u53c2\u6570': ['40758966216286146560']}", expected_results="" WHERE executed_history_id = 20170115184224 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:33,381 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2017-01-15 18:42:33,381 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：
2017-01-15 18:42:33,381 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:33,382 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:33,384 testcase.py[line: 84] INFO: 开始执行步骤操作[第2步]
2017-01-15 18:42:33,384 casestep.py[line: 117] INFO: 没找到需要替换的动态参数
2017-01-15 18:42:33,384 mydb.py[line: 72] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2017-01-15 18:42:33,391 testcase.py[line: 165] INFO: 正在更新步骤执行结果
2017-01-15 18:42:33,391 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2017-01-15 18:42:33",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u66f4\u65b0': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '\u53c2\u6570': [40758966216286146560]}", expected_results="" WHERE executed_history_id = 20170115184224 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:33,395 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2017-01-15 18:42:33,395 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2017-01-15 18:42:33,395 testcase.py[line: 61] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:33,396 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post",url:"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:33,399 testcase.py[line: 75] ERROR: 步骤[3]信息填写错误: Expecting property name enclosed in double quotes: line 1 column 14 (char 13),停止执行用例[id=126, name=test-n-免费领取优惠券]
2017-01-15 18:42:33,399 testcase.py[line: 80] INFO: 正在更新步骤执行结果
2017-01-15 18:42:33,399 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Block",reason="Expecting property name enclosed in double quotes: line 1 column 14 (char 13)", protocol_method="无", runtime="2017-01-15 18:42:33" WHERE executed_history_id = 20170115184224 AND testcase_id = 126 AND step_id = 128 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:33,402 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:42:33,402 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:42:33" WHERE executed_history_id = 20170115184224 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:33,617 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2017-01-15 18:42:33,940 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '112', 'expected_results': '<p>\n\t{&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;style&quot;:&quot;testcase&quot;,<br />\n\t<br />\n\t&quot;testcase_id&quot;:114,<br />\n\t<br />\n\t&quot;testcase_name&quot;:&quot;test-n-提交储值卡支付订单-pay5重定向&quot;<br />\n\t}</p>\n', 'step_number': '1'}, {'id': '119', 'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_without_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:-1,&quot;yhCardType&quot;:-1}<br />\n\t}</p>\n', 'step_number': '3'}], 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2016-07-29 17:13:06', 'tc_external_id': '9', 'creation_ts': '2016-07-22 14:48:17', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '2', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n', 'testsuite_id': '109', 'id': '111', 'updater_last_name': 'Administrator', 'name': 'test-n-储值卡支付-不使用优惠，会员账户支付', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '', 'testcase_id': '110', 'estimated_exec_duration': '', 'full_tc_external_id': 'wecharno-9', 'importance': '2', 'active': '0', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:34,055 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:34,056 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 110, 'test-n-储值卡支付-不使用优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:42:34,057 testplan.py[line: 72] INFO: 开始执行测试用例[id=110，name=test-n-储值卡支付-不使用优惠，会员账户支付]
2017-01-15 18:42:34,057 testcase.py[line: 28] WARNING: 用例[name=test-n-储值卡支付-不使用优惠，会员账户支付]处于禁用状态[active=0]，不执行
2017-01-15 18:42:34,057 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:42:34,057 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2017-01-15 18:42:34" WHERE executed_history_id = 20170115184224 AND testcase_id = 110 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:34,182 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=110]的执行结果
2017-01-15 18:42:34,305 testplan.py[line: 45] INFO: 获取测试用例信息 [{'version': '1', 'steps': [{'id': '175', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial1=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '1'}, {'id': '174', 'expected_results': '', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '2'}, {'id': '90', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'step_number': '3'}, {'id': '176', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'step_number': '4'}, {'id': '177', 'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'active': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'step_number': '5'}], 'execution_type': '1', 'updater_first_name': 'Testlink', 'modification_ts': '2017-01-15 17:46:37', 'tc_external_id': '4', 'creation_ts': '2016-07-20 12:07:40', 'author_login': 'admin', 'is_open': '1', 'author_id': '1', 'author_first_name': 'Testlink', 'node_order': '1000', 'summary': '', 'testsuite_id': '87', 'id': '89', 'updater_last_name': 'Administrator', 'name': 'test-n-把商品加入购物车', 'updater_id': '1', 'layout': '1', 'status': '1', 'preconditions': '', 'testcase_id': '88', 'estimated_exec_duration': '', 'full_tc_external_id': 'wecharno-4', 'importance': '2', 'active': '1', 'updater_login': 'admin', 'author_last_name': 'Administrator'}]
2017-01-15 18:42:34,446 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2017-01-15 18:42:34,446 mydb.py[line: 57] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2017-01-15 18:42:34,447 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2017-01-15 18:42:34,447 testcase.py[line: 40] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\"[global_openId]\",)"}
2017-01-15 18:42:34,447 testcase.py[line: 42] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2017-01-15 18:42:34,447 testcase.py[line: 56] INFO: 记录测试步骤到测试步骤报告表
2017-01-15 18:42:34,447 mydb.py[line: 57] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20170115184224', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial1=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '0000-00-00 00:00:00')
2017-01-15 18:42:34,449 testcase.py[line: 84] INFO: 开始执行步骤操作[第1步]
2017-01-15 18:42:34,449 casestep.py[line: 138] INFO: 找到待替换的全局动态参数：[global_openId]
2017-01-15 18:42:34,449 casestep.py[line: 149] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2017-01-15 18:42:34,449 mydb.py[line: 87] INFO: query：SELECT id FROM customer WHERE channel_serial1=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2017-01-15 18:42:34,454 mydb.py[line: 98] ERROR: 执行数据库查询操作失败：1054 (42S22): Unknown column 'channel_serial1' in 'where clause'
2017-01-15 18:42:34,454 casestep.py[line: 203] INFO: 数据库服务器返回的查询结果为为 query_result:1054 (42S22): Unknown column 'channel_serial1' in 'where clause', flag:False
2017-01-15 18:42:34,454 testcase.py[line: 121] ERROR: 步骤[1]执行出错,停止执行用例[id=88, name=test-n-把商品加入购物车]
2017-01-15 18:42:34,454 testcase.py[line: 128] INFO: 正在更新步骤执行结果
2017-01-15 18:42:34,455 mydb.py[line: 72] INFO: query：UPDATE case_step_report_tb SET runresult="Error",reason="1054 (42S22): Unknown column channel_serial1 in where clause", protocol_method="无", runtime="2017-01-15 18:42:34",step_action="{'\u6b65\u9aa4\u7c7b\u578b': '\u6267\u884csql', '\u5355\u6761\u67e5\u8be2': 'SELECT id FROM customer WHERE channel_serial1=%s', '\u53c2\u6570': ['ous64uFCCLMyXYDJ-MkNilyCI5CY']}", expected_results="{'输出': {'customer_id': 1}, '检查': 'body'}" WHERE executed_history_id = 20170115184224 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:34,459 testplan.py[line: 76] INFO: 正在更新用例执行结果
2017-01-15 18:42:34,459 mydb.py[line: 72] INFO: query：UPDATE testcase_report_tb SET runresult="Error", runtime="2017-01-15 18:42:34" WHERE executed_history_id = 20170115184224 AND testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2017-01-15 18:42:34,619 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=88]的执行结果
2017-01-15 18:42:34,761 testplan.py[line: 97] INFO: 测试计划[project=pj_wechatno ,testplan=plan1_of_wechatno]已执行完
2017-01-15 18:42:34,761 main.py[line: 242] INFO: 接口测试已执行完成，正在关闭数据库连接
2017-01-15 18:42:34,763 htmlreporter.py[line: 37] INFO: 正在查询测试用例总数
2017-01-15 18:42:34,763 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE executed_history_id = %s  data：('20170115184224',)
2017-01-15 18:42:34,764 htmlreporter.py[line: 43] INFO: 正在查询执行通过的用例数
2017-01-15 18:42:34,764 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Pass', '20170115184224')
2017-01-15 18:42:34,765 htmlreporter.py[line: 49] INFO: 正在查询执行失败的用例数
2017-01-15 18:42:34,765 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Fail', '20170115184224')
2017-01-15 18:42:34,766 htmlreporter.py[line: 55] INFO: 正在查询执行出错的用例数
2017-01-15 18:42:34,766 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Error', '20170115184224')
2017-01-15 18:42:34,767 htmlreporter.py[line: 61] INFO: 正在查询未执行的用例数
2017-01-15 18:42:34,767 mydb.py[line: 87] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Block', '20170115184224')
2017-01-15 18:42:34,769 htmlreporter.py[line: 87] INFO: 正在查询已运的测试计划
2017-01-15 18:42:34,769 mydb.py[line: 104] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20170115184224',)
2017-01-15 18:42:34,770 htmlreporter.py[line: 113] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]的测试用例执行结果
2017-01-15 18:42:34,770 mydb.py[line: 104] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20170115184224')
2017-01-15 18:42:34,771 htmlreporter.py[line: 120] INFO: 正在记录测试测试计划[project：pj_pos, testplan：无计划]的测试用例运行结果到测试报告
2017-01-15 18:42:34,772 htmlreporter.py[line: 113] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例执行结果
2017-01-15 18:42:34,772 mydb.py[line: 104] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20170115184224')
2017-01-15 18:42:34,773 htmlreporter.py[line: 120] INFO: 正在记录测试测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例运行结果到测试报告
2017-01-15 18:42:34,775 htmlreporter.py[line: 134] INFO: 正在查询已运的测试计划
2017-01-15 18:42:34,775 mydb.py[line: 104] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20170115184224',)
2017-01-15 18:42:34,776 htmlreporter.py[line: 146] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]已运行的测试用例
2017-01-15 18:42:34,777 mydb.py[line: 104] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20170115184224')
2017-01-15 18:42:34,778 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=148]步骤运行结果
2017-01-15 18:42:34,778 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_pos', '无计划', 148, '20170115184224')
2017-01-15 18:42:34,780 htmlreporter.py[line: 146] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]已运行的测试用例
2017-01-15 18:42:34,780 mydb.py[line: 104] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20170115184224')
2017-01-15 18:42:34,781 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=120]步骤运行结果
2017-01-15 18:42:34,782 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 120, '20170115184224')
2017-01-15 18:42:34,783 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=106]步骤运行结果
2017-01-15 18:42:34,783 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 106, '20170115184224')
2017-01-15 18:42:34,785 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=102]步骤运行结果
2017-01-15 18:42:34,785 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 102, '20170115184224')
2017-01-15 18:42:34,787 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=93]步骤运行结果
2017-01-15 18:42:34,787 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 93, '20170115184224')
2017-01-15 18:42:34,789 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=88]步骤运行结果
2017-01-15 18:42:34,789 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 88, '20170115184224')
2017-01-15 18:42:34,792 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=76]步骤运行结果
2017-01-15 18:42:34,792 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 76, '20170115184224')
2017-01-15 18:42:34,794 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=114]步骤运行结果
2017-01-15 18:42:34,794 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 114, '20170115184224')
2017-01-15 18:42:34,795 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=80]步骤运行结果
2017-01-15 18:42:34,795 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 80, '20170115184224')
2017-01-15 18:42:34,797 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=98]步骤运行结果
2017-01-15 18:42:34,797 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 98, '20170115184224')
2017-01-15 18:42:34,799 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=126]步骤运行结果
2017-01-15 18:42:34,799 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 126, '20170115184224')
2017-01-15 18:42:34,801 htmlreporter.py[line: 177] INFO: 正在查询测试用例[id=110]步骤运行结果
2017-01-15 18:42:34,801 mydb.py[line: 104] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 110, '20170115184224')
2017-01-15 18:42:34,802 htmlreporter.py[line: 199] INFO: 正在设置测试报告结果文件名
2017-01-15 18:42:34,802 htmlreporter.py[line: 209] INFO: 测试报告文件名所在路径为：E:\\Projects\\report\\test_report20170115184224.html
2017-01-15 18:42:34,802 htmlreporter.py[line: 202] INFO: 正在生成测试报告
2017-01-15 18:42:34,806 main.py[line: 265] INFO: 生成测试报告成功
2017-01-15 18:42:34,988 main.py[line: 272] INFO: E:\\Projects\\report\\test_report20170115184224.html
2017-01-15 18:42:34,988 main.py[line: 275] INFO: 正在发送测试报告邮件...
2017-01-15 18:42:36,553 main.py[line: 279] INFO: 发送邮件成功
